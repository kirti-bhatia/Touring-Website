/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */

window.Granite = window.Granite || {};

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */

/**
 * A helper class providing a set of Sling-related utilities.
 * @static
 * @singleton
 * @class Granite.Sling
 */
Granite.Sling = {

    /**
     * The selector for infinite hierarchy depth when retrieving
     * repository content.
     * @static
     * @final
     * @type String
     */
    SELECTOR_INFINITY: ".infinity",

    /**
     * The parameter name for the used character set.
     * @static
     * @final
     * @type String
     */
    CHARSET: "_charset_",

    /**
     * The parameter name for the status.
     * @static
     * @final
     * @type String
     */
    STATUS: ":status",

    /**
     * The parameter value for the status type "browser".
     * @static
     * @final
     * @type String
     */
    STATUS_BROWSER: "browser",

    /**
     * The parameter name for the operation.
     * @static
     * @final
     * @type String
     */
    OPERATION: ":operation",

    /**
     * The parameter value for the delete operation.
     * @static
     * @final
     * @type String
     */
    OPERATION_DELETE: "delete",

    /**
     * The parameter value for the move operation.
     * @static
     * @final
     * @type String
     */
    OPERATION_MOVE: "move",

    /**
     * The parameter name suffix for deleting.
     * @static
     * @final
     * @type String
     */
    DELETE_SUFFIX: "@Delete",

    /**
     * The parameter name suffix for setting a type hint.
     * @static
     * @final
     * @type String
     */
    TYPEHINT_SUFFIX: "@TypeHint",

    /**
     * The parameter name suffix for copying.
     * @static
     * @final
     * @type String
     */
    COPY_SUFFIX: "@CopyFrom",

    /**
     * The parameter name suffix for moving.
     * @static
     * @final
     * @type String
     */
    MOVE_SUFFIX: "@MoveFrom",

    /**
     * The parameter name for the ordering.
     * @static
     * @final
     * @type String
     */
    ORDER: ":order",

    /**
     * The parameter name for the replace flag.
     * @static
     * @final
     * @type String
     */
    REPLACE: ":replace",

    /**
     * The parameter name for the destination flag.
     * @static
     * @final
     * @type String
     */
    DESTINATION: ":dest",

    /**
     * The parameter name for the save parameter prefix.
     * @static
     * @final
     * @type String
     */
    SAVE_PARAM_PREFIX: ":saveParamPrefix",

    /**
     * The parameter name for input fields that should
     * be ignored by Sling.
     * @static
     * @final
     * @type String
     */
    IGNORE_PARAM: ":ignore",

    /**
     * The parameter name for login requests.
     * @static
     * @final
     * @type String
     */
    REQUEST_LOGIN_PARAM: "sling:authRequestLogin",

    /**
     * Login URL
     * @static
     * @final
     * @type String
     */
    LOGIN_URL: "/system/sling/login.html",

    /**
     * Logout URL
     * @static
     * @final
     * @type String
     */
    LOGOUT_URL: "/system/sling/logout.html"
};

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */
(function(Granite, $) {
    /**
     * A helper class providing a set of general utilities.
     * @static
     * @singleton
     * @class Granite.Util
     */
    Granite.Util = (function() {

        var self = {

            /**
             * Replaces occurrences of <code>{n}</code> in the specified text with
             * the texts from the snippets.
             * <p>Example 1 (single snippet):<pre><code>
    var text = Granite.Util.patchText("{0} has signed in.", "Jack");
               </code></pre>Result 1:<pre><code>
    Jack has signed in.
               </code></pre></p>
             * <p>Example 2 (multiple snippets):<pre><code>
    var text = "{0} {1} has signed in from {2}.";
    text = Granite.Util.patchText(text, ["Jack", "McFarland", "x.x.x.x"]);
               </code></pre>Result 2:<pre><code>
    Jack McFarland has signed in from x.x.x.x.
               </code></pre></p>
             * @static
             * @param {String} text The text
             * @param {String/String[]} snippets The text(s) replacing
             *        <code>{n}</code>
             * @return {String} The patched text
             */
            patchText: function(text, snippets) {
                if (snippets) {
                    if (!$.isArray(snippets)) {
                        text = text.replace("{0}", snippets);
                    } else {
                        for (var i = 0; i < snippets.length; i++) {
                            text = text.replace(("{" + i + "}"), snippets[i]);
                        }
                    }
                }
                return text;
            },

            /**
             * Returns the top most accessible window. Check {@link setIFrameMode} to avoid security exception message
             * on WebKit browsers if this method is called in an iFrame included in a window from different domain.
             * @static
             * @return {Window} The top window
             */
            getTopWindow: function() {
                var win = window;
                if (this.iFrameTopWindow) {
                    return this.iFrameTopWindow;
                }
                try {
                    // try to access parent
                    // win.parent.location.href throws an exception if not authorized (e.g. different location in a portlet)
                    while (win.parent && win !== win.parent && win.parent.location.href) {
                        win = win.parent;
                    }
                } catch (error) {}
                return win;
            },

            /**
             * Allows to define if Granite.Util is running in an iFrame and parent window is in another domain
             * (and optionally define what would be the top window in that case.
             * This is necessary to use {@link getTopWindow} in a iFrame on WebKit based browsers because
             * {@link getTopWindow} iterates on parent windows to find the top one which triggers a security exception
             * if one parent window is in a different domain. Exception cannot be caught but is not breaking the JS
             * execution.
             * @param {Object} topWindow (optional) The iFrame top window. Must be running on the same host to avoid
             * security exception. Defaults to window.
             */
            setIFrameMode: function(topWindow) {
                this.iFrameTopWindow = topWindow || window;
            },

            /**
             * Applies default properties if inexistent inzo the base object.
             * Child objects are merged recursively.
             * REMARK:
             *   - objects are recursively merged
             *   - simple type obejct properties are copied over the base
             *   - arrays are cloned and override the base (no value merging)
             *
             * @static
             * @param {Object} base object
             * @param {Object} pass objects to be copied onto the base
             * @return {Object} The base object with defaults
             */
            applyDefaults: function() {
                var override;
                var base = arguments[0] || {};

                for (var i = 1; i < arguments.length; i++) {
                    override = arguments[i];

                    for (var name in override) {
                        var value = override[name];

                        if (override.hasOwnProperty(name) && value !== undefined) {

                            if (value !== null && typeof value === "object" && !(value instanceof Array)) {
                                // nested object
                                base[name] = self.applyDefaults(base[name], value);
                            } else if (value instanceof Array) {
                                // override array
                                base[name] = value.slice(0);
                            } else {
                                // simple type
                                base[name] = value;
                            }
                        }

                    }
                }

                return base;
            },

            /**
             * Get keycode from event
             * @param event Event
             * @returns {Number} Keycode
             */
            getKeyCode: function(event) {
                return event.keyCode ? event.keyCode : event.which;
            }

        };

        return self;

    }());

}(Granite, jQuery));

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */
/* global CQURLInfo:false, G_XHR_HOOK:false */
(function(Granite, util, sling, $) {
    /**
     * A helper class providing a set of HTTP-related utilities.
     * @static
     * @singleton
     * @class Granite.HTTP
     */
    Granite.HTTP = (function() {
        /**
         * The context path used on the server.
         * May only be set by {@link #detectContextPath}.
         * @private
         * @type String
         */
        var contextPath = null;

        /**
         * The regular expression to detect the context path used
         * on the server using the URL of this script.
         * @private
         * @readonly
         * @type RegExp
         */
        var SCRIPT_URL_REGEXP = /^(?:http|https):\/\/[^\/]+(\/.*)\/(?:etc\.clientlibs|etc(\/.*)*\/clientlibs|libs(\/.*)*\/clientlibs|apps(\/.*)*\/clientlibs|etc\/designs).*\.js(\?.*)?$/;

        /**
         * The regular expression to match `#` and other non-ASCII characters in a URI.
         * @private
         * @readonly
         * @type RegExp
         */
        var ENCODE_PATH_REGEXP = /[^\w-.~%:/?[\]@!$&'()*+,;=]/;

        /**
         * The regular expression to parse URI.
         * @private
         * @readonly
         * @type RegExp
         * @see https://tools.ietf.org/html/rfc3986#appendix-B
         */
        var URI_REGEXP = /^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;

        /**
         * Indicates after a session timeout if a refresh has already been triggered
         * in order to avoid multiple alerts.
         * @private
         * @type String
         */
        var loginRedirected = false;

        var self = {};

        /**
         * Returns the scheme and authority (userinfo, host, port) components of the given URI;
         * or an empty string if the URI does not have the components.
         *
         * This method assumes the URI is valid.
         *
         * e.g. `scheme://userinfo@host:80/path?query#fragment` -> `scheme://userinfo@host:80`
         *
         * @static
         * @param {String} uri The URI
         * @return {String} The scheme and authority components
         */
        self.getSchemeAndAuthority = function(uri) {
            if (!uri) {
                return "";
            }

            var result = URI_REGEXP.exec(uri);

            if (result === null) {
                return "";
            }

            return [ result[1], result[3] ].join("");
        };

        /**
         * Returns the context path used on the server.
         * @static
         * @return {String} The context path
         */
        self.getContextPath = function() {
            return contextPath;
        };

        /**
         * Detects the context path used on the server.
         * @private
         * @static
         */
        self.detectContextPath = function() {
            try {
                if (window.CQURLInfo) {
                    contextPath = CQURLInfo.contextPath || "";
                } else {
                    var scripts = document.getElementsByTagName("script");
                    for (var i = 0; i < scripts.length; i++) {
                        // in IE the first script is not the expected widgets js: loop
                        // until it is found
                        var result = SCRIPT_URL_REGEXP.exec(scripts[i].src);
                        if (result) {
                            contextPath = result[1];
                            return;
                        }
                    }
                    contextPath = "";
                }
            } catch (e) {
            }
        };

        /**
         * Makes sure the specified relative URL starts with the context path
         * used on the server. If an absolute URL is passed, it will be returned
         * as-is.
         * @static
         * @param {String} url The URL
         * @return {String} The externalized URL
         */
        self.externalize = function(url) {
            try {
                if (url.indexOf("/") === 0 && contextPath && url.indexOf(contextPath + "/") !== 0) {
                    url = contextPath + url;
                }
            } catch (e) {
            }
            return url;
        };

        /**
         * Removes scheme, authority and context path from the specified
         * absolute URL if it has the same scheme and authority as the
         * specified document (or the current one). If a relative URL is passed,
         * the context path will be stripped if present.
         * @static
         * @param {String} url The URL
         * @param {String} doc (optional) The document
         * @return {String} The internalized URL
         */
        self.internalize = function(url, doc) {
            if (url.charAt(0) === "/") {
                if (contextPath === url) {
                    return "";
                } else if (contextPath && url.indexOf(contextPath + "/") === 0) {
                    return url.substring(contextPath.length);
                } else {
                    return url;
                }
            }

            if (!doc) {
                doc = document;
            }
            var docHost = self.getSchemeAndAuthority(doc.location.href);
            var urlHost = self.getSchemeAndAuthority(url);
            if (docHost === urlHost) {
                return url.substring(urlHost.length + (contextPath ? contextPath.length : 0));
            } else {
                return url;
            }
        };

        /**
         * Removes all parts but the path from the specified URL.
         * <p>Examples:<pre><code>
         /x/y.sel.html?param=abc => /x/y
         </code></pre>
         * <pre><code>
         http://www.day.com/foo/bar.html => /foo/bar
         </code></pre><p>
         * @static
         * @param {String} url The URL, may be empty. If empty <code>window.location.href</code> is taken.
         * @return {String} The path
         */
        self.getPath = function(url) {

            if (!url) {
                if (window.CQURLInfo && CQURLInfo.requestPath) {
                    return CQURLInfo.requestPath;
                } else {
                    url = window.location.pathname;
                }
            } else {
                url = self.removeParameters(url);
                url = self.removeAnchor(url);
            }

            url = self.internalize(url);
            var i = url.indexOf(".", url.lastIndexOf("/"));
            if (i !== -1) {
                url = url.substring(0, i);
            }
            return url;
        };

        /**
         * Removes the fragment component from the given URI.
         *
         * This method assumes the URI is valid.
         *
         * e.g. `scheme://userinfo@host:80/path?query#fragment` -> `scheme://userinfo@host:80/path?query`
         *
         * @static
         * @param {String} uri The URI
         * @return {String} The URI without fragment component
         */
        self.removeAnchor = function(uri) {
            var fragmentIndex = uri.indexOf("#");
            if (fragmentIndex >= 0) {
                return uri.substring(0, fragmentIndex);
            } else {
                return uri;
            }
        };

        /**
         * Removes the query component and its subsequent fragment component from the given URI.
         * i.e. When query component exists, the subsequent fragment component is also removed.
         * However, when query component doesn't exist, fragment component is not removed.
         *
         * The assumption here is that the usages of `#` before the `?` are intended as part of the path component
         * that need to be encoded separately.
         * This assumption is made because `c.d.cq.commons.jcr.JcrUtil#isValidName` allows `#`.
         *
         * e.g. `scheme://userinfo@host:80/path#with#hash?query#fragment` -> `scheme://userinfo@host:80/path#with#hash`
         *
         * @static
         * @param {String} uri The URL
         * @return {String} The URI without the query component and its subsequent fragment component
         */
        self.removeParameters = function(uri) {
            var queryIndex = uri.indexOf("?");
            if (queryIndex >= 0) {
                return uri.substring(0, queryIndex);
            } else {
                return uri;
            }
        };

        /**
         * Encodes the path component of the given URI if it is not already encoded.
         * See {@link #encodePath} for the details of the encoding.
         *
         * e.g. `scheme://userinfo@host:80/path#with#hash?query#fragment` -> `scheme://userinfo@host:80/path%23with%23hash?query#fragment`
         *
         * @param {String} uri The URI to encode
         * @return {String} The encoded URI
         */
        self.encodePathOfURI = function(uri) {
            var DELIMS = [ "?", "#" ];

            var parts = [ uri ];
            var delim;
            for (var i = 0, ln = DELIMS.length; i < ln; i++) {
                delim = DELIMS[i];
                if (uri.indexOf(delim) >= 0) {
                    parts = uri.split(delim);
                    break;
                }
            }

            if (ENCODE_PATH_REGEXP.test(parts[0])) {
                parts[0] = self.encodePath(parts[0]);
            }

            return parts.join(delim);
        };

        /**
         * Encodes the given URI using `encodeURI`.
         *
         * This method is used to encode URI components from the scheme component up to the path component (inclusive).
         * Therefore, `?` and `#` are also encoded in addition.
         *
         * However `[` and `]` are not encoded.
         * The assumption here is that the usages of `[` and `]` are only at the host component (for IPv6), not at the path component.
         * This assumption is made because `c.d.cq.commons.jcr.JcrUtil#isValidName` disallows `[` and `]`.
         *
         * Examples
         *
         * * `scheme://userinfo@host:80/path?query#fragment` -> `scheme://userinfo@host:80/path%3Fquery%23fragment`
         * * `http://[2001:db8:85a3:8d3:1319:8a2e:370:7348]/` -> `http://[2001:db8:85a3:8d3:1319:8a2e:370:7348]/`
         *
         * @param {String} uri The URI to encode
         * @return {String} The encoded URI
         */
        self.encodePath = function(uri) {
            uri = encodeURI(uri);

            // Decode back `%5B` and `%5D`.
            // The `[` and `]` are not valid characters at the path component and need to be encoded, which `encodeURI` does correctly.
            // However as mentioned in the doc, they are assumed to be used for authority component only.
            uri = uri.replace(/%5B/g, "[").replace(/%5D/g, "]");

            uri = uri.replace(/\?/g, "%3F");
            uri = uri.replace(/#/g, "%23");

            return uri;
        };

        /**
        * Returns if the redirect to the login page has already been triggered.
        * @return {Boolean}
        */
        self.handleLoginRedirect = function() {
            if (!loginRedirected) {
                loginRedirected = true;
                alert(Granite.I18n.get("Your request could not be completed because you have been signed out."));
                var l = util.getTopWindow().document.location;
                l.href = self.externalize(sling.LOGIN_URL) +
                    "?resource=" + encodeURIComponent(l.pathname + l.search + l.hash);
            }
        };

        /**
        * Gets the XHR hooked URL if called in a portlet context
        * @param {String} url The URL to get
        * @param {String} method The method to use to retrieve the XHR hooked URL
        * @param {Object} params The parameters
        * @return {String} The XHR hooked URL if available, the provided URL otherwise
        */
        self.getXhrHook = function(url, method, params) {
            method = method || "GET";
            if (window.G_XHR_HOOK && $.isFunction(G_XHR_HOOK)) {
                var p = {
                    "url": url,
                    "method": method
                };
                if (params) {
                    p["params"] = params;
                }
                return G_XHR_HOOK(p);
            }
            return null;
        };

        /**
         * Evaluates and returns the body of the specified response object.
         * Alternatively, a URL can be specified, in which case it will be
         * requested using a synchornous {@link #get} in order to acquire
         * the response object.
         * @static
         * @param {Object/String} response The response object or URL
         * @return {Object} The evaluated response body
         * @since 5.3
         */
        self.eval = function(response) {
            if (typeof response !== "object") {
                response = $.ajax({
                    url: response,
                    type: "get",
                    async: false
                });
            }
            try {
                // support responseText for backward compatibility (pre 5.3)
                return eval("(" + (response.body ? response.body
                    : response.responseText) + ")");
            } catch (e) {
            }
            return null;
        };

        return self;
    }());
}(Granite, Granite.Util, Granite.Sling, jQuery));

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */

(function(document, Granite, util, http, $) {
    /**
     * A helper class providing a set of utilities related to internationalization (i18n).
     *
     * <h3>Locale Priorities</h3>
     * <p>The locale is read based on the following priorities:</p>
     * <ol>
     *   <li>manually specified locale</li>
     *   <li><code>document.documentElement.lang</code></li>
     *   <li><code>Granite.I18n.LOCALE_DEFAULT</code></li>
     * </ol>
     *
     * <h3>Dictionary Priorities</h3>
     * <p>The dictionary URL is read based on the following priorities:</p>
     * <ol>
     *   <li>manually specified URL (<code>urlPrefix</code, <code>urlSuffix</code>)</li>
     *   <li><code>data-i18n-dictionary-src</code> attribute at &lt;html&gt; element, which has the type of <a href="http://tools.ietf.org/html/rfc6570">URI Template</a> string</li>
     *   <li>The URL resolved from default <code>urlPrefix</code> and <code>urlSuffix</code></li>
     * </ol>
     *
     * <h3>URI Template of data-i18n-dictionary-src</h3>
     * <p>It expects the variable named <code>locale</code>, which will be fetched from the locale (based on priorities above).
     * E.g. <code>&lt;html lang="en" data-i18n-dictionary-src="/libs/cq/i18n/dict.{+locale}.json"&gt;</code>.</p>
     *
     * @static
     * @singleton
     * @class Granite.I18n
     */
    Granite.I18n = (function() {

        /**
         * The map where the dictionaries are stored under their locale.
         * @private
         * @type Object
         */
        var dicts = {};

        /**
         * The prefix for the URL used to request dictionaries from the server.
         * @private
         * @type String
         */
        var urlPrefix = "/libs/cq/i18n/dict.";

        /**
         * The suffix for the URL used to request dictionaries from the server.
         * @private
         * @type String
         */
        var urlSuffix = ".json";

        /**
         * The manually specified locale as a String or a function that returns the locale as a string.
         * @private
         * @static
         * @type String
         */
        var manualLocale = undefined;

        /**
         * If the current locale represents pseudo translations.
         * In that case the dictionary is expected to provide just a special
         * translation pattern to automatically convert all original strings.
         */
        var pseudoTranslations = false;

        var languages = null;

        var self = {};

        /**
         * Indicates if the dictionary parameters are specified manually.
         */
        var manualDictionary = false;

        var getDictionaryUrl = function(locale) {
            if (manualDictionary) {
                return urlPrefix + locale + urlSuffix;
            }

            var dictionarySrc = $("html").attr("data-i18n-dictionary-src");

            if (!dictionarySrc) {
                return urlPrefix + locale + urlSuffix;
            }

            // dictionarySrc is a URITemplate
            // Use simple string replacement for now; for more complicated scenario, please use Granite.URITemplate
            return dictionarySrc.replace("{locale}", encodeURIComponent(locale)).replace("{+locale}", locale);
        };

        /**
         * The default locale (en).
         * @static
         * @final
         * @type String
         */
        self.LOCALE_DEFAULT = "en";

        /**
         * Language code for pseudo translations.
         * @static
         * @final
         * @type String
         */
        self.PSEUDO_LANGUAGE = "zz";

        /**
         * Dictionary key for pseudo translation pattern.
         * @static
         * @final
         * @type String
         */
        self.PSEUDO_PATTERN_KEY = "_pseudoPattern_";

        /**
         * Initializes I18n with the given config options:
         * <ul>
         * <li>locale: the current locale (defaults to "en")</li>
         * <li>urlPrefix: the prefix for the URL used to request dictionaries from
         * the server (defaults to "/libs/cq/i18n/dict.")</li>
         * <li>urlSuffix: the suffix for the URL used to request dictionaries from
         * the server (defaults to ".json")</li>
         * </ul>
         * Sample config. The dictioniary would be requested from
         * "/apps/i18n/dict.fr.json":
         <code><pre>{
         "locale": "fr",
         "urlPrefix": "/apps/i18n/dict.",
         "urlSuffix": ".json"
         }</pre></code>
         * @param {Object} config The config
         */
        self.init = function(config) {
            config  = config || {};

            this.setLocale(config.locale);
            this.setUrlPrefix(config.urlPrefix);
            this.setUrlSuffix(config.urlSuffix);
        };

        /**
         * Sets the current locale.
         * @static
         * @param {String/Function} locale The locale or a function that returns the locale as a string
         */
        self.setLocale = function(locale) {
            if (!locale) {
                return;
            }

            manualLocale = locale;
        };

        /**
         * Returns the current locale based on the priorities.
         * @static
         * @return {String} The locale
         */
        self.getLocale = function() {
            if ($.isFunction(manualLocale)) {
                // execute function first time only and store result in currentLocale
                manualLocale = manualLocale();
            }

            return manualLocale || document.documentElement.lang || self.LOCALE_DEFAULT;
        };

        /**
         * Sets the prefix for the URL used to request dictionaries from
         * the server. The locale and URL suffix will be appended.
         * @static
         * @param {String} prefix The URL prefix
         */
        self.setUrlPrefix = function(prefix) {
            if (!prefix) {
                return;
            }

            urlPrefix = prefix;
            manualDictionary = true;
        };

        /**
         * Sets the suffix for the URL used to request dictionaries from
         * the server. It will be appended to the URL prefix and locale.
         * @static
         * @param {String} suffix The URL suffix
         */
        self.setUrlSuffix = function(suffix) {
            if (!suffix) {
                return;
            }

            urlSuffix = suffix;
            manualDictionary = true;
        };

        /**
         * Returns the dictionary for the specified locale. This method
         * will request the dictionary using the URL prefix, the locale,
         * and the URL suffix. If no locale is specified, the current
         * locale is used.
         * @static
         * @param {String} locale (optional) The locale
         * @return {Object} The dictionary
         */
        self.getDictionary = function(locale) {
            locale = locale || self.getLocale();

            if (!dicts[locale]) {
                pseudoTranslations = (locale.indexOf(self.PSEUDO_LANGUAGE) === 0);

                try {
                    var response = $.ajax(getDictionaryUrl(locale), {
                        async: false,
                        dataType: "json"
                    });
                    dicts[locale] = $.parseJSON(response.responseText);
                } catch (e) {}
                if (!dicts[locale]) {
                    dicts[locale] = {};
                }
            }
            return dicts[locale];
        };

        /**
         * Translates the specified text into the current language.
         * @static
         * @param {String} text The text to translate
         * @param {String[]} snippets The snippets replacing <code>{n}</code> (optional)
         * @param {String} note A hint for translators (optional)
         * @return {String} The translated text
         */
        self.get = function(text, snippets, note) {
            var dict;
            var newText;
            var lookupText;

            dict = self.getDictionary();

            // note that pseudoTranslations is initialized in the getDictionary() call above
            lookupText = pseudoTranslations ? self.PSEUDO_PATTERN_KEY
                : note ? text + " ((" + note + "))"
                    : text;
            if (dict) {
                newText = dict[lookupText];
            }
            if (!newText) {
                newText = text;
            }
            if (pseudoTranslations) {
                newText = newText.replace("{string}", text).replace("{comment}", note ? note : "");
            }
            return util.patchText(newText, snippets);
        };

        /**
         * Translates the specified text into the current language. Use this
         * method to translate String variables, e.g. data from the server.
         * @static
         * @param {String} text The text to translate
         * @param {String} note A hint for translators (optional)
         * @return {String} The translated text
         */
        self.getVar = function(text, note) {
            if (!text) {
                return null;
            }
            return self.get(text, null, note);
        };

        /**
         * Returns the available languages, including a "title" property with a display name:
         * for instance "German" for "de" or "German (Switzerland)" for "de_ch".
         * @static
         * @return {Object} An object with language codes as keys and an object with "title",
         *                  "language", "country" and "defaultCountry" members.
         */
        self.getLanguages = function() {
            if (!languages) {
                try {
                    // use overlay servlet so customers can define /apps/wcm/core/resources/languages
                    var json = http.eval("/libs/wcm/core/resources/languages.overlay.infinity.json"); // TODO: broken!!!
                    $.each(json, function(name, lang) {
                        lang.title = self.getVar(lang.language);
                        if (lang.title && lang.country && lang.country !== "*") {
                            lang.title += " (" + self.getVar(lang.country) + ")";
                        }
                    });
                    languages = json;
                } catch (e) {
                    languages = {};
                }
            }
            return languages;
        };

        /**
         * Parses a language code string such as "de_CH" and returns an object with
         * language and country extracted. The delimiter can be "_" or "-".
         * @static
         * @param {String} langCode a language code such as "de" or "de_CH" or "de-ch"
         * @return {Object} an object with "code" ("de_CH"), "language" ("de") and "country" ("CH")
         *                  (or null if langCode was null)
         */
        self.parseLocale = function(langCode) {
            if (!langCode) {
                return null;
            }
            var pos = langCode.indexOf("_");
            if (pos < 0) {
                pos = langCode.indexOf("-");
            }

            var language;
            var country;
            if (pos < 0) {
                language = langCode;
                country = null;
            } else {
                language = langCode.substring(0, pos);
                country = langCode.substring(pos + 1);
            }
            return {
                code: langCode,
                language: language,
                country: country
            };
        };

        return self;

    }());

}(document, Granite, Granite.Util, Granite.HTTP, jQuery));

/*
 *
 * ADOBE CONFIDENTIAL
 * __________________
 *
 *  Copyright 2012 Adobe Systems Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */

/**
 * Implements the "Adobe Dynamic Touch Indicator" that tracks touch events and displays a visual indicator for
 * screen sharing and presentation purposes.
 *
 * To enable it call <code>Granite.TouchIndicator.init()</code> e.g. on document ready:
 * <pre><code>

 Granite.$(document).ready(function() {
     Granite.TouchIndicator.init();
 });

 </code></pre>
 *
 * AdobePatentID="2631US01"
 */
(function(Granite, $) {

    var touchIndicator = function() {

        var CSS = {
            "visibility": "hidden",
            "position": "absolute", // fixed would be better, but flickers on ipad while scrolling
            "width": "30px",
            "height": "30px",
            "-webkit-border-radius": "20px",
            "border-radius": "20px",
            "border": "5px solid orange",
            "-webkit-user-select": "none",
            "user-select": "none",
            "opacity": "0.5",
            "z-index": "2000",
            "pointer-events": "none"
        };

        var used = {};

        var unused = [];

        return {
            debugWithMouse: false,

            init: function() {
                var self = this;

                $(document).on("touchstart.touchindicator touchmove.touchindicator touchend.touchindicator", function(e) {
                    var touches = e.originalEvent.touches;
                    self.update(touches);
                    return true;
                });

                if (this.debugWithMouse) {
                    $(document).on("mousemove.touchindicator", function(e){
                        e.identifer = "fake";
                        self.update([ e ]);
                        return true;
                    });
                }
            },

            update: function(touches) {
                // go over all touch events present in the array
                var retained = {};
                for (var i = 0; i < touches.length; i++) {
                    var touch = touches[i];
                    var id = touch.identifier;

                    // check if we already have a indicator with the correct id
                    var indicator = used[id];
                    if (!indicator) {
                        // if not, check if we have an unused one
                        indicator = unused.pop();

                        // if not, create a new one and append it to the dom
                        if (!indicator) {
                            indicator = $("<div></div>").css(CSS);
                            $("body").append(indicator);
                        }
                    }

                    retained[id] = indicator;
                    indicator.offset({
                        left: touch.pageX - 20,
                        top: touch.pageY - 20
                    });
                    indicator.css("visibility", "visible");
                }

                // now hide all unused ones and stuff them in the unused array
                for (id in used) {
                    if (used.hasOwnProperty(id) && !retained[id]) {
                        indicator = used[id];
                        indicator.css("visibility", "hidden");
                        unused.push(indicator);
                    }
                }
                used = retained;
            }
        };
    };
    Granite.TouchIndicator = new touchIndicator();

}(Granite, jQuery));

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */
(function(Granite, util, http, $) {

    /**
     * A tool to determine whether any opt-out cookie is set and whether a given cookie name
     * is white-listed. The opt-out and white-list cookie names are determined by a server
     * side configuration (com.adobe.granite.security.commons.OptOutService) and provided to
     * this tool by an optionally included component (/libs/granite/security/components/optout)
     * which provides a global JSON object named <code>GraniteOptOutConfig</code>.
     *
     * @static
     * @singleton
     * @class Granite.OptOutUtil
     */
    Granite.OptOutUtil = (function() {

        var self = {};

        /**
         * Contains the names of cookies the presence of which indicates the user has opted out.
         * @private
         * @type Array
         */
        var optOutCookieNames = [];

        /**
         * Contains the names of cookies which may still be set in spite of the user having opted out.
         * @private
         * @type Array
         */
        var whitelistedCookieNames = [];

        /**
         * Initializes this tool with an opt-out configuration. The following options are supported:
         * <ul>
         *     <li>cookieNames: an array of cookie names representing opt-out cookies. Defaults to empty.</li>
         *     <li>whitelistCookieNames: an array of cookies representing white-listed cookies. Defaults to empty.</li>
         * </ul>
         * Sample config:
         * <code>
         *     <pre>
         *         {
         *         "cookieNames":["omniture_optout","cq-opt-out"],
         *         "whitelistCookieNames":["someAppCookie", "anotherImportantAppCookie"]
         *         }
         *     </pre>
         * </code>
         * @param config The opt-out configuration
         */
        self.init = function(config) {
            if (config) {
                optOutCookieNames = config.cookieNames
                    ? config.cookieNames
                    : optOutCookieNames;
                whitelistedCookieNames = config.whitelistCookieNames
                    ? config.whitelistCookieNames
                    : whitelistedCookieNames;
            }
        };

        /**
         * Returns the array of configured cookie names representing opt-out cookies.
         * @static
         * @return {Array} The cookie names
         */
        self.getCookieNames = function() {
            return optOutCookieNames;
        };

        /**
         * Returns the array of configured cookie names representing white-listed cookies.
         * @static
         * @return {Array} The cookie names
         */
        self.getWhitelistCookieNames = function() {
            return whitelistedCookieNames;
        };

        /**
         * Determines whether the user (browser) has elected to opt-out. This is indicated by the presence of
         * one of the cookies retrieved through #getCookieNames().
         * @return {Boolean} True if an opt-cookie was found in the browser's cookies.
         */
        self.isOptedOut = function() {
            var browserCookies = document.cookie.split(";");
            for (var i = 0; i < browserCookies.length; i++) {
                var cookie = browserCookies[i];
                var cookieName = $.trim(cookie.split("=")[0]);
                if ($.inArray(cookieName, self.getCookieNames()) > -1) {
                    return true;
                }
            }

            return false;
        };

        /**
         * Determines whether the given <code>cookieName</code> may be used to set a cookie. This is the case
         * if either opt-out is inactive (#isOptedOut() == false) or it is active and the give cookie name was
         * found in the white-list (#getWhitelistCookieNames()).
         * @param cookieName The name of the cookie to check.
         * @return {Boolean} True if a cookie of this name may be used with respect to the opt-out status.
         */
        self.maySetCookie = function(cookieName) {
            return !(self.isOptedOut() && $.inArray(cookieName, self.getWhitelistCookieNames()) === -1);
        };

        return self;

    }());

}(Granite, Granite.Util, Granite.HTTP, jQuery));

/*
 * ADOBE CONFIDENTIAL
 *
 * Copyright 2012 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Adobe Systems Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to Adobe Systems Incorporated and its
 * suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Adobe Systems Incorporated.
 *
 */


//------------------------------------------------------------------------------
// Initialize the Granite utils library

Granite.OptOutUtil.init(window.GraniteOptOutConfig);
Granite.HTTP.detectContextPath();

/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(u,p){var d={},l=d.lib={},s=function(){},t=l.Base={extend:function(a){s.prototype=this;var c=new s;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
r=l.WordArray=t.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=p?c:4*a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,e=a.words,j=this.sigBytes;a=a.sigBytes;this.clamp();if(j%4)for(var k=0;k<a;k++)c[j+k>>>2]|=(e[k>>>2]>>>24-8*(k%4)&255)<<24-8*((j+k)%4);else if(65535<e.length)for(k=0;k<a;k+=4)c[j+k>>>2]=e[k>>>2];else c.push.apply(c,e);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=t.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],e=0;e<a;e+=4)c.push(4294967296*u.random()|0);return new r.init(c,a)}}),w=d.enc={},v=w.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++){var k=c[j>>>2]>>>24-8*(j%4)&255;e.push((k>>>4).toString(16));e.push((k&15).toString(16))}return e.join("")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j+=2)e[j>>>3]|=parseInt(a.substr(j,
2),16)<<24-4*(j%8);return new r.init(e,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var e=[],j=0;j<a;j++)e.push(String.fromCharCode(c[j>>>2]>>>24-8*(j%4)&255));return e.join("")},parse:function(a){for(var c=a.length,e=[],j=0;j<c;j++)e[j>>>2]|=(a.charCodeAt(j)&255)<<24-8*(j%4);return new r.init(e,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},
q=l.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new r.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,e=c.words,j=c.sigBytes,k=this.blockSize,b=j/(4*k),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=b*k;j=u.min(4*a,j);if(a){for(var q=0;q<a;q+=k)this._doProcessBlock(e,q);q=e.splice(0,a);c.sigBytes-=j}return new r.init(q,j)},clone:function(){var a=t.clone.call(this);
a._data=this._data.clone();return a},_minBufferSize:0});l.Hasher=q.extend({cfg:t.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){q.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(b,e){return(new a.init(e)).finalize(b)}},_createHmacHelper:function(a){return function(b,e){return(new n.HMAC.init(a,
e)).finalize(b)}}});var n=d.algo={};return d}(Math);
(function(){var u=CryptoJS,p=u.lib.WordArray;u.enc.Base64={stringify:function(d){var l=d.words,p=d.sigBytes,t=this._map;d.clamp();d=[];for(var r=0;r<p;r+=3)for(var w=(l[r>>>2]>>>24-8*(r%4)&255)<<16|(l[r+1>>>2]>>>24-8*((r+1)%4)&255)<<8|l[r+2>>>2]>>>24-8*((r+2)%4)&255,v=0;4>v&&r+0.75*v<p;v++)d.push(t.charAt(w>>>6*(3-v)&63));if(l=t.charAt(64))for(;d.length%4;)d.push(l);return d.join("")},parse:function(d){var l=d.length,s=this._map,t=s.charAt(64);t&&(t=d.indexOf(t),-1!=t&&(l=t));for(var t=[],r=0,w=0;w<
l;w++)if(w%4){var v=s.indexOf(d.charAt(w-1))<<2*(w%4),b=s.indexOf(d.charAt(w))>>>6-2*(w%4);t[r>>>2]|=(v|b)<<24-8*(r%4);r++}return p.create(t,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
(function(u){function p(b,n,a,c,e,j,k){b=b+(n&a|~n&c)+e+k;return(b<<j|b>>>32-j)+n}function d(b,n,a,c,e,j,k){b=b+(n&c|a&~c)+e+k;return(b<<j|b>>>32-j)+n}function l(b,n,a,c,e,j,k){b=b+(n^a^c)+e+k;return(b<<j|b>>>32-j)+n}function s(b,n,a,c,e,j,k){b=b+(a^(n|~c))+e+k;return(b<<j|b>>>32-j)+n}for(var t=CryptoJS,r=t.lib,w=r.WordArray,v=r.Hasher,r=t.algo,b=[],x=0;64>x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;r=r.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},
_doProcessBlock:function(q,n){for(var a=0;16>a;a++){var c=n+a,e=q[c];q[c]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360}var a=this._hash.words,c=q[n+0],e=q[n+1],j=q[n+2],k=q[n+3],z=q[n+4],r=q[n+5],t=q[n+6],w=q[n+7],v=q[n+8],A=q[n+9],B=q[n+10],C=q[n+11],u=q[n+12],D=q[n+13],E=q[n+14],x=q[n+15],f=a[0],m=a[1],g=a[2],h=a[3],f=p(f,m,g,h,c,7,b[0]),h=p(h,f,m,g,e,12,b[1]),g=p(g,h,f,m,j,17,b[2]),m=p(m,g,h,f,k,22,b[3]),f=p(f,m,g,h,z,7,b[4]),h=p(h,f,m,g,r,12,b[5]),g=p(g,h,f,m,t,17,b[6]),m=p(m,g,h,f,w,22,b[7]),
f=p(f,m,g,h,v,7,b[8]),h=p(h,f,m,g,A,12,b[9]),g=p(g,h,f,m,B,17,b[10]),m=p(m,g,h,f,C,22,b[11]),f=p(f,m,g,h,u,7,b[12]),h=p(h,f,m,g,D,12,b[13]),g=p(g,h,f,m,E,17,b[14]),m=p(m,g,h,f,x,22,b[15]),f=d(f,m,g,h,e,5,b[16]),h=d(h,f,m,g,t,9,b[17]),g=d(g,h,f,m,C,14,b[18]),m=d(m,g,h,f,c,20,b[19]),f=d(f,m,g,h,r,5,b[20]),h=d(h,f,m,g,B,9,b[21]),g=d(g,h,f,m,x,14,b[22]),m=d(m,g,h,f,z,20,b[23]),f=d(f,m,g,h,A,5,b[24]),h=d(h,f,m,g,E,9,b[25]),g=d(g,h,f,m,k,14,b[26]),m=d(m,g,h,f,v,20,b[27]),f=d(f,m,g,h,D,5,b[28]),h=d(h,f,
m,g,j,9,b[29]),g=d(g,h,f,m,w,14,b[30]),m=d(m,g,h,f,u,20,b[31]),f=l(f,m,g,h,r,4,b[32]),h=l(h,f,m,g,v,11,b[33]),g=l(g,h,f,m,C,16,b[34]),m=l(m,g,h,f,E,23,b[35]),f=l(f,m,g,h,e,4,b[36]),h=l(h,f,m,g,z,11,b[37]),g=l(g,h,f,m,w,16,b[38]),m=l(m,g,h,f,B,23,b[39]),f=l(f,m,g,h,D,4,b[40]),h=l(h,f,m,g,c,11,b[41]),g=l(g,h,f,m,k,16,b[42]),m=l(m,g,h,f,t,23,b[43]),f=l(f,m,g,h,A,4,b[44]),h=l(h,f,m,g,u,11,b[45]),g=l(g,h,f,m,x,16,b[46]),m=l(m,g,h,f,j,23,b[47]),f=s(f,m,g,h,c,6,b[48]),h=s(h,f,m,g,w,10,b[49]),g=s(g,h,f,m,
E,15,b[50]),m=s(m,g,h,f,r,21,b[51]),f=s(f,m,g,h,u,6,b[52]),h=s(h,f,m,g,k,10,b[53]),g=s(g,h,f,m,B,15,b[54]),m=s(m,g,h,f,e,21,b[55]),f=s(f,m,g,h,v,6,b[56]),h=s(h,f,m,g,x,10,b[57]),g=s(g,h,f,m,t,15,b[58]),m=s(m,g,h,f,D,21,b[59]),f=s(f,m,g,h,z,6,b[60]),h=s(h,f,m,g,C,10,b[61]),g=s(g,h,f,m,j,15,b[62]),m=s(m,g,h,f,A,21,b[63]);a[0]=a[0]+f|0;a[1]=a[1]+m|0;a[2]=a[2]+g|0;a[3]=a[3]+h|0},_doFinalize:function(){var b=this._data,n=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;n[c>>>5]|=128<<24-c%32;var e=u.floor(a/
4294967296);n[(c+64>>>9<<4)+15]=(e<<8|e>>>24)&16711935|(e<<24|e>>>8)&4278255360;n[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4*(n.length+1);this._process();b=this._hash;n=b.words;for(a=0;4>a;a++)c=n[a],n[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});t.MD5=v._createHelper(r);t.HmacMD5=v._createHmacHelper(r)})(Math);
(function(){var u=CryptoJS,p=u.lib,d=p.Base,l=p.WordArray,p=u.algo,s=p.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:p.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,r){for(var p=this.cfg,s=p.hasher.create(),b=l.create(),u=b.words,q=p.keySize,p=p.iterations;u.length<q;){n&&s.update(n);var n=s.update(d).finalize(r);s.reset();for(var a=1;a<p;a++)n=s.finalize(n),s.reset();b.concat(n)}b.sigBytes=4*q;return b}});u.EvpKDF=function(d,l,p){return s.create(p).compute(d,
l)}})();
CryptoJS.lib.Cipher||function(u){var p=CryptoJS,d=p.lib,l=d.Base,s=d.WordArray,t=d.BufferedBlockAlgorithm,r=p.enc.Base64,w=p.algo.EvpKDF,v=d.Cipher=t.extend({cfg:l.extend(),createEncryptor:function(e,a){return this.create(this._ENC_XFORM_MODE,e,a)},createDecryptor:function(e,a){return this.create(this._DEC_XFORM_MODE,e,a)},init:function(e,a,b){this.cfg=this.cfg.extend(b);this._xformMode=e;this._key=a;this.reset()},reset:function(){t.reset.call(this);this._doReset()},process:function(e){this._append(e);return this._process()},
finalize:function(e){e&&this._append(e);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(e){return{encrypt:function(b,k,d){return("string"==typeof k?c:a).encrypt(e,b,k,d)},decrypt:function(b,k,d){return("string"==typeof k?c:a).decrypt(e,b,k,d)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=p.mode={},x=function(e,a,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var d=0;d<b;d++)e[a+d]^=
c[d]},q=(d.BlockCipherMode=l.extend({createEncryptor:function(e,a){return this.Encryptor.create(e,a)},createDecryptor:function(e,a){return this.Decryptor.create(e,a)},init:function(e,a){this._cipher=e;this._iv=a}})).extend();q.Encryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize;x.call(this,e,a,c);b.encryptBlock(e,a);this._prevBlock=e.slice(a,a+c)}});q.Decryptor=q.extend({processBlock:function(e,a){var b=this._cipher,c=b.blockSize,d=e.slice(a,a+c);b.decryptBlock(e,a);x.call(this,
e,a,c);this._prevBlock=d}});b=b.CBC=q;q=(p.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,d=c<<24|c<<16|c<<8|c,l=[],n=0;n<c;n+=4)l.push(d);c=s.create(l,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:q}),reset:function(){v.reset.call(this);var a=this.cfg,b=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var c=a.createEncryptor;else c=a.createDecryptor,this._minBufferSize=1;this._mode=c.call(a,
this,b&&b.words)},_doProcessBlock:function(a,b){this._mode.processBlock(a,b)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var b=this._process(!0)}else b=this._process(!0),a.unpad(b);return b},blockSize:4});var n=d.CipherParams=l.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(p.format={}).OpenSSL={stringify:function(a){var b=a.ciphertext;a=a.salt;return(a?s.create([1398893684,
1701076831]).concat(a).concat(b):b).toString(r)},parse:function(a){a=r.parse(a);var b=a.words;if(1398893684==b[0]&&1701076831==b[1]){var c=s.create(b.slice(2,4));b.splice(0,4);a.sigBytes-=16}return n.create({ciphertext:a,salt:c})}},a=d.SerializableCipher=l.extend({cfg:l.extend({format:b}),encrypt:function(a,b,c,d){d=this.cfg.extend(d);var l=a.createEncryptor(c,d);b=l.finalize(b);l=l.cfg;return n.create({ciphertext:b,key:c,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},
decrypt:function(a,b,c,d){d=this.cfg.extend(d);b=this._parse(b,d.format);return a.createDecryptor(c,d).finalize(b.ciphertext)},_parse:function(a,b){return"string"==typeof a?b.parse(a,this):a}}),p=(p.kdf={}).OpenSSL={execute:function(a,b,c,d){d||(d=s.random(8));a=w.create({keySize:b+c}).compute(a,d);c=s.create(a.words.slice(b),4*c);a.sigBytes=4*b;return n.create({key:a,iv:c,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:p}),encrypt:function(b,c,d,l){l=this.cfg.extend(l);d=l.kdf.execute(d,
b.keySize,b.ivSize);l.iv=d.iv;b=a.encrypt.call(this,b,c,d.key,l);b.mixIn(d);return b},decrypt:function(b,c,d,l){l=this.cfg.extend(l);c=this._parse(c,l.format);d=l.kdf.execute(d,b.keySize,b.ivSize,c.salt);l.iv=d.iv;return a.decrypt.call(this,b,c,d.key,l)}})}();
(function(){for(var u=CryptoJS,p=u.lib.BlockCipher,d=u.algo,l=[],s=[],t=[],r=[],w=[],v=[],b=[],x=[],q=[],n=[],a=[],c=0;256>c;c++)a[c]=128>c?c<<1:c<<1^283;for(var e=0,j=0,c=0;256>c;c++){var k=j^j<<1^j<<2^j<<3^j<<4,k=k>>>8^k&255^99;l[e]=k;s[k]=e;var z=a[e],F=a[z],G=a[F],y=257*a[k]^16843008*k;t[e]=y<<24|y>>>8;r[e]=y<<16|y>>>16;w[e]=y<<8|y>>>24;v[e]=y;y=16843009*G^65537*F^257*z^16843008*e;b[k]=y<<24|y>>>8;x[k]=y<<16|y>>>16;q[k]=y<<8|y>>>24;n[k]=y;e?(e=z^a[a[a[G^z]]],j^=a[a[j]]):e=j=1}var H=[0,1,2,4,8,
16,32,64,128,27,54],d=d.AES=p.extend({_doReset:function(){for(var a=this._key,c=a.words,d=a.sigBytes/4,a=4*((this._nRounds=d+6)+1),e=this._keySchedule=[],j=0;j<a;j++)if(j<d)e[j]=c[j];else{var k=e[j-1];j%d?6<d&&4==j%d&&(k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255]):(k=k<<8|k>>>24,k=l[k>>>24]<<24|l[k>>>16&255]<<16|l[k>>>8&255]<<8|l[k&255],k^=H[j/d|0]<<24);e[j]=e[j-d]^k}c=this._invKeySchedule=[];for(d=0;d<a;d++)j=a-d,k=d%4?e[j]:e[j-4],c[d]=4>d||4>=j?k:b[l[k>>>24]]^x[l[k>>>16&255]]^q[l[k>>>
8&255]]^n[l[k&255]]},encryptBlock:function(a,b){this._doCryptBlock(a,b,this._keySchedule,t,r,w,v,l)},decryptBlock:function(a,c){var d=a[c+1];a[c+1]=a[c+3];a[c+3]=d;this._doCryptBlock(a,c,this._invKeySchedule,b,x,q,n,s);d=a[c+1];a[c+1]=a[c+3];a[c+3]=d},_doCryptBlock:function(a,b,c,d,e,j,l,f){for(var m=this._nRounds,g=a[b]^c[0],h=a[b+1]^c[1],k=a[b+2]^c[2],n=a[b+3]^c[3],p=4,r=1;r<m;r++)var q=d[g>>>24]^e[h>>>16&255]^j[k>>>8&255]^l[n&255]^c[p++],s=d[h>>>24]^e[k>>>16&255]^j[n>>>8&255]^l[g&255]^c[p++],t=
d[k>>>24]^e[n>>>16&255]^j[g>>>8&255]^l[h&255]^c[p++],n=d[n>>>24]^e[g>>>16&255]^j[h>>>8&255]^l[k&255]^c[p++],g=q,h=s,k=t;q=(f[g>>>24]<<24|f[h>>>16&255]<<16|f[k>>>8&255]<<8|f[n&255])^c[p++];s=(f[h>>>24]<<24|f[k>>>16&255]<<16|f[n>>>8&255]<<8|f[g&255])^c[p++];t=(f[k>>>24]<<24|f[n>>>16&255]<<16|f[g>>>8&255]<<8|f[h&255])^c[p++];n=(f[n>>>24]<<24|f[g>>>16&255]<<16|f[h>>>8&255]<<8|f[k&255])^c[p++];a[b]=q;a[b+1]=s;a[b+2]=t;a[b+3]=n},keySize:8});u.AES=p._createHelper(d)})();

/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
CryptoJS.mode.ECB=function(){var a=CryptoJS.lib.BlockCipherMode.extend();a.Encryptor=a.extend({processBlock:function(a,b){this._cipher.encryptBlock(a,b)}});a.Decryptor=a.extend({processBlock:function(a,b){this._cipher.decryptBlock(a,b)}});return a}();


function fbLoginMethod() {
	var formId = $('#j-login-form');
	FB.login(
		function(response) {
			if (response.authResponse) {
			   //console.log('Welcome!  Fetching your information.... ');
			   FB.api('/me?fields=id,name,email,permissions', function(response) {
					  //console.log(response);									  
					  $('#j_socialMediaEmail').val(response.email);
					  $('#j_socilMediaUniqId').val(response.id);
					  $('#j_socialMediaAccessToken').val(FB.getAuthResponse().accessToken);
				   //console.log('Good to see you, ' + response.email + '.');
				   //alert('Good to see you, ' + response.email + '.');
				   var $spinner_offer = $('#global-spinner-container.spinner-overlay');
				   showSpinnerMobileApp( $spinner_offer,'spinner-full-page');
					if( typeof window.qrServiceRef === 'undefined' ) {
						var scriptLoaderPath = $('#login-clientlib-js script').attr('src');
						scriptLoaderPath = scriptLoaderPath.replace('login-clientlibs','angular');
						console.log('scriptLoaderPath '+scriptLoaderPath);
						var angularElement = '<script src="'+scriptLoaderPath+'" type="text/javascript"></script>';document.createElement("script");
						
						$('body').append(angularElement);
					}
				   $.ajax({
					url: "/qr/j_security_check_qr_portal",
					type: 'POST',   
					data: formId.serialize(),
					cache: false,
					success: function(request, data, textStatus, errorThrown) {  
						//console.log('Inside success ' + data);
						//console.log('login success ' + textStatus + errorThrown);         
						$('#j-login-form').addClass('hide');
						$('.qbiz-login-section').addClass('visibilityHidden');
						//$('.is-not-logged').css("display", "none");//To hide Login menu
						$('.is-logged').css("display", "block");
						$('.create-profile-popup').hide();
						$('#social-login-block').addClass('hide');
						createSimpleCookie('loginSuccess','facebook');
						var source = document.referrer;
						if( source != '' && source != undefined ) {
							source = document.referrer.replace('.html','').split('/');
							source = source[source.length  - 1];
						}
						addComponentPageEvent('login','loggedin','facebook',source);
					var userType = getUserBasicInfoField('programCode');
					 setTimeout(function() {
						 hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
					  }, 500);
					if('QRPC' == userType){
						verifyOTP();
					}else if('PORTAL' == userType){
						redirectUser();
					}else{
						location.reload();
					}
					},
					 error:function(request, xhr,textStatus,errorThrown){	
						//console.log('error name ' + request.getResponseHeader('j_reason'));
						if(null != request.getResponseHeader('j_reason')){
							var errorRsp =  request.getResponseHeader('j_reason');
							var data = JSON.parse(errorRsp);
							//console.log(data);
							hideLoginMessages();
							if(data[0]!= undefined && data[0].errorName != undefined && data[0].errorName.trim() === 'FFP_AUTH_USR_EMAIL_NOT_VRFD'){
								var alertMessage = $('#email-verification-alert-message').val();
								var resendVerificationLinkLabel = $('#resend-verification-link-label').val();
								var resendVerificationLink = '<a href="javascript:void(0)" id="resend-verification-link"><u>' + resendVerificationLinkLabel + '</u></a>';
								var finalAlertMessage = alertMessage.replace('${0}', resendVerificationLink);
								$('#login-alert-message .alert-message').html(finalAlertMessage);
								$('#login-alert-message').removeClass('hidden');
								if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
									digitalData.page.pageInfo.pageType = 'facebook-login-without-email-verification';
								}
								errorClick(window.location.href,'login-facebook', 'privilegeclub-login', data[0].errorName);
								setTimeout(function() {
									hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
								}, 500);
								return false;
							}
							var errorPath = "/content/Qatar/i18n/login.errorMessages.json";
							//console.log('errorPath ' + errorPath);
								window.qrServiceRef.zone.run(function () {
									var checkErrorInterval = setInterval(function() {
										if( window.qrServiceRef.isGlobalI18nLoaded() ) {
											clearInterval(checkErrorInterval);
											window.qrServiceRef.translateErrorObject(data, errorPath).then(function(data){ 
												//console.log("Error " + data[0].errorDescription);
											s.events =  'event110';
											var errorMessage = data[0].errorDescription;
											if (errorMessage.indexOf("<span class='errorCode'>(") != -1 && errorMessage.indexOf(")</span>") != -1) {
												errorMessage = errorMessage.replace("<span class='errorCode'>("," ");
												errorMessage = errorMessage.replace(")</span>","");
											}
											s.eVar92 = errorMessage;
												$('#loginErrorBlock #errorId').html(data[0].errorDescription);
												$('#loginErrorBlock .input-base-msg-box').show().focus();
												if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
													digitalData.page.pageInfo.pageType = 'facebook-login-error';
												}
											errorClick(window.location.href, 'login-facebook', 'privilegeclub-login', data[0].errorName);
											if($('#sc_variable').val() == 'true') {	
											   s.t();
											}
											});
										}
									}, 500);
								 });
						/*var errorValue = getErrorMessage(errorRsp, localeErrorCode);
						   //alert(errorValue);
						//$('#errorId').text(errorValue);
						$('#loginErrorBlock #errorId').text(errorValue);
						$('#loginErrorBlock .input-base-msg-box').show();*/
						}else{	
						 $('#loginErrorBlock .input-base-msg-box').hide();
						//console.log('No Error from Service ');
						}
						setTimeout(function() {
							hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
						 }, 500);

					}        
			});
				   
				   
				   
			   });
			} else {
				//console.log('User cancelled login or did not fully authorize.');
				if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
					digitalData.page.pageInfo.pageType = 'LOGIN_FB_ERROR';
				}
				errorClick(window.location.href, 'login-facebook', 'privilegeclub-login', 'LOGIN_FB_ERROR');
			}
		},
		{scope:'email'}
		);
}

  function socialLoginFB(id){
	  
	  if( typeof FB == "undefined" ) {
		  fbInitLogin();
	  }
	  
	  try {
		//alert("Social Login" + id);
	if($('#twittername').val() != undefined){
	  var localeErrorCode = $("#signOnLanguage").val() != undefined ? $("#signOnLanguage").val() : 'en';
		var formId = $('#j-login-form');
		if( $("#j-login-form").find('#activity-login-code').length == 0) {
			$("#j-login-form").append('<input type="hidden" id="activity-login-code" name="activity-login-code" value="'+mainActivityCode+'"/>');
		} else {
			$("#j-login-form").find('#activity-login-code').val(mainActivityCode);
		}
		if(id = "facebookLogin"){
			$("#j_submitType").val("FACEBOOK");
			$("#j_socilMediaValue").val("FACEBOOK");
			 var checkFBLoad = setInterval(function() {
				 if( typeof FB != "undefined" ) {
					 clearInterval(checkFBLoad);
					fbLoginMethod();
				 }
			 }, 500);
		}
		}
	  } catch(err) {}
	}

$(document).ready(function(){
	try {
	if($('#googleplusicon').val() != undefined){
		$('#googlePlusLogin,#googlePlusLoginMobileApp').on('click', function() {
			if( typeof gapi === 'undefined' ){
				socialLoginGoogle(true);
			}
		});
	}
	  } catch(err) {}
});
var auth2;
function loadGoogleLoginService(isload) {
	try {
  var googlePlusKey = $('#googlePlusKey').val();
  //console.log("GooglePlus API key configured is " + googlePlusKey);
        if( typeof gapi !== 'undefined' && gapi != undefined && gapi != null ) {
    gapi.load('auth2', function(){
      // Retrieve the singleton for the GoogleAuth library and set up the client.
      auth2 = gapi.auth2.init({
        //client_id: '20819991876-hcabd46l5s18moegemldpebegg89ogg2.apps.googleusercontent.com',
		client_id: googlePlusKey,
        cookiepolicy: 'single_host_origin',
        // Request scopes in addition to 'profile' and 'email'
        //scope: 'additional_scope'
      });
      attachSignin(document.getElementById('googlePlusLogin'),isload);
    });
        } 
        if( typeof gapi === 'undefined' ){
            $('#social-login-desktop #googlePlusLogin').parent().addClass('hide');
            $('#social-login-mobileapp #googlePlusLoginMobileApp').parent().addClass('hide');
        }
	  } catch(err) {}
}
var socialLoginGoogle = function(isload) {
	if( typeof gapi === 'undefined' ){
		googleInitLogin();
		var googleInterval = setInterval(function() {
			if( typeof gapi !== 'undefined' && gapi != undefined && gapi != null ) {
				clearInterval(googleInterval);
				loadGoogleLoginService(isload);
			}
		}, 500);
	} else {
		attachSignin(document.getElementById('googlePlusLogin'), isload);
	}
  };
	 function attachSignin(element, isload) {
		try {
		  $("#j_submitType").val("GOOGLE");
		  $("#j_socilMediaValue").val("GOOGLE");
        var localeErrorCode = $("#signOnLanguage").val() != undefined ? $("#signOnLanguage").val() : 'en';
		var formId = $('#j-login-form');
        auth2.attachClickHandler(element, {},
        function(googleUser) {
        	
          var profile = googleUser.getBasicProfile();
            //alert(profile.getId());
            $('#j_socialMediaEmail').val(profile.getEmail());
			$('#j_socilMediaUniqId').val(profile.getId());
			$('#j_socialMediaAccessToken').val(googleUser.getAuthResponse().id_token);
			 var $spinner_offer = $('#global-spinner-container.spinner-overlay');
	 	        showSpinnerMobileApp($spinner_offer,'spinner-full-page');
			if( typeof window.qrServiceRef === 'undefined' ) {
				var scriptLoaderPath = $('#login-clientlib-js script').attr('src');
				scriptLoaderPath = scriptLoaderPath.replace('login-clientlibs','angular');
				console.log('scriptLoaderPath '+scriptLoaderPath);
				var angularElement = '<script src="'+scriptLoaderPath+'" type="text/javascript"></script>';document.createElement("script");
				
				$('body').append(angularElement);
			}
			if( $("#j-login-form").find('#activity-login-code').length == 0) {
				$("#j-login-form").append('<input type="hidden" id="activity-login-code" name="activity-login-code" value="'+mainActivityCode+'"/>');
			} else {
				$("#j-login-form").find('#activity-login-code').val(mainActivityCode);
			}
             $.ajax({
				   					url: "/qr/j_security_check_qr_portal",
				   					type: 'POST',   
				   					data: formId.serialize(),
									cache: false,
				   					success: function(request, data, textStatus, errorThrown) {  
				                       	//console.log('Inside success ' + data);
				   						//console.log('login success ' + textStatus + errorThrown);         
				   						//$('.is-not-logged').css("display", "none");
				   						//$('.is-logged').css("display", "block");
										$('#j-login-form').addClass('hide');
										$('.qbiz-login-section').addClass('visibilityHidden');
										$('.is-logged').css("display", "block");
										$('.create-profile-popup').hide();
										$('#social-login-block').addClass('hide');
                                        createSimpleCookie('loginSuccess','google plus');
                                        var source = document.referrer;
                						if( source != '' && source != undefined ) {
                							source = document.referrer.replace('.html','').split('/');
                							source = source[source.length  - 1];
                						}
                                        addComponentPageEvent('login','loggedin','google',source);
										setTimeout(function() {
				                           hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
				                        }, 500);
										var userType = getUserBasicInfoField('programCode');
										if('QRPC' == userType){
											verifyOTP();
										} else if('PORTAL' == userType){
											redirectUser();
										} else{
											location.reload();
										}
				   						//window.location.reload();
				   					},
				   					 error:function(request, xhr,textStatus,errorThrown){	
				                        //console.log('error name ' + request.getResponseHeader('j_reason'));
				                        if(null != request.getResponseHeader('j_reason')){
				                        	var errorRsp =  request.getResponseHeader('j_reason');
				                        	var data = JSON.parse(errorRsp);
				                            //console.log(data);
                                            hideLoginMessages();
                                            if(data[0]!= undefined && data[0].errorName != undefined && data[0].errorName.trim() === 'FFP_AUTH_USR_EMAIL_NOT_VRFD'){
												var alertMessage = $('#email-verification-alert-message').val();
												var resendVerificationLinkLabel = $('#resend-verification-link-label').val();
												var resendVerificationLink = '<a href="javascript:void(0)" id="resend-verification-link"><u>' + resendVerificationLinkLabel + '</u></a>';
												var finalAlertMessage = alertMessage.replace('${0}', resendVerificationLink);
												$('#login-alert-message .alert-message').html(finalAlertMessage);
												$('#login-alert-message').removeClass('hidden');
												if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
													digitalData.page.pageInfo.pageType = 'google-login-without-email-verification';
												}
												errorClick(window.location.href, 'login-google', 'privilegeclub-login', data[0].errorName);
												setTimeout(function() {
													hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
												}, 500);
												return false;
											}
				                         	var errorPath = "/content/Qatar/i18n/login.errorMessages.json";
				                         	//console.log('errorPath ' + errorPath);
				                         		window.qrServiceRef.zone.run(function () {
				                            		 var checkErrorInterval = setInterval(function() {
														if( window.qrServiceRef.isGlobalI18nLoaded() ) {
															clearInterval(checkErrorInterval);
															window.qrServiceRef.translateErrorObject(data, errorPath).then(function(data){ 
																//console.log("Error " + data[0].errorDescription);
																s.events =  'event110';
																var errorMessage = data[0].errorDescription;
																if (errorMessage.indexOf("<span class='errorCode'>(") != -1 && errorMessage.indexOf(")</span>") != -1) {
																	errorMessage = errorMessage.replace("<span class='errorCode'>("," ");
																	errorMessage = errorMessage.replace(")</span>","");
																}
																s.eVar92 = errorMessage;
																$('#loginErrorBlock #errorId').html(data[0].errorDescription);
																$('#loginErrorBlock .input-base-msg-box').show().focus();
																if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
																	digitalData.page.pageInfo.pageType = 'google-login-error';
																}
															errorClick(window.location.href, 'login-google', 'privilegeclub-login', data[0].errorName);
															if($('#sc_variable').val() == 'true') {	
															   s.t();
															}
															});
														}
													}, 500);
				                            	 });
				   						/*var errorValue = getErrorMessage(errorRsp, localeErrorCode);
				                           //alert(errorValue);
				   						//$('#errorId').text(errorValue);
				   						$('#loginErrorBlock #errorId').text(errorValue);
				   			            $('#loginErrorBlock .input-base-msg-box').show();*/
				                        }else{	
				                       	 $('#loginErrorBlock .input-base-msg-box').hide();
				   						//console.log('No Error from Service ');
				                        }
				                        setTimeout(function() {
				                            hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
				                         }, 500);
				   					}        
				   			});


        }, function(error) {
          //console.log(JSON.stringify(error, undefined, 2));
        });

  } catch(err) {}
  if(isload) {
	  $('#googlePlusLogin')[0].click();
  }

  }  
 function socialLoginTwitter(id, referrer){
	 try {
	  //alert("clicked");
	  var currentPagePath = $("#signOnCurrentPagePath").val();
		var response;
		if(id = "twitterLogin"){

            var jqxhr = $.ajax({
                            url: "/qr/twitterlogin?currentPagePath=" + currentPagePath,
                            type: 'GET',
                            dataType: 'json',
                            async: false,
							cache: false,
                            success: function(request, data, textStatus, errorThrown) {  
		                       //alert("Boss Success is here " + data);
                            	 
		   					},

                        }).done (function(data) {
                            	if(typeof data != 'undefined' && data){
                           	 //alert(data);
                            var redirectUrl = data.redirecturl;
                            var oauthSecretTocken = data.oauthSecretTocken;
                            //console.log(" redirectUrl "+ redirectUrl);
                            //console.log(" oauthSecretTocken "+ oauthSecretTocken);
                                if(redirectUrl != undefined && oauthSecretTocken != undefined){
                                  var url =  redirectUrl+'&stocken='+oauthSecretTocken;
                                    twitterCallback(url, referrer);
                                }
                                
                            }else{
                             //console.log("Twitter redirection failed");
                            }
                        }).fail (function(){ 
                            // alert("Error");
                        });

				} else {
				     //console.log('User cancelled login or did not fully authorize.');
				}
  } catch(err) {}
	 }
	 
	 function twitterCallback(url, referrer) {
		 try {
		 var intervalID;
         var child  = window.open(url, "_blank", "width=600, height=400");
         var timerTwitter = setInterval(function() {
			if (child != null && child.closed) {
				clearInterval(timerTwitter);
				checkChild(child,referrer);
			}
		}, 500);


         //var intervalID = window.setInterval(checkWindow, 500);
		   } catch(err) {}
        }

 function checkChild(child, referrer) {
             if (child != null && child.closed) {
            	 //console.log("Child window closed");   
                 //console.log("1 " + $('#twitterid').val());
                 //console.log("2 "+ $('#twitterscreenname').val());
                 var twitterId = $('#twitterid').val();
                 var twitterScreenName = $('#twitterscreenname').val();
				 if(referrer == "dashboard") {
					 manageSocialMedia("LINK", "TWITTER", $('#twitterid').val(), "", $('#twitterAccessToken').val());
				 } else if(referrer == "dashboard-delink") {
					 manageSocialMedia("DELINK", "TWITTER", $('#twitterid').val(), "", $('#twitterAccessToken').val());
				 } else {
					 if(typeof twitterId != 'undefined' && twitterId && typeof twitterScreenName != 'undefined' && twitterScreenName){
						 $('#j_socilMediaUniqId').val($('#twitterid').val());
						 //$('#j_socialMediaEmail').val($('#twitterscreenname').val());
						 $("#j_submitType").val("TWITTER");
						 $('#j_socialMediaAccessToken').val($('#twitterAccessToken').val());
						 $('#j_socialMediaAccessTokenSecret').val($('#twitterAccessTokenSecret').val());
						 twitterLogin();
					 }
        	     }
	       	     clearInterval(timer);
             }
         }
	function twitterLogin(){
		try {
		 var $spinner_offer = $('#global-spinner-container.spinner-overlay');
	       showSpinnerMobileApp( $spinner_offer,'spinner-full-page');
		   if( typeof window.qrServiceRef === 'undefined' ) {
				var scriptLoaderPath = $('#login-clientlib-js script').attr('src');
				scriptLoaderPath = scriptLoaderPath.replace('login-clientlibs','angular');
				console.log('scriptLoaderPath '+scriptLoaderPath);
				var angularElement = '<script src="'+scriptLoaderPath+'" type="text/javascript"></script>';document.createElement("script");
				
				$('body').append(angularElement);
			}
			if( $("#j-login-form").find('#activity-login-code').length == 0) {
				$("#j-login-form").append('<input type="hidden" id="activity-login-code" name="activity-login-code" value="'+mainActivityCode+'"/>');
			} else {
				$("#j-login-form").find('#activity-login-code').val(mainActivityCode);
			}
		var formId = $('#j-login-form');
		 var localeErrorCode = $("#signOnLanguage").val() != undefined ? $("#signOnLanguage").val() : 'en';
		$.ajax({
				url: "/qr/j_security_check_qr_portal",
				type: 'POST',   
				data: formId.serialize(),
				cache: false,
				success: function(request, data, textStatus, errorThrown) {  
               	//console.log('Inside success ' + data);
					//console.log('login success ' + textStatus + errorThrown);					
					$('#j-login-form').addClass('hide');
					$('.qbiz-login-section').addClass('visibilityHidden');
					//$('.is-not-logged').css("display", "none");//To hide Login menu
					$('.is-logged').css("display", "block");
					$('.create-profile-popup').hide();
					$('#social-login-block').addClass('hide');
					createSimpleCookie('loginSuccess','twitter');
                    var source = document.referrer;
					if( source != '' && source != undefined ) {
						source = document.referrer.replace('.html','').split('/');
						source = source[source.length  - 1];
					}
                    addComponentPageEvent('login','loggedin','twitter',source);
					var userType = getUserBasicInfoField('programCode');
					 setTimeout(function() {
                         hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
                      }, 500);
					if('QRPC' == userType){
						verifyOTP();
					}else if('PORTAL' == userType){
						redirectUser();
					}else{
						location.reload();
					}
				},
				 error:function(request, xhr,textStatus,errorThrown){	
                //console.log('error name ' + request.getResponseHeader('j_reason'));
                if(null != request.getResponseHeader('j_reason')){
                	var errorRsp =  request.getResponseHeader('j_reason');
                	var data = JSON.parse(errorRsp);
                    //console.log(data);
                 	var errorPath = "/content/Qatar/i18n/login.errorMessages.json";
                 	//console.log('errorPath ' + errorPath);
                 		window.qrServiceRef.zone.run(function () {
                    		var checkErrorInterval = setInterval(function() {
								if( window.qrServiceRef.isGlobalI18nLoaded() ) {
									clearInterval(checkErrorInterval);
									window.qrServiceRef.translateErrorObject(data, errorPath).then(function(data){ 
										//console.log("Error " + data[0].errorDescription);
										s.events =  'event110';
										var errorMessage = data[0].errorDescription;
										if (errorMessage.indexOf("<span class='errorCode'>(") != -1 && errorMessage.indexOf(")</span>") != -1) {
											errorMessage = errorMessage.replace("<span class='errorCode'>("," ");
											errorMessage = errorMessage.replace(")</span>","");
										}
										s.eVar92 = errorMessage;
										$('#loginErrorBlock #errorId').html(data[0].errorDescription);
										$('#loginErrorBlock .input-base-msg-box').show().focus();
										if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
											digitalData.page.pageInfo.pageType = 'twitter-login-error';
										}
									errorClick(window.location.href, 'login-twitter', 'privilegeclub-login', data[0].errorName);
									if($('#sc_variable').val() == 'true') {	
									   s.t();
									}
									});
								}
							}, 500);
                    	 });
					/*var errorValue = getErrorMessage(errorRsp, localeErrorCode);
                   //alert(errorValue);
					//$('#errorId').text(errorValue);
					$('#loginErrorBlock #errorId').text(errorValue);
		            $('#loginErrorBlock .input-base-msg-box').show();*/
                }else{	
               	 $('#loginErrorBlock .input-base-msg-box').hide();
					//console.log('No Error from Service ');
                }
                setTimeout(function() {
                    hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
                 }, 500);
				}        
		});
		  } catch(err) {}
	}

var loginRequest, loginPage = '', eventName = 'login',loginSource, portalDashboardURL, privilegeClubDashboardURL, eventLocation = 'login-start-privilegeclub', authParameterName = '', basicBasicInfoVal = '', loginloginReq_headers ={ },loginReq_headers= {}, isRedirected = false, availableData = '', studentDashboardURL, isFPFlow = false, isSMELoginPage = false, QRHFIFABKG = 'QRHFIFABKG', FIFAMCRSTE = 'FIFAMCRSTE', isFifaFlow = false, loginUserNameType = '', loginUserType = 'privilegeclub-login', mainActivityCode = "", mainFifaRedirectionUrl = '', mainFifaSource = '', crc = '',partnerCode = '', partnerState = '', partnerClientId = '', partnerRedirectUrl = '', isPartnerFlow =false, isRevenueBooking = false, sourceCode = '', ANCILLARIES = 'ANCILLARIES', pageLocale = $('#page-locale').val();
var currentPageCookieNotify = $('#currentPageCookieNotify').val();
var cookie_visited = getCookieValue('cookie_visited') != undefined ? getCookieValue('cookie_visited') : false;
setTimeout(function() {
	if(currentPageCookieNotify != undefined && currentPageCookieNotify == 'true' && cookie_visited != undefined && !cookie_visited ){
		$('.cookie-section').show();
		$("#cookieContainer").removeClass('hide');
        $("#cookieContainer").addClass('show');
	}
}, 2000);

if(location.search.indexOf("activityCode=SME") != -1 ){
	eventLocation = 'login-start-beyondbusiness';
	loginUserType = 'beyondbusiness-login';
}

var verifyCaptchaLogin = function(response) {
	availableData = response;
    $('#loginButtonInvoke').css({'pointer-events':'auto','opacity':'1'});
}
var cryptoAlgorithmSelected = "AES";

function fbInitLogin() {
	 (function(d, s, id){
		 var js, fjs = d.getElementsByTagName(s)[0];
		 if (d.getElementById(id)) {return;}
		 js = d.createElement(s); js.id = id;
		 js.src = "https://connect.facebook.net/en_US/sdk.js";
		 fjs.parentNode.insertBefore(js, fjs);
	   }(document, 'script', 'facebook-jssdk'));
}

function googleInitLogin() {
	var script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "https://apis.google.com/js/api:client.js";
    script.async = true;
    script.dataset.cfasync = false;  
    document.body.appendChild(script);
}
//window.addEventListener("load", fbInitLogin);
//window.addEventListener("load", googleInitLogin);

$(document).ready(function() {
	
	var isParamExists = location.search.indexOf('?');
	if(isParamExists != -1){
		var requestParamsInfo = location.search.split('?')[1];
		var requestParams = requestParamsInfo.split('&');
		$.each(requestParams, function(key, value) {
			if(value.indexOf('crc=') != -1){
            	crc = value.split('=')[1];
			}
		});
	}
	
	if(crc !== ''){
		$('#j-login-form').append('<input type="hidden" value="' + crc + '" name="crc" id="crc"/>');
		$(".create-profile-popup").addClass("hide");
		$('#reset-account-link').addClass('hidden');
		$('.login-drop-column:first-child').css('border-right',' 0');
		$('.smeContainer').addClass('hide');
	}
	if(isParamExists != -1){
		var requestParamsInfo = location.search.split('?')[1];
		var requestParams = requestParamsInfo.split('&');
		$.each(requestParams, function(key, value) {
			if(value.indexOf('redirectUrl=') != -1){
            	mainFifaRedirectionUrl = value.split('=')[1];
				mainFifaRedirectionUrl = decodeURIComponent(mainFifaRedirectionUrl);
			}
			if(value.indexOf('source=') != -1){
            	mainFifaSource = value.split('=')[1];
				mainFifaSource = decodeURIComponent(mainFifaSource);
			}
			
		});
	}
	
	if( mainFifaSource == QRHFIFABKG || mainFifaSource == FIFAMCRSTE ) {
		$('.qbiz-login-section').remove();
		$('.student-joinnow-blk').removeClass('col-sm-6').addClass('col-sm-12');
		var joinNowLinkStdnt = $('.student-joinnow-blk a').attr('href');
		var joinNowLinkStdntParams = "enrolSourceType="+mainFifaSource+"&redirectUrl="+mainFifaRedirectionUrl;
		joinNowLinkStdnt = joinNowLinkStdnt.indexOf('?') == -1 ? joinNowLinkStdnt+"?"+joinNowLinkStdntParams : joinNowLinkStdnt+"&"+joinNowLinkStdntParams;
		$('.student-joinnow-blk a').attr('href',joinNowLinkStdnt);
	}
	
	if(location.search.indexOf("activityCode=ra") != -1 ) {
    	$('#social-login-block, form#j-login-form, .qbiz-login-section').addClass('hidden');
        $('div#forgot-password').removeClass('back');
    }
	
    
	if(location.search.indexOf("evt=") != -1 ) {
		var isParamExists = location.search.indexOf('?');
		var evt = '';
		var requestParamsInfo = location.search.split('?')[1];
		var requestParams = requestParamsInfo.split('&');
		$.each(requestParams, function(key, value) {
			if(value.indexOf('evt=') != -1){
				evt = value.split('=')[1];
			}
		});
		if(evt !== '') {
			var verifyEmailVerificationTokenServiceURL = $('#verifyEmailVerificationTokenServiceURL').val();
			var params ={"emailVerificatinToken": evt};
			$.ajax({
				url: verifyEmailVerificationTokenServiceURL,
				type: 'POST',  
				cache: false,
				contentType : "application/json; charset=utf-8",
				processData:false,
				data :JSON.stringify(params),
				success: function(response){
					var errorObject = response.errorObject;
					if(errorObject === undefined){
						var isVerified = response.valid;
						if(isVerified){
							$('#login-success-message span.success-message').text($('#email-verification-success-message').val());
							$('#login-success-message').removeClass('hidden').focus();
						} else {
							$('#loginErrorBlock #errorId').html(Granite.I18n.get(errorObject[0].errorName));
							$('#loginErrorBlock .input-base-msg-box').show().focus();
						}
					} else {
						$('#loginErrorBlock #errorId').html(Granite.I18n.get(errorObject[0].errorName));
						$('#loginErrorBlock .input-base-msg-box').show().focus();
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'email-verification-error';
						}
						errorClick(window.location.href, 'email-verification', loginUserType, errorObject[0].errorName);
					}
				}
			});
		}
    }
	
	$(document).on('click', '#login-alert-message a', function(e) {
		hideLoginMessages();
		var sendVerificationEmailServiceURL = $('#sendVerificationEmailServiceURL').val();
        var userEmailId = $('#f1003').val();
		if(userEmailId === '') {
			userEmailId = $('#j_socialMediaEmail').val();
			if(userEmailId === '') {
				userEmailId = $('#f1002').val();
			}
		}
		var params ={"userName": userEmailId};
		$.ajax({
			url: sendVerificationEmailServiceURL,
			type: 'POST',  
			cache: false,
			contentType : "application/json; charset=utf-8",
			processData:false,
			data :JSON.stringify(params),
			success: function(response){
				var errorObject = response.errorObject;
				if(errorObject === undefined){
					var isVerificationEmailSent = response.isVerificationEmailSent;
					if(isVerificationEmailSent){
						$('#login-alert-message').addClass('hidden');
						$('#login-success-message span.success-message').text($('#resend-verification-link-success-message').val());
						$('#login-success-message').removeClass('hidden').focus();
					} else {
						$('#login-alert-message').addClass('hidden');
						$('#loginErrorBlock #errorId').html(Granite.I18n.get(errorObject[0].errorName));
						$('#loginErrorBlock .input-base-msg-box').show().focus();
					}
				} else {
					$('#login-alert-message').addClass('hidden');
					$('#loginErrorBlock #errorId').html(Granite.I18n.get(errorObject[0].errorName));
					$('#loginErrorBlock .input-base-msg-box').show().focus();
					if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
						digitalData.page.pageInfo.pageType = 'resend-verification-email-error';
					}
					errorClick(window.location.href, 'resend-verification-email', loginUserType, errorObject[0].errorName);
				}
			}
		});
	});
    
	$('#loginCaptchaCode').on('validatecaptcha', function(event, isCorrect) {
		if( isCorrect ) {
			availableData = 'cadkjjklsadjlk'+(new Date()).getTime();
			$('#loginButtonInvoke').css({'pointer-events':'auto','opacity':'1'});
		} else {
			availableData = '';
			$('#loginButtonInvoke').css({'pointer-events':'none','opacity':'0.4'});
		}
	});

	setTimeout(function() {
		if(location.search.indexOf("activityCode=ra") != -1 ) {
			$('#forgot-password-link').click();
		}
	}, 200);
	if( typeof grecaptcha === 'undefined' ) {
		$('#loginCaptcha').hide();
		$('#loginButtonInvoke').css({'pointer-events':'auto','opacity':'1'});
	}
    if( $('#enableAlwaysCaptcha').val() != undefined && $('#enableAlwaysCaptcha').val() != '' && $('#enableAlwaysCaptcha').val() != null && $('#enableAlwaysCaptcha').val() === 'true' ) {
		createCookie('SAC_ERROR','4');
	}
	var sacVal = getFFPCookieValue('SAC_ERROR');
	if(sacVal !== null && sacVal !== undefined && parseInt(sacVal) >= 2 ) {
		if( $('#FFP_CAPTCHA_LOGIN').val() === 'GOOGLE' ) {
			$('#loginCaptcha').show();
			$('#loginCaptcha').parent().removeClass('hide');
			if( typeof grecaptcha === 'undefined' ) {
				$('body').append('<script src="https://www.recaptcha.net/recaptcha/api.js?onload=reCaptchaLoad&render=explicit&hl=' + pageLocale + '"></script>');
			} else {
				grecaptcha.reset();
			}
		} else if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
			$('#login-botdetect-captcha').parent().removeClass('hide');
			
			if( typeof loginBotCaptcha !== 'undefined' ) {
				try{
					loginBotCaptcha.reloadImage();
				} catch(err){}
			} else if( typeof loginBotCaptcha === 'undefined' ) {
				var captchaLoginLoader = setInterval(function() {
					if( $.isFunction($.fn.captcha) ) {
						clearInterval(captchaLoginLoader);
						loginCaptchaBot = $('#login-botdetect-captcha').captcha({
							captchaEndpoint: '/qr/bot/botqrwebcaptcha'
						});
					}
				}, 200);
			}
		}
		/* Check and remove the below code after integration with the latest code - Start	*/
		if(location.search.indexOf("activityCode=SME") != -1 ) {
			$('#social-login-block .no-gutter-left').remove();
		}
		/*		END		*/
		
		if( typeof grecaptcha !== 'undefined' && !isMobileApp() ) {
			try{
				grecaptcha.reset();
			} catch(err){}
			$('#loginButtonInvoke').css({'pointer-events':'none','opacity':'0.4'});
		} else if( typeof loginBotCaptcha !== 'undefined' && !isMobileApp() ) {
			try{
				loginBotCaptcha.reloadImage();
			} catch(err){}
			
		}
		$('#loginButtonInvoke').css({'pointer-events':'none','opacity':'0.4'});
	}
	loginRequest = getFFPCookieValue("loginRequest");
	console.log('Mobile App:loginRequest:' , loginRequest);
	
	if( document.referrer === '' && loginRequest !== '' && loginRequest !== undefined && loginRequest !== null && JSON.parse(getFFPCookieValue('loginRequest'))[0] != undefined && JSON.parse(loginRequest)[0].callBackUrl !== undefined && JSON.parse(loginRequest)[0].callBackUrl.indexOf('.qatarairways.com') === -1 ) {
		document.cookie = 'loginRequest=; path=/; domain=.qatarairways.com; expires=Thu, 01 Jan 1970 00:00:01 GMT';
		loginRequest = null;
	}
	
	if(location.search.indexOf("activityCode=QMILES_RETRIEVE_BKG") !== -1 ) {//QMILES_RETRIEVE_BKG
		mainActivityCode = "QMILES_RETRIEVE_BKG";
		var requestParamsInfo = location.search.split('?')[1];
		var requestParams = requestParamsInfo.split('&');
		$.each(requestParams, function(key, value) {
			if(value.indexOf('ffpNo=') !== -1){
				$("#f1003").val(value.split('=')[1]);
				$("#f1003").parent().addClass('filled');
			}
		});
	}
		
	if(location.search.indexOf("activityCode=SME") != -1 ) {
		isSMELoginPage = true;
		$('#reset-account-link').addClass('hidden');
		$('#forgot-email-link').addClass('hidden');
        if(isMobileApp()){
            $('.login-drop-column.j-login-action.flip-container').css('height','350px');
        }
		$('#social-login-block .no-gutter-left').remove();
		$('#f1003').parent().find('.user-name-label').remove();
		$('#f1003').parent().find('.user-name-placeholder').remove();
		$('#f1003').parent().find('.sme-user-name-placeholder').removeClass('hidden');
		$('#f1002').parent().find('.user-fpl').remove();
		$('#f1002').parent().find('.user-fp-placeholder').remove();
		$('#f1002').parent().find('.sme-user-fp-placeholder').removeClass('hidden');
		$('.qbiz-login-section').each(function() {
			$(this).remove();
		});
		$('.sme-joinnow-info-msg').removeClass('hide');
		$('.smeContainer').remove();
		if( loginRequest != null && loginRequest != undefined && loginRequest != '' && $('#j-login-form').length > 0 ) {
			var loginRequestParse = JSON.parse(loginRequest);
			if(loginRequestParse[0].activityCode == "SME_MB_LOGIN") {
				mainActivityCode = "SME_MB_LOGIN";
				$('#language-selector').find('#parentCheckinManage').closest('.alert-notice').remove();
				$('.login-drop-column.create-profile-popup,#div_guestuserlogin').remove();
				$('#footer').remove();
				$('#footer-nsp').removeClass('hide');
				$('.qbiz-login-section').addClass('hide');
				$('.j-login-action').parent().css({'display': 'flex','justify-content': 'center'});
				$('.j-login-action').css({'border-right': 'none'});
			}
		}
	} else {
		$('#f1003').parent().find('.sme-user-name-label').remove();
		$('#f1003').parent().find('.sme-user-name-placeholder').remove();
		$('#f1002').parent().find('.user-fpl').remove();
		$('#f1002').parent().find('.sme-user-fp-placeholder').remove();
		if( loginRequest != null && loginRequest != undefined && loginRequest != '' && $('#j-login-form').length > 0 ) {
			var loginRequestParse = JSON.parse(loginRequest);
			if( (loginRequestParse[0].activityCode == "RDM_BKG" || loginRequestParse[0].activityCode == "EXB_LOGIN")  && loginRequestParse[0].activityCode !== "ENROLL_LOGIN" ) {
				mainActivityCode = loginRequestParse[0].activityCode;
				//$('#language-selector').closest('.header-top-row').remove();
				$('#language-selector').find('#parentCheckinManage').closest('.alert-notice').remove();
				$('.login-drop-column.create-profile-popup,#div_guestuserlogin').remove();
				$('#footer').remove();
				$('#footer-nsp').removeClass('hide');
				$('.qbiz-login-section').addClass('hide');
				$('.j-login-action').parent().css({'display': 'flex','justify-content': 'center'});
				$('.j-login-action').css({'border-right': 'none'});
			} else if ( loginRequestParse[0].activityCode !== "ENROLL_LOGIN" ) {
				mainActivityCode = loginRequestParse[0].activityCode;
				$('#language-selector').find('#parentCheckinManage').closest('.alert-notice').remove();
				$('.login-drop-column.create-profile-popup').remove();
				$('#footer').remove();
				$('#footer-nsp').removeClass('hide');
				$('.qbiz-login-section').addClass('hide');
				if ( loginRequestParse[0].activityCode === "QMILES_RETRIEVE_BKG" || loginRequestParse[0].activityCode === "RETRIEVE_BKG") {
					console.log('Activity code is QMILES_RETRIEVE_BKG');
					$("#f1003").val(loginRequestParse[0].ffpNo);
					$("#f1003").parent().addClass('filled');
				}
			}
		}
	}
	$(document).on('click', '#loginButtonInvoke', function(e) {
		invoke();
		addEvetnInfo(eventLocation,eventName,'clicked');
	});
	$('#loginshowpassword').on('click',function(e) {
		if($(this).prop('checked')){
			$('#f1001').attr('type','text');
		}
		else{
			$('#f1001').attr('type','password')
		}
	});
	$(document).on('click', '#loginJoinButton', function(e) {
		if( mainFifaSource == FIFAMCRSTE || mainFifaSource == QRHFIFABKG ) {
			var joinNowLink = $('#loginJoinButton').attr('data-joinnow-page');
			var joinNowLinkParams = "enrolSourceType="+mainFifaSource+"&redirectUrl="+mainFifaRedirectionUrl;
			joinNowLink = joinNowLink.indexOf('?') == -1 ? joinNowLink+"?"+joinNowLinkParams : joinNowLink+"&"+joinNowLinkParams;
			$('#loginJoinButton').attr('data-joinnow-page',joinNowLink);
		}
		if(e.which == 13) {
			linkEventClickAction(window.location.href, 'redirect-to-qrpc-joinnow', 'privilegeclub-login');
			window.location = $('#loginJoinButton').attr('data-joinnow-page');
		} else {
			linkEventClickAction(window.location.href, 'redirect-to-qrpc-joinnow', 'privilegeclub-login');
			window.location = $('#loginJoinButton').attr('data-joinnow-page');
		}
		
		var source = document.referrer;
		if( source === '' || source === undefined ) {
			source = window.location.href;
		}
		if( source != '' && source != undefined ) {
			var queryIndex = source.indexOf('?');
			if(queryIndex !== -1) {
				source = source.substr(0,queryIndex)
			}
			source = source.replace('.html','').split('/');
			source = source[source.length  - 1];
		}
		addComponentPageEvent('signup','signup start','',source);
	
	});
	
	$(".student-logo a.btn").on('click',function(){
		linkEventClickAction(window.location.href, 'redirect-to-qrsp-joinnow', 'privilegeclub-login');
    });
	
	$("#reset-account-link").on('click',function(){
		linkEventClickAction(window.location.href, 'redirect-to-reset-email', 'privilegeclub-login');
    });

	$(document).on('click','.back-to-login', function(){
		buttonClickAction(window.location.href, 'back-to-login', loginUserType);
		$('#social-login-block').css({'visibility':'visible'});
		setTimeout(function() {
			$('#social-login-block').find('.back-to-login').css({'visibility':'hidden'});
			$('#social-login-block').find('div').eq(0).css({'visibility':'visible'});
		}, 600);
        if( $('#enableAlwaysCaptcha').val() != undefined && $('#enableAlwaysCaptcha').val() != '' && $('#enableAlwaysCaptcha').val() != null && $('#enableAlwaysCaptcha').val() === 'true' ) {
			createCookie('SAC_ERROR','4');
		}
		var sacVal = getFFPCookieValue('SAC_ERROR');

		if( !isMobileApp() && sacVal !== null && sacVal !== undefined && parseInt(sacVal) >= 2 ) {
			if( $('#FFP_CAPTCHA_LOGIN').val() === 'GOOGLE' ) {
				$('#loginCaptcha').show();
				if( typeof grecaptcha === 'undefined' ) {
					$('body').append('<script src="https://www.recaptcha.net/recaptcha/api.js?onload=reCaptchaLoad&render=explicit&hl=' + pageLocale + '"></script>');
				} else {
					grecaptcha.reset();
				}
			} else if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
				$('#login-botdetect-captcha').parent().removeClass('hide');
				if( typeof loginBotCaptcha !== 'undefined' ) {
					try{
						loginBotCaptcha.reloadImage();
					} catch(err){}
				} else if( typeof loginBotCaptcha === 'undefined' ) {
					if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
						loginCaptchaBot = $('#login-botdetect-captcha').captcha({
							captchaEndpoint: '/qr/bot/botqrwebcaptcha'
						});
					}
				}
			}
			if( $('#FFP_CAPTCHA_FORGOT').val() === 'GOOGLE' ) {
				$('#forgotCaptcha').hide();
			} else if( $('#FFP_CAPTCHA_FORGOT').val() === 'BOT' ) {
				$('#forgot-botdetect-captcha').parent().hide();
			}
			$('#loginButtonInvoke').css({'pointer-events':'none','opacity':'0.4'});

		}
		//$('#social-login-block').css({'margin-top':'60px'});
		//$('.create-profile-popup').css({'margin-top':'0px'});
		$('.qbiz-login-section').show();
		s.events = 'event181';
		s.eVar86 = s.pageName;
		if($('#sc_variable').val() == 'true') {
			s.t();
		}
	});
	$(document).on('click', '#forgot-password-link', function(){
	$('#social-login-block').css({'visibility':'hidden'});
		//$('#social-login-block').css({'margin-top':'6px'});
		//$('.create-profile-popup').css({'margin-top':'-100px'});
		
		var activityCodeParam = '';
		if(location.search.indexOf('?') != -1){
			var requestParamsInfo = location.search.split('?')[1];
			var requestParams = requestParamsInfo.split('&');
			$.each(requestParams, function(key, value) {
				if(value.indexOf('activityCode=') != -1){
					activityCodeParam = value.split('=')[1];
				}
			});
		}
		var isResponsiveView = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);			
		if(isResponsiveView && 'SME' == activityCodeParam) {
			$('.create-profile-popup').css({'margin-top':'70px'});
		}
		if( !isMobileApp() ) {
			if( $('#FFP_CAPTCHA_FORGOT').val() === 'GOOGLE' ) {
				$('#forgotCaptcha').show();
				if( typeof grecaptcha === 'undefined' ) {
					$('body').append('<script src="https://www.recaptcha.net/recaptcha/api.js?onload=reCaptchaLoad&render=explicit&hl=' + pageLocale + '"></script>');
				} else {
					grecaptcha.reset();
				}
			} else if( $('#FFP_CAPTCHA_FORGOT').val() === 'BOT' ) {
				if( typeof forgotPasswordCaptcha != 'undefined' ) {
					forgotPasswordCaptcha.reloadImage();
				} else {
					$('#forgot-botdetect-captcha').captcha({
						captchaEndpoint: '/qr/bot/botcaptcha'
					});
				}
				$('#forgot-botdetect-captcha').parent().show();
			}

		}
		setTimeout(function() {
			$('#social-login-block').find('div').eq(0).css({'visibility':'hidden'});
			$('#social-login-block').find('.back-to-login').css({'visibility':'visible'});
		}, 600);
		if( $('#FFP_CAPTCHA_LOGIN').val() === 'GOOGLE' ) {
			$('#loginCaptcha').hide();
		} else if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
			$('#login-botdetect-captcha').parent().addClass('hide');
		}
		$('.qbiz-login-section').hide();
		s.events = 'event180';
		s.eVar86 = s.pageName;
		if($('#sc_variable').val() == 'true') {
			s.t();
		}
	});
	$("#remember").click(function() {
		try {
		var isRememberChecked = $("#remember").is(':checked');
		$localstorage = void 0;
		var LOCAL_STORAGE;
		if(isRememberChecked){
				var username = $("#f1003").val();
				//console.log("User name is " + username);
				LOCAL_STORAGE = window.localStorage;
				LOCAL_STORAGE.setItem("remembercheck", username);
		}else{
			localStorage.removeItem("remembercheck");
			//$("#f1003").val("");
		}
		} catch(err) {}
	});
	var isCorporate = window.location.href.indexOf("/corporate-travel")>-1;
	var bannerOutageUrl="/qr/qrweb/banneroutage.json";
	if(isCorporate)
	{
		bannerOutageUrl="/content/global/en/corporate-travel/qr-banner-config-page/jcr:content/banner-outage.json?bannerID";
	}
	$.ajax({
		url: bannerOutageUrl,
		type: 'GET',   
		cache: false,
		success: function(response) {  
			//console.log('data '+JSON.stringify(response));
			var isOutageEnabled = false;
			if( !isCorporate ) {
				var outageData = typeof response == 'object' ? response : JSON.parse(response);
				if( outageData.isOutageRequired ){
					var outageFrom = outageData.outageFromdate;
					outageFrom = outageFrom.substring(0,outageFrom.indexOf('.'));
					var outageTo = outageData.outageTodate;
					outageTo = outageTo.substring(0,outageTo.indexOf('.'));
					var outageFromDate = new Date(outageFrom+".000Z");
					var outageToDate = new Date(outageTo+".000Z");
					outageFromDate = outageFromDate.getTime();
					outageToDate = outageToDate.getTime();
					var currentDateTime = new Date().getTime();
					if( currentDateTime > outageFromDate && currentDateTime < outageToDate ){
						isOutageEnabled = true;
					}		
				}
			} else if(isCorporate && response.isOutageRequired ) {
				isOutageEnabled = true;
			}
			if( !isOutageEnabled ){
				$('#loginMainComponent').removeClass('hide');
				$('#loginBannerOutageContainer').addClass('hide');
				
				/** events to call login if enter is pressed after entering password **/
					 authParameterName = $('#authparamName').val();
					 basicBasicInfoVal = $('#basicBasicInfo').val();
					 loginReq_headers ={
						'Content-Type': 'application/json'
					};
					if((basicBasicInfoVal != '')) {
						if(basicBasicInfoVal != '' ) {
							loginReq_headers['Authorization'] = 'Basic ' + $('#basicBasicInfo').val();
						} 
					}

					loginReq_headers[''+authParameterName] = 'Bearer ' + getFFPCookieValue("QRTOKEN");
					//console.log(" loginReq_headers >> "+loginReq_headers);
					
					try {
					loginPage = $('#loginPage').val();
					if($('#profile-otp-modal').val() !== undefined) {
						$('#otp-country-code, #otp-telephone-number, #otp-email').attr('disabled', 'disabled');
					}
					var isRememberChecked = $("#remember").is(':checked');
					if(isRememberChecked){
						//console.log('isRememberChecked is true');
						$('#f1003').parent().find('.input-base-placeholder').addClass('rememberUser');
					}

					var QRTOKEN = getFFPCookieValue("QRTOKEN");
					applyNSPChanges();
					$('#loginErrorBlock,#loginErrorBlock .input-base-msg-box').removeAttr('hidden').focus();
				} catch(err) {}
			} else {
				$('#OutageBannerValue').val('true');
				$('#loginMainComponent').addClass('hide');
				$('#loginBannerOutageContainer').removeClass('hide');
				
			}
		}
	});


	var isParamExists = location.search.indexOf('?');
	if(isParamExists != -1){
		var resourcePagePath = '', activityCodeParam = '', currentPagePath = $('#j_currentPage').val();
		var requestParamsInfo = location.search.split('?')[1];
		var requestParams = requestParamsInfo.split('&');
		$.each(requestParams, function(key, value) {
			if(value.indexOf('resource=') != -1){
				resourcePagePath = value.split('=')[1];
			}
			if(value.indexOf('activityCode=') != -1){
				activityCodeParam = value.split('=')[1];
			}
			if( value.indexOf('state=') != -1 ) {
				partnerState = value.split('=')[1];
			}
			if( value.indexOf('partnerId=') != -1 ) {
				partnerClientId = value.split('=')[1];
				partnerCode = activityCodeParam;
				isPartnerFlow = true;
			}
			if( value.indexOf('redirectUrl=') != -1 ) {
				partnerRedirectUrl = value.split('=')[1];
			}
		});
		var partnerActivityCodes = $('#allowed-partlogin-codes').val();
		if ( partnerActivityCodes != undefined && partnerCode != '' && partnerActivityCodes.indexOf(partnerCode) != -1 ) {
			$('.login-drop-column.create-profile-popup').addClass('hide');
			$('.student-joinnow-blk').parent().addClass('hide');
		}
		if(resourcePagePath !== ''){
			loginSource = resourcePagePath.substr(resourcePagePath.lastIndexOf('/') + 1);
			loginSource = loginSource.replace('.html','');
		}
		if(activityCodeParam === 'SME'){
			loginSource = currentPagePath !== undefined ? currentPagePath.substr(currentPagePath.lastIndexOf('/') + 1) : '';
			eventLocation = 'login-start-beyondbusiness';
		}
	}
	applyNSPChanges();
	$(document).on('click', '#basicFifaLoginLink', function() {
		$('#portalloginfifainfo').parent().addClass('hide');
		$('#loginButtonInvoke').click();
	});
});

   function otherSitesEnrollment(){
	   try {
			if( isMobileApp() ){
				$('#j_platform').val(mobilePlatform);
			}
			$('#loginErrorBlock .input-base-msg-box').hide();
			var $spinner_offer = $('#global-spinner-container.spinner-overlay');
			var localeErrorCode = $("#signOnLanguage").val() != undefined ? $("#signOnLanguage").val() : 'en';
			showSpinnerMobileApp($spinner_offer,'spinner-full-page');
			ajaxLoginCall(true);
		
		} catch(err) {}
	}
    function keepAliveExternalSession(keepAliveURL, language){
		try {
       var form = $('#externalkeepAliveURL-form');
       form.attr('action', keepAliveURL);
       var input_name = "language";
       var input = $("#externalkeepAliveURL-form :input[name='"+input_name+"']").attr('value', language); 
       form.unbind('submit');
       var url = keepAliveURL;
       //alert("keepAliveExternalSession function");
       jQuery.ajax({
            url: url,
            data: $(form).closest('form').serializeArray(),
            method: "POST",
            success: function(data) {
                //alert(data);
            }
        });
		} catch(err) {}
    }
	
function delete_cookie(sKey, sPath, sDomain) {
	try {	
	document.cookie = encodeURIComponent(sKey) +
	"=; expires=Thu, 01 Jan 1970 00:00:00 GMT" +
	(sDomain ? "; domain=" + sDomain : "") +
	(sPath ? "; path=" + sPath : "");
	} catch(err) {}
}
var isLoggedIn = false, userProgramCode = '', sendOTPContactDetails, mobileNumber, countryCallingCode, ccc, cc, countryCode, email, isEmailValid = false, secureOTPChannel = '', receiveOTPChannel = '', existingPreference = '', newPreference = '', newChannel = '', newCountryCallingCode, newCountryCode, newMobileNumber, newEmail,  skipSaveOtpPreference = false;

function hideOTPErrorMessages() {
	try {
		$('.otp-mobile-number-empty-message, .otp-mobile-calling-code-empty-message, .otp-email-empty-message, .otp-mobile_email-empty-message, .otp-invalid-email-message, .otp-preference-service-error-message, .invalid-otp-error-message, .empty-otp-error-message, .otp-verify-service-error-message').attr('hidden', '');
	} catch(err) {}
}

function hideLoginMessages() {
	try {
		$('#login-success-message, #login-alert-message').addClass('hidden');
	} catch(err) {}
}

function loginSuccessFunction() {
	var userType = getUserBasicInfoField('programCode');
	var portalDashboardURL = $('#portalDashboardPage').val(); //For login page
	/*setTimeout(function() {
	   hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
	}, 500);*/
	       
	addComponentPageEvent(eventName,'loggedin','email',loginSource);
	var loginRequestCookie = $.parseJSON(loginRequest);	
	var activityCodesLogin = $('#allowed-actlogin-codes').val().split(',');
	if ('QRPC' == userType || 'QRBB' == userType || 'NCP' == userType) {
		if (null !== loginRequest && '' !== loginRequest && typeof loginRequest !== 'undefined') {
			mainActivityCode = loginRequestCookie[0].activityCode;
			if (activityCodesLogin.indexOf(loginRequestCookie[0].activityCode) != -1 ) {
				verifyOTP();
			} else if (loginRequestCookie[0].activityCode == "RVE_BKG") {
				isRevenueBooking = true;
				redirectUser();
			}
		} else {
			verifyOTP();
		}
	} else if ('PORTAL' == userType) {
		redirectUser();
	}
}

function ajaxLoginCall(otherSite) {
	
	if( $("#j-login-form").find('#activity-login-code').length == 0) {
		$("#j-login-form").append('<input type="hidden" id="activity-login-code" name="activity-login-code" value="'+mainActivityCode+'"/>');
	} else {
		$("#j-login-form").find('#activity-login-code').val(mainActivityCode);
	}
	
	 $.ajax({
		url: "/qr/j_security_check_qr_portal",
		type: 'POST',   
		data: $("#j-login-form").serialize(),
		cache: false,
		success: function(request, data, textStatus, errorThrown) { 
			$('#j-login-form').find('[name="additionalInfo"]').val('');
			//console.log('Inside success ' + data);
			//console.log('login success ' + textStatus + errorThrown);
			if( isMobileApp() ){
				setLoginTokenApp();
			}
			if( location.search.indexOf('responsys')  != -1 ){
				createSimpleCookie('comResponsys','true');
			}
			createSimpleCookie('loginSuccess','direct');	
			//$('#j-login-form').addClass('hide');
			$('#j-login-form, .qbiz-login-section').addClass('visibilityHidden');
			//$('.is-not-logged').css("display", "none");//To hide Login menu
			$('.is-logged').css("display", "block");
			$('.create-profile-popup').hide();
			$('#social-login-block, #div_guestuserlogin').addClass('hide');
			
					loginSuccessFunction();
			//}
			//$("#j-login-form").removeClass('spinner-active');
			//

		},
		error: function(request, xhr, textStatus, errorThrown) {
			var loginRequestCookie = $.parseJSON(loginRequest);
			//$("#j-login-form").removeClass('spinner-active');
			$('#j-login-form').find('[name="additionalInfo"]').val('');
			if( $('#enableAlwaysCaptcha').val() != undefined && $('#enableAlwaysCaptcha').val() != '' && $('#enableAlwaysCaptcha').val() != null && $('#enableAlwaysCaptcha').val() === 'true' ) {
				createCookie('SAC_ERROR','4');
			}
            var sacVal = getFFPCookieValue('SAC_ERROR');
			if (sacVal !== null && sacVal !== undefined && parseInt(sacVal) >= 2) {
					if( $('#FFP_CAPTCHA_LOGIN').val() === 'GOOGLE' ) {
						$('#loginCaptcha').show();
						$('#loginCaptcha').parent().removeClass('hide');
						if( typeof grecaptcha === 'undefined' ) {
							$('body').append('<script src="https://www.recaptcha.net/recaptcha/api.js?onload=reCaptchaLoad&render=explicit&hl=' + pageLocale + '"></script>');
						} else {
							grecaptcha.reset();
						}
					} else if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
						$('#login-botdetect-captcha').parent().removeClass('hide');
						if( typeof loginBotCaptcha !== 'undefined' ) {
							try{
								loginBotCaptcha.reloadImage();
							} catch(err){}
						} else if( typeof loginBotCaptcha === 'undefined' ) {
							if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
								loginCaptchaBot = $('#login-botdetect-captcha').captcha({
									captchaEndpoint: '/qr/bot/botqrwebcaptcha'
								});
							}
						}
					}
					$('#loginButtonInvoke').css({'pointer-events':'none','opacity':'0.4'});
					
				}
		
		 //console.log('error name ' + request.getResponseHeader('j_reason'));
		 var isResetPassword = getActualCookieValue("resetPassword");
		 var isWeakPassword = getActualCookieValue('resetMessageFlag');
         if(null != request.getResponseHeader('j_reason')){
         	var errorRsp =  request.getResponseHeader('j_reason');
         	var data = JSON.parse(errorRsp);
            //console.log(data);
			var currentPage = $('#isProd').attr('current-page-path');
			var pageName = '';
			if(currentPage  !== undefined && currentPage !== ''){
				pageName = currentPage.substr(currentPage.lastIndexOf('/') + 1);
				pageName = pageName.replace('.html','');
			}
            hideLoginMessages();
            if(data[0]!= undefined && data[0].errorName != undefined && data[0].errorName.trim() === 'FFP_AUTH_USR_EMAIL_NOT_VRFD'){
                var alertMessage = $('#email-verification-alert-message').val();
                var resendVerificationLinkLabel = $('#resend-verification-link-label').val();
                var resendVerificationLink = '<a href="javascript:void(0)" id="resend-verification-link"><u>' + resendVerificationLinkLabel + '</u></a>';
                var finalAlertMessage = alertMessage.replace('${0}', resendVerificationLink);
                $('#login-alert-message .alert-message').html(finalAlertMessage);
                $('#login-alert-message').removeClass('hidden');
                if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
                	digitalData.page.pageInfo.pageType = 'login-without-email-verification';
                }
				errorClick(window.location.href, 'login-' + loginUserNameType, loginUserType, data[0].errorName);
				setTimeout(function() {
					hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
				}, 500);
				return false;
			}
			var currentPage = $('#isProd').attr('current-page-path');
			var pageName = '';
			if(currentPage  !== undefined && currentPage !== ''){
				pageName = currentPage.substr(currentPage.lastIndexOf('/') + 1);
				pageName = pageName.replace('.html','');
			}
			/*if(data[0]!= undefined && data[0].errorName == 'FFP_AUTH_AU_WRNG_ATMPT_CNT' || data[0].errorName == 'FFP_AUTH_AU_IC'){
				addErrorInfo("login","incorrect password","error tracking",pageName);
			} */
            var localeErrorCode = $("#signOnLanguage").val() != undefined ? $("#signOnLanguage").val() : 'en';
					var errorPath = "/content/Qatar/i18n/login.errorMessages.json";
					//console.log('errorPath ' + errorPath);
					window.qrServiceRef.zone.run(function () {
						var checkErrorInterval = setInterval(function() {
							if( window.qrServiceRef.isGlobalI18nLoaded() ) {
								clearInterval(checkErrorInterval);
								window.qrServiceRef.translateErrorObject(data, errorPath).then(function(data){ 
									//console.log("Error " + data[0].errorDescription);
								s.events =  'event110';
								var errorMessage = data[0].errorDescription;
								if (errorMessage.indexOf("<span class='errorCode'>(") != -1 && errorMessage.indexOf(")</span>") != -1) {
									errorMessage = errorMessage.replace("<span class='errorCode'>("," ");
									errorMessage = errorMessage.replace(")</span>","");
								}
								if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
									digitalData.page.pageInfo.pageType = 'login-error';
								}
								errorClick(window.location.href, 'login-' + loginUserNameType, loginUserType, data[0].errorName);
								s.eVar92 = errorMessage;
									$('#loginErrorBlock #errorId').html(data[0].errorDescription);
									$('#loginErrorBlock .input-base-msg-box').show().focus();
								if($('#sc_variable').val() == 'true') {	
								   s.t();
								}
								});
							}
						}, 500);
					});
			
			//alert(errorValue);
			//$('#errorId').text(errorValue);
         }else if((typeof isResetPassword != 'undefined' && isResetPassword === 'true') || (typeof isWeakPassword != 'undefined' && isWeakPassword === 'true')){
				deleteCookie('resetPassword');
				deleteCookie('resetMessageFlag');
				deleteCookie('userName');
				logout();
				if(isResetPassword === 'true' && isWeakPassword ==='false'){
					$('#loginErrorBlock #errorId').html($('#sys-gen-password-error').val());
				} else if(isWeakPassword === 'true'){
					$('#loginErrorBlock #errorId').html($('#weak-password-error').val());
				} 
				$('#loginErrorBlock .input-base-msg-box').show().focus();
		 }else{	
        	$('#loginErrorBlock .input-base-msg-box').hide();
			//console.log('No Error from Service ');
         }
         
         var $spinner_offer = $('#global-spinner-container.spinner-overlay');
		 setTimeout(function() {
			 hideSpinnerMobileApp($spinner_offer,'spinner-full-page');
		  }, 500);
		  var loginRequestCookie = $.parseJSON(loginRequest) 
		  if(otherSite && loginRequestCookie != null && (loginRequestCookie[0].activityCode == "AUTONSPLOGIN" || loginRequestCookie[0].activityCode == "AUTO_LOGIN" ) ){
				if( isMobileApp() ) {
					$('#j-login-form [name="j_username"]').val('');
					if( mobilePlatform == window.ANDROID_PLATFORM ){ 
							JSInterface.autoLoginFailed();
					}        
					if( mobilePlatform == window.IOS_PLATFORM ){
						setupWebViewJavascriptBridge(function(bridge) {
							/* Initialize your app here */
							bridge.callHandler('autoLoginFailed', '', function() {
								console.log('Login failed');
							});
						});
					}
				}
			}
		}        
});
}

function invoke() {
	$('#portalloginfifainfo').parent().addClass('hide');
	try {
	
	/* load angular scripts for first time */
	if( typeof window.qrServiceRef === 'undefined' ) {
		var scriptLoaderPath = $('#login-clientlib-js script').attr('src');
		scriptLoaderPath = scriptLoaderPath.replace('login-clientlibs','angular');
		console.log('scriptLoaderPath '+scriptLoaderPath);
		var angularElement = '<script src="'+scriptLoaderPath+'" type="text/javascript"></script>';document.createElement("script");
            
		$('body').append(angularElement);
	}
	
	$('#j-login-form #additional_time')[0].value=new Date();
	$('#loginErrorBlock,#loginErrorBlock .input-base-msg-box').removeAttr('hidden').focus();
	var isRememberChecked = $("#remember").is(':checked');
	if(isRememberChecked){
		 var username = $("#f1003").val();
         //console.log("User name is " + username);
		localStorage.setItem("remembercheck", username);
	}
	
      isLoggedIn = true;
		var localeErrorCode = $("#signOnLanguage").val() != undefined ? $("#signOnLanguage").val() : 'en';
    
    // alert("invoke method called!!");
    var formId = $('#j-login-form');
	var unameValue = $('.usernameField').val();
	var pwdVal = $('.passwordField').val();
    var currentPage = "${currentPage.path @context='text'}";
    // alert(currentPage);
	if( $('#j-login-form').find('[name="additionalInfo"]').length == 0 ) {
		$('#j-login-form').append('<input type="hidden" name="additionalInfo" value="'+availableData+'"/>');
	} else {
		$('#j-login-form').find('[name="additionalInfo"]').val(availableData);
	}
	sourceCode = getReqParam('source');
    if(location.search.indexOf("activityCode=") != -1 ) {
		$('#j-login-form').append('<input type="hidden" name="activity-code" value="' + getReqParam('activityCode') + '"/>');
	} else if ( location.search.indexOf("source=") != -1 ) {
		if( getReqParam('source') === QRHFIFABKG || getReqParam('source') === FIFAMCRSTE ) {
			if( $('#j-login-form').find('[name="activity-code"]').length == 0 ) {
				$('#j-login-form').append('<input type="hidden" name="activity-code" value="FIFA"/>');
			} else {
				$('#j-login-form').find('[name="activity-code"]').val('FIFA');
			}
		} else {
			if( $('#j-login-form').find('[name="activity-code"]').length === 0 ) {
				$('#j-login-form').append('<input type="hidden" name="activity-code" value="' + sourceCode +'"/>');
			} else {
				$('#j-login-form').find('[name="activity-code"]').val(sourceCode);
			}
		}
	} else {
        var cookieParamVal = getLoginReqCookieParam('activityCode');
        cookieParamVal= (cookieParamVal === false ? '':cookieParamVal);
		$('#j-login-form').append('<input type="hidden" name="activity-code" value="' + cookieParamVal + '"/>');
	}
	

if(unameValue !== "" && pwdVal !== ""){
	$('#loginErrorBlock .input-base-msg-box').hide();
	if('' === loginRequest) {
		loginRequest = null;
	}
	if( isMobileApp() ){
		$('#j_platform').val(mobilePlatform);
	}
	var loginRequestCookie = $.parseJSON(loginRequest);
            //console.log("No errors!");
			validUname = false;
			//alert(unameValue);
			if(unameValue.indexOf("@") !== -1){
				//console.log("inside att");
				var validUname = validateEmail(unameValue);
				if(!validUname){
					//var errorValue = getErrorValue("102");
					var errorValue = getErrorMessage("Invalid_Email", localeErrorCode);
					if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
						digitalData.page.pageInfo.pageType = 'LOGIN_INVALID_EMAIL';
					}
					errorClick(window.location.href, 'login-email', loginUserType, 'LOGIN_INVALID_EMAIL');
				} else{
					loginUserNameType = 'email';
				}
			}else{
				validUname = validateQmileNumber(unameValue);
				if(!validUname){
					//var errorValue = getErrorValue("103");
					var errorValue = '';
					if(location.search.indexOf("activityCode=SME") != -1 ) {
						errorValue = getErrorMessage("Invalid_Email", localeErrorCode);
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'SME_LOGIN_INVALID_EMAIL';
						}
						errorClick(window.location.href, 'sme-login-email', loginUserType, 'SME_LOGIN_INVALID_EMAIL');
					} else {
						errorValue = getErrorMessage("Invalid_Qmiles", localeErrorCode);
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'LOGIN_INVALID_FFP_NO';
						}
						errorClick(window.location.href, 'login-ffp', loginUserType, 'LOGIN_INVALID_FFP_NO');
					}
					//alert(errorValue);
				} else{
					loginUserNameType = 'ffpNumber';
				}
			}
			if(!validUname){
				$('#loginErrorBlock #errorId').html(errorValue);
	            $('#loginErrorBlock .input-base-msg-box').show().focus();

			}else{
				//alert(j_destination);
				    $('#loginErrorBlock .input-base-msg-box').hide();
				    $("#j_submitType").val("DIRECT");
					//$("#j-login-form").attr('class','spinner-active');
				    var $spinner_offer = $('#global-spinner-container.spinner-overlay');
			       showSpinnerMobileApp( $spinner_offer,'spinner-full-page');
					//alert("Acitvated ");
			if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
				if($('#j-login-form').find('#CP_L_TYPE').length == 0 ) {
					$('#j-login-form').append('<input type="hidden" value="BOT" name="CP_L_TYPE" id="CP_L_TYPE"/>');
				} else {
					$('#j-login-form').find('#CP_L_TYPE').val('BOT');
				}
			}
			// cp_l_Type for google catpcha 
			if( $('#FFP_CAPTCHA_LOGIN').val() === 'GOOGLE' ) {
				if($('#j-login-form').find('#CP_L_TYPE').length == 0 ) {
					$('#j-login-form').append('<input type="hidden" value="GOOGLE" name="CP_L_TYPE" id="CP_L_TYPE"/>');
				} else {
					$('#j-login-form').find('#CP_L_TYPE').val('GOOGLE');
				}
			}
			ajaxLoginCall(false);
	}
        }else{
			if( $('#FFP_CAPTCHA_LOGIN').val() === 'GOOGLE' ) {
				if( typeof grecaptcha === 'undefined' ) {
					$('body').append('<script src="https://www.recaptcha.net/recaptcha/api.js?onload=reCaptchaLoad&render=explicit&hl=' + pageLocale + '"></script>');
				} else {
					grecaptcha.reset();
				}
			} else if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
									$('#login-botdetect-captcha').parent().removeClass('hide');
				if( typeof loginBotCaptcha !== 'undefined' ) {
					try{
						loginBotCaptcha.reloadImage();
					} catch(err){}
				} else if( typeof loginBotCaptcha === 'undefined' ) {
					if( $('#FFP_CAPTCHA_LOGIN').val() === 'BOT' ) {
						loginCaptchaBot = $('#login-botdetect-captcha').captcha({
							captchaEndpoint: '/qr/bot/botqrwebcaptcha'
						});
					}
				}
			} 
            //var errorValue = getErrorValue("101");
			var currentPage = $('#isProd').attr('current-page-path');
			var pageName = '';
			if(currentPage  !== undefined && currentPage !== ''){
				pageName = currentPage.substr(currentPage.lastIndexOf('/') + 1);
				pageName = pageName.replace('.html','');
			}
			//addErrorInfo("login","Username and password can not be blank","error tracking",pageName);
        	var errorValue = getErrorMessage("Blank_Fields", localeErrorCode);
            $('#loginErrorBlock #errorId').html(errorValue);
            $('#loginErrorBlock .input-base-msg-box').show().focus();
            if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
            	digitalData.page.pageInfo.pageType = 'LOGIN_BLANK_FIELDS';
            }
			errorClick(window.location.href, 'login', loginUserType, 'LOGIN_BLANK_FIELDS');
            //console.log("101 is: ",errorValue);             
        } 
		} catch(err) {}
}
/*var faceBookId = getServiceURL('faceBookDevKey', function(propertyValue){
	 //console.log('faceBookId:fbAsyncInit:', propertyValue);
    window.fbAsyncInit = function() {
    FB.init({
    	appId      : propertyValue,
      xfbml      : true,
      version    : 'v2.8'
    });
    FB.AppEvents.logPageView();
                
  };
	//return propertyValue;
});*/
//console.log('faceBookId:outside:', faceBookId);
//alert(faceBookId);
/*window.fbAsyncInit = function() {
    //console.log('faceBookId:', faceBookId);
                
  };*/

 function validateEmail(username){
	 try {
 var atpos = username.indexOf("@");
    var dotpos = username.lastIndexOf(".");
    if (atpos<1 || dotpos<atpos+2 || dotpos+2>=username.length) {		
        //alert("Not a valid e-mail address");
		//console.log("username is not a number:" , username);
        return false;
    }else {
		return true;
	}
	} catch(err) {}
  }
  
 function validateQmileNumber(username){
	 try {
   if (isNaN(username) || username.length > 9) {
		//console.log("username is not a number:" , username);
		return false;		
	}else{
		return true;
		} 
		} catch(err) {}
 }
 //Validate the Server error messages
/* function getErrorValue(keyValue){
  var errorDetails = "${signOnModel.errorDetailsString @context='scriptString'}";
 var obj = JSON.parse(errorDetails);
           //console.log("errorDetails", obj);
           for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                var val = obj[key];
                 if(key == keyValue){
				  return val;
				 
				 }
				 
				 }else{
					 //console.log("Key Value Not configured ", keyValue); 
				 }
				 
				 }
 }*/

function clearGrabInfo() {
	localStorage.removeItem("grabid:login_return_uri");
	localStorage.removeItem("grabid:code");
	localStorage.removeItem("grabid:nonce");
	localStorage.removeItem("grabid:state");
	localStorage.removeItem("grabid:code_verifier");
	localStorage.removeItem("grabid:access_token");
	localStorage.removeItem("grabid:id_token");
}


function logout(){
	if( localStorage.getItem("sessionLastAcitivity") != undefined || localStorage.getItem("sessionLastAcitivity") != null ){
		localStorage.removeItem("sessionLastAcitivity");
	}
	if( sessionStorage.getItem("profilePicImage") != undefined || sessionStorage.getItem("profilePicImage") != null ){
		sessionStorage.removeItem("profilePicImage");
	}
	
	try {
        clearGrabInfo();
		deleteCookie('swiftLinkStatus');
		userProgramCode = getUserBasicInfoField('programCode');
		if( $('#isLateLogout').val() != 'on') {
			showSpinnerMobileApp($('#global-spinner-container'), 'spinner-active');
		}
		if($('#isPublishInstance').val() == 'true' ){
			var componentMethod = '';
			if($('#j_socilMediaValue').val() == 'GOOGLE'){ 
				componentMethod = 'email';
			}else if($('#j_socilMediaValue').val() == 'FACEBOOK'){
				componentMethod = 'facebook';
			}else if($('#j_socilMediaValues').val() == 'TWITTER'){
				componentMethod = 'twitter';
			}else{
				componentMethod = 'social';
			}
			addComponentPageEvent(eventName,'logged out',componentMethod,getCurrentPageName());
			
			logOutRedirectionFetcher();

		}
		
	} catch(err) {}
}

function setPortalAndFFPUrl() {
	var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
	qmilesSiteCookieValue = qmilesSiteCookieValue === null ? "new" : qmilesSiteCookieValue;
	//console.log('qmilesSiteCookieValue:' + qmilesSiteCookieValue);
	if(null !== qmilesSiteCookieValue && '' !== qmilesSiteCookieValue && typeof qmilesSiteCookieValue !== 'undefined') {
		var isResponsiveView = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);			
		if(isResponsiveView && 'old' == qmilesSiteCookieValue) {
			qmilesSiteCookieValue = 'new';
		}
		var megaMenuConfigPagePath = $('#megaMenuConfigPagePath').val();
		var componentPath = 'qrweb/components/content/personalized-flyout';
		var parentNodeName = 'signonheader';
		if('new' === qmilesSiteCookieValue) {
			privilegeClubDashboardURL = $('#new-privilege-club-dashboard-URL').val();
			portalDashboardURL = $('#new-portal-dashboard-URL').val();
			studentDashboardURL = $('#new-student-dashboard-URL').val();
		} else if('old' === qmilesSiteCookieValue) {
			privilegeClubDashboardURL = $('#old-privilege-club-dashboard-URL').val();
			portalDashboardURL = $('#old-portal-dashboard-URL').val();
			studentDashboardURL = $('#old-student-dashboard-URL').val();
		} else if('other' === qmilesSiteCookieValue) {
			privilegeClubDashboardURL = $('#global-privilege-club-dashboard-URL').val();
			portalDashboardURL = $('#global-portal-dashboard-URL').val();
			studentDashboardURL = $('#global-student-dashboard-URL').val();
		} else if('other-en' === qmilesSiteCookieValue) {
			privilegeClubDashboardURL = $('#english-privilege-club-dashboard-URL').val();
			portalDashboardURL = $('#english-portal-dashboard-URL').val();
			studentDashboardURL = $('#english-student-dashboard-URL').val();
		}
	}
}

$(document).ready(function(){

	setPortalAndFFPUrl();
	
	try {
	$('#reset-password').addClass('hide');
    if(isLoggedIn){
        $('.is-not-logged').css("display", "none");
		$('.is-logged').css("display", "block");
    }

    $('#forgot-password-link').on('click', function(){
		try {
        $('#loginErrorBlock .input-base-msg-box').hide();
        $('.forgetPasswordInputForm, .forgetPasswordSendButton').removeClass('hide');
		if(isSMELoginPage) {
			$('.forgetPasswordNote ').removeClass('hide');
		} else {
			var tgtCookie = getCookieValueAsIs('tgtCookie');
			if(tgtCookie !== null && tgtCookie !== '' && tgtCookie === 'veriCode'){
				$('.forgetPasswordNote ').removeClass('hide');
			} else {
				$('.qrpc-forgetPasswordNote').removeClass('hide');
			}
		}
        $('.forgotPasswordUserName').val('');
        $('.forgetPasswordSuccessMessage, .forgetPasswordErrorMessage,.forgetPasswordNoInputErrorMessage').addClass('hide');
		$('.forgetPasswordSuccessMessage').closest('.sucsmsg-bar').addClass('hide');
        $('.forgetPasswordErrorMessage').closest('.error-box').addClass('hide');
		$('.forgetPasswordNoInputErrorMessage').closest('.error-box').addClass('hide');
		setTimeout(function() {
			$('.back-to-login').closest('.form-action').parent().css({'visibility':'visible'});
			if( typeof window.qrServiceRef === 'undefined' ) {
				var scriptLoaderPath = $('#login-clientlib-js script').attr('src');
				scriptLoaderPath = scriptLoaderPath.replace('login-clientlibs','angular');
				var angularElement = '<script src="'+scriptLoaderPath+'" type="text/javascript"></script>';document.createElement("script");
					
				$('body').append(angularElement);
			}
		}, 500);
		var unameValue = $('.usernameField').val();
		if(unameValue !== '' && unameValue !== undefined){
			$('#f1002').val(unameValue);
			$('.forgetPasswordInputForm').addClass('filled');
		}
        $('#forgot-password').addClass('flip-side-1').removeClass('flip-side-2');
		$('#j-login-form, #enter-otp, #update-new-password').addClass('flip-side-2').removeClass('flip-side-1');
		buttonClickAction(window.location.href, 'forgot-password', loginUserType);
		} catch(err) {}
    });
	} catch(err) {}
	
	
});


function logoutRedirection(isCUGLogin) {
	var userType = getUserBasicInfoField('programCode');	
	var portalUserLogoutPage = '';
	var privilegeClubUserLogoutPage = '';
	var finalLogoutLink = "";
	var isTradePartners = $('#page-path').val()!=undefined ? $('#page-path').val().includes("/tradepartner"):false;

	if( isCUGLogin ) {
	
	//var isCUGEnabled = $('#isCUGEnabled').val();
	
	//if ( typeof isCUGEnabled !== 'undefined' || isCUGEnabled !== '' ) {
		var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
		//console.log('qmilesSiteCookieValue:' + qmilesSiteCookieValue);
		var isPublish = $('#isPublish').val();
		if(isPublish == 'true') {
			if( $('#isPostLoginRedirectionRequired').val() == 'true' ) {
				$('#loginHeader a')[0].click();
				return true;
			}
		}
		var isResponsiveView = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);			
		if(isResponsiveView && 'old' == qmilesSiteCookieValue) {
			qmilesSiteCookieValue = 'new';
		}
		if('QRPC' == userType) {
			if('new' === qmilesSiteCookieValue) {
				privilegeClubUserLogoutPage = $('#newPrivilegeClubUserLogoutURL').val();				
			} else if('old' === qmilesSiteCookieValue) {
				privilegeClubUserLogoutPage = $('#oldPrivilegeClubUserLogoutURL').val();
			} else if('other' === qmilesSiteCookieValue) {
				privilegeClubUserLogoutPage = $('#globalPrivilegeClubUserLogoutURL').val();
			} else if('other-en' === qmilesSiteCookieValue) {
				privilegeClubUserLogoutPage = $('#englishPrivilegeClubUserLogoutURL').val();
			}
			
			finalLogoutLink = privilegeClubUserLogoutPage;
				
		} else if('PORTAL' == userType) {
			if('new' === qmilesSiteCookieValue) {
				portalUserLogoutPage = $('#newPortalUserLogoutURL').val();				
			} else if('old' === qmilesSiteCookieValue) {
				portalUserLogoutPage = $('#oldPortalUserLogoutURL').val();
			} else if('other' === qmilesSiteCookieValue) {
				portalUserLogoutPage = $('#globalPortalUserLogoutURL').val();
			} else if('other-en' === qmilesSiteCookieValue) {
				portalUserLogoutPage = $('#englishPortalUserLogoutURL').val();
			} else if('mobile-old' === qmilesSiteCookieValue) {
				portalUserLogoutPage = $('#mobilePortalUserLogoutURL').val();
			}
			
			finalLogoutLink = portalUserLogoutPage;

		} else if('QRBB' == userType) {
			var smeUserLogoutPage = $('#smeLogoutLink').val();

			finalLogoutLink = smeUserLogoutPage;
								}
			if('NCP' == userType) {
            	var ncpUserLogoutPage = $('#ncpLogoutLink').val();

            	finalLogoutLink = ncpUserLogoutPage;
            					}
		if( $('#join-form').length ){
			var pathName = location.pathname;
			finalLogoutLink = pathName;
							}
		if(isTradePartners){
			 finalLogoutLink = $('#tradepartnerhomepagerdurl').val();
		}

		if( finalLogoutLink === '' || finalLogoutLink === undefined || finalLogoutLink === null ) {
			finalLogoutLink = $('#mmCurrentPage').val();
						}
		if( finalLogoutLink.indexOf('.html') == -1 ) {
			finalLogoutLink = finalLogoutLink + ".html";
					}
		/*if( $('#qMilesComponentContainer #f401').length ) {
			$('#qMilesComponentContainer #f401').val('all').trigger('change');
			offersLogoutTrigger();
		}*/
		//return finalLogoutLink;

	} else {
		finalLogoutLink = $('#landed-page-path').val();
		if( finalLogoutLink.indexOf('.html') == -1 ) {
			finalLogoutLink = finalLogoutLink + ".html";
			}
	}
	$.ajax({
		url: '/qr/getShortURL?pagePath=' + finalLogoutLink.replace('.html',''),
		type: 'get',
		contentType: 'application/json; charset=utf-8',
		dataType: 'json',
		async: false,
		cache: false,
		success: function(shortURLResponse) {				
			var shortURL = shortURLResponse['shortURL'];
			shortURL = shortURL.replace(window.location.origin,'');
			shortURL = shortURL.indexOf('.html') == -1 ? shortURL+".html" : shortURL;
			var logoutLink = '/qr/Logout?logOut=logOut&resource='+shortURL;
			if(isTradePartners){
				var sessionToken = getFFPCookieValue("QRTOKEN");
				$('body').append('<form action="/qr/tpLogout" id="logoutFormSubmission" target="_self" method="post" class="hide"><input type="hidden" id="resource" name="resource" value="'+shortURL+'"/><input type="hidden" id="sessionId" name="sessionId" value="'+sessionToken+'"><input type="hidden" id="logOut" name="logOut" value="logOut"><input type="hidden" name="type" value="INTERNAL"><input type="submit" value="Submit">');
			}else{
			$('body').append('<form action="/qr/Logout" id="logoutFormSubmission" target="_self" method="post" class="hide"><input type="hidden" id="resource" name="resource" value="'+shortURL+'"/><input type="hidden" id="logOut" name="logOut" value="logOut"><input type="submit" value="Submit">');
			}
			document.getElementById("logoutFormSubmission").submit();
		},
		error: function(data) {
			var logoutLink = '/qr/Logout?logOut=logOut&resource='+finalLogoutLink;
			$('body').append('<form action="/qr/Logout" id="logoutFormSubmission" target="_self" method="post" class="hide"><input type="hidden" id="resource" name="resource" value="'+finalLogoutLink+'"/><input type="hidden" id="logOut" name="logOut" value="logOut"><input type="submit" value="Submit">');
        	deleteCookie('companion');
			document.getElementById("logoutFormSubmission").submit();
		}
	});
		
		
	/*$('body').append('<a href="'+logoutLink+'" id="logoutRedirectionLink"/>');
	$('#logoutRedirectionLink')[0].click();*/
}

function logOutRedirectionFetcher(){
	try {

		document.cookie = 'otpTriggered=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/';
		var pageurl = $('#landed-page-path').val();

				$.ajax({
					type : 'get',
					url : pageurl+'.json',
					success: function(data) {  
					console.log(data["jcr:mixinTypes"]);
						var dataMixin = JSON.stringify(data["jcr:mixinTypes"]);
						if( dataMixin != undefined && dataMixin.indexOf('rep:CugMixin') != -1 ) {
					logoutRedirection(true);
						} else {
					logoutRedirection(false);
								}
					},
					error : function() {
							alert("Error");
					}
				});
				

	//}
	} catch(err) {}

	}


function parseUri (str) {
	var	o   = parseUri.options,
		m   = o.parser[o.strictMode ? "strict" : "loose"].exec(str),
		uri = {},
		i   = 14;

	while (i--) uri[o.key[i]] = m[i] || "";

	uri[o.q.name] = {};
	uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
		if ($1) uri[o.q.name][$1] = $2;
	});

	return uri;
};

parseUri.options = {
	strictMode: false,
	key: ["source","protocol","authority","userInfo","user","password","hostname","port","relative","path","directory","file","query","anchor"],
	q:   {
		name:   "queryKey",
		parser: /(?:^|&)([^&=]*)=?([^&]*)/g
	},
	parser: {
		strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
		loose:  /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
	}
};


function getOauthCodeFromService() {
	
	var serviceAuthorizationCode = $('#serviceAuthorizationCode').val();
	if( serviceAuthorizationCode == undefined || serviceAuthorizationCode == '' || serviceAuthorizationCode === null ) { return false;}
	
	var serviceAuthRequest = {
		"customerProfileId": getUserBasicInfoField('customerProfileId'),
		"partnerCode": partnerCode,
		"clientId":partnerClientId
	}
	
	req_headers['Authorization'] = 'Bearer '+getFFPCookieValue('QRTOKEN');

	window.qrServiceRef.zone.run(function () {
		window.qrServiceRef.postReq(serviceAuthorizationCode, serviceAuthRequest, req_headers, '', {}).then(function(response) {
			if( response.errorObject === undefined ) {
				var accessToken = response.authorizationCode;
				var responseJson = {
					accessToken : accessToken,
					state : partnerState,
					partnerId : partnerClientId
				};
				var redirectUrlPostLogin = partnerRedirectUrl+"?code="+accessToken+"&state="+partnerState;
				window.location =redirectUrlPostLogin;
				//window.opener.postMessage(responseJson, '*');
				//window.close();
			}
		});
	});
}


function validateLinkBRedirect(linkValue,isFormSubmit) {
	var pat = /^(http|https):\/\/[^ "]+$/;
	var isAlphabet = /^[A-Za-z]+$/;
	var isValidUrl = false;
	setPortalAndFFPUrl();
		if (pat.test(linkValue)) {
			//absolute url 
			var travelShopURL = $('#travel-shop-uri').val();
			var travelUrl = parseUri(travelShopURL);
			var travelUrlHostName = travelUrl.hostname;
			var url = parseUri(linkValue);
			var urlHostName = url.hostname;
			var urlDomainMatcher = linkValue.substr(0, parseInt( linkValue.indexOf(urlHostName) + urlHostName.length ) + 1);
			if( isFormSubmit || location.search.indexOf('resource=') != -1 || document.referrer === '') {

				$.ajax({
					url:'/qr/qrweb/loginvalidator',
					data: { 'dataUrl' : isFormSubmit ? linkValue : 'EMPTY' },
					success:function(data, textStatus, xhr) {
						console.log(xhr.status);
						var statusCode = xhr.status % 200;
						if( statusCode !== 0 ) {
							var userType = getUserBasicInfoField('programCode');
							//var portalDashboardURL = $('#portalDashboardPage').val();//For login page
							//var privilegeClubDashboardURL = $('#privilegeClubDashboardPage').val();//For login page
							var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
							//console.log('qmilesSiteCookieValue:' + qmilesSiteCookieValue);
							var privilegeClubDashboardURL = '';
							var portalDashboardURL = '';
							var studentDashboardURL = '';
							if(null !== qmilesSiteCookieValue && '' !== qmilesSiteCookieValue && typeof qmilesSiteCookieValue !== 'undefined') {
								var isResponsiveView = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);			
								if(isResponsiveView && 'old' == qmilesSiteCookieValue) {
									qmilesSiteCookieValue = 'new';
								}
								var megaMenuConfigPagePath = $('#megaMenuConfigPagePath').val();
								var componentPath = 'qrweb/components/content/personalized-flyout';
								var parentNodeName = 'signonheader';
								if('new' === qmilesSiteCookieValue) {
									privilegeClubDashboardURL = $('#new-privilege-club-dashboard-URL').val();
									portalDashboardURL = $('#new-portal-dashboard-URL').val();
									studentDashboardURL = $('#new-student-dashboard-URL').val();
								} else if('old' === qmilesSiteCookieValue) {
									privilegeClubDashboardURL = $('#old-privilege-club-dashboard-URL').val();
									portalDashboardURL = $('#old-portal-dashboard-URL').val();
									studentDashboardURL = $('#old-student-dashboard-URL').val();
								} else if('other' === qmilesSiteCookieValue) {
									privilegeClubDashboardURL = $('#global-privilege-club-dashboard-URL').val();
									portalDashboardURL = $('#global-portal-dashboard-URL').val();
									studentDashboardURL = $('#global-student-dashboard-URL').val();
								} else if('other-en' === qmilesSiteCookieValue) {
									privilegeClubDashboardURL = $('#english-privilege-club-dashboard-URL').val();
									portalDashboardURL = $('#english-portal-dashboard-URL').val();
									studentDashboardURL = $('#english-student-dashboard-URL').val();
								}
							}							
							if('QRPC' == userType) {
								if(getUserBasicInfoField('category') === 'STUDENT'){
									linkValue = studentDashboardURL.indexOf('html') != -1 ? studentDashboardURL : studentDashboardURL+'.html';
								} else {
								linkValue = privilegeClubDashboardURL.indexOf('html') != -1 ? privilegeClubDashboardURL : privilegeClubDashboardURL+'.html';
								}
							} else if('PORTAL' == userType) {
								linkValue = portalDashboardURL.indexOf('html') != -1 ? portalDashboardURL : portalDashboardURL+'.html';
							}
							isFormSubmit = false;
						}
						if( isPartnerFlow ) {
							getOauthCodeFromService();
						} else if( !isFormSubmit || location.search.indexOf('RDMHTLSTAY') != -1 || location.search.indexOf('RDMCARNTL') != -1 || isFifaFlow ) {
							if( !isFormSubmit && linkValue.indexOf('/postLogin') == -1 ) {
								linkValue = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC' && linkValue.indexOf('.onboardpopup.') === -1 ? linkValue.replace('.html','.onboardpopup.html') : linkValue;
							} else if( !isFormSubmit ) {
								linkValue = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC' && linkValue.indexOf('.swiftpopup.') === -1  ? linkValue.replace('.html','.swiftpopup.html') : linkValue; 
							}
							window.location = linkValue; 
						} else {
							$('#j-cookie-call-back-url-form').attr('action', linkValue);
							$('#j-cookie-call-back-url-form').submit();
						}
					},
					error: function(response) {
					}
				});

			} else {
				var userType = getUserBasicInfoField('programCode');
				//var portalDashboardURL = $('#portalDashboardPage').val();//For login page
				//var privilegeClubDashboardURL = $('#privilegeClubDashboardPage').val();//For login page
				var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
				//console.log('qmilesSiteCookieValue:' + qmilesSiteCookieValue);
				var privilegeClubDashboardURL = '';
				var portalDashboardURL = '';
				var studentDashboardURL = '';
				if(null !== qmilesSiteCookieValue && '' !== qmilesSiteCookieValue && typeof qmilesSiteCookieValue !== 'undefined') {
					var isResponsiveView = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);			
					if(isResponsiveView && 'old' == qmilesSiteCookieValue) {
						qmilesSiteCookieValue = 'new';
					}
					var megaMenuConfigPagePath = $('#megaMenuConfigPagePath').val();
					var componentPath = 'qrweb/components/content/personalized-flyout';
					var parentNodeName = 'signonheader';
					if('new' === qmilesSiteCookieValue) {
						privilegeClubDashboardURL = $('#new-privilege-club-dashboard-URL').val();
						portalDashboardURL = $('#new-portal-dashboard-URL').val();
						studentDashboardURL = $('#new-student-dashboard-URL').val();
					} else if('old' === qmilesSiteCookieValue) {
						privilegeClubDashboardURL = $('#old-privilege-club-dashboard-URL').val();
						portalDashboardURL = $('#old-portal-dashboard-URL').val();
						studentDashboardURL = $('#old-student-dashboard-URL').val();
					} else if('other' === qmilesSiteCookieValue) {
						privilegeClubDashboardURL = $('#global-privilege-club-dashboard-URL').val();
						portalDashboardURL = $('#global-portal-dashboard-URL').val();
						studentDashboardURL = $('#global-student-dashboard-URL').val();
					} else if('other-en' === qmilesSiteCookieValue) {
						privilegeClubDashboardURL = $('#english-privilege-club-dashboard-URL').val();
						portalDashboardURL = $('#english-portal-dashboard-URL').val();
						studentDashboardURL = $('#english-student-dashboard-URL').val();
					}
				}							
				if('QRPC' == userType) {
					if(getUserBasicInfoField('category') === 'STUDENT'){
						linkValue = studentDashboardURL.indexOf('html') != -1 ? studentDashboardURL : studentDashboardURL+'.html';
					} else {
					linkValue = privilegeClubDashboardURL.indexOf('html') != -1 ? privilegeClubDashboardURL : privilegeClubDashboardURL+'.html';
					}
				} else if('PORTAL' == userType) {
					linkValue = portalDashboardURL.indexOf('html') != -1 ? portalDashboardURL : portalDashboardURL+'.html';
				}
				window.location = linkValue;
			}
		}
		else if(!((linkValue.startsWith("http://")) && (isAlphabet.test(linkValue.split(".")[0].split("http://")[1]))) || ((linkValue.startsWith("https://")) && (isAlphabet.test(linkValue.split(".")[0].split("https://")[1]))) ){
			var userType = getUserBasicInfoField('programCode');
			if('QRPC' == userType) {
				if(getUserBasicInfoField('category') === 'STUDENT'){
					linkValue = studentDashboardURL.indexOf('html') != -1 ? studentDashboardURL : studentDashboardURL+'.html';
				} else {
				linkValue = privilegeClubDashboardURL.indexOf('html') != -1 ? privilegeClubDashboardURL : privilegeClubDashboardURL+'.html';
				}
				} 
			else if('PORTAL' == userType) {
				linkValue = portalDashboardURL.indexOf('html') != -1 ? portalDashboardURL : portalDashboardURL+'.html';
				}
				isFormSubmit = false;
				window.location = linkValue;
		}
		/*if( !isFormSubmit ) {
			window.location = linkValue;
		} else {
			$('#j-cookie-call-back-url-form').attr('action', linkValue);
			$('#j-cookie-call-back-url-form').submit();
		}*/
	
}

function fifaRedirectionMethod(fifaRedirectUrl) {
	
	var pat = /^(http|https):\/\/[^ "]+$/;
	if (pat.test(fifaRedirectUrl)) {
		validateLinkBRedirect(fifaRedirectUrl,true);
	} else {
		$.ajax({
			url: '/qr/getShortURL?pagePath=' + fifaRedirectUrl,
			type: 'get',
			contentType: 'application/json; charset=utf-8',
			dataType: 'json',
			async: false,
			cache: false,
			success: function(shortURLResponse) {				
				var shortURL = shortURLResponse['shortURL'];
				validateLinkBRedirect(shortURL,true);
			}
		});
	}
}

function afterCookieRedirection() {
	try {
	if( getActualCookieValue('ED') != null  && getActualCookieValue('ED') != undefined ) { 
		var linkValue = getActualCookieValue('ED');
		document.cookie = "ED"+ "=" +"null"+ ";" + "expires="+ new Date(new Date().getTime()-60*60*1000*24).toGMTString()+";path=/";
		validateLinkBRedirect(linkValue,false);
		return false;
	}
	
	var isParamExists = location.search.indexOf('?');
	var resourcePagePath = '';
	var activityCodeParam = '';
	var isNSPUpgrade = false, resourceReqParamsInfo = '';
	var tsURL = '', fifaRedirectUrl = '',fifaSrc = '', redirectUrl = '';
	if(isParamExists != -1){
		var requestParamsInfo = location.search.split('?')[1];
		var requestParams = requestParamsInfo.split('&');
		$.each(requestParams, function(key, value) {
			if(value.indexOf('resource=') != -1){
				resourcePagePath = value.split('=')[1];
			}
            if(value.indexOf('activityCode=') != -1){
				activityCodeParam = value.split('=')[1];
			}
			if(value.indexOf('redirectUri=') != -1){
            	tsURL = value.split('=')[1];
				tsURL = decodeURIComponent(tsURL);
			}
			if(value.indexOf('redirectUrl=') != -1){
            	fifaRedirectUrl = value.split('=')[1];
				fifaRedirectUrl = decodeURIComponent(fifaRedirectUrl);
				redirectUrl = fifaRedirectUrl;
			}
			if(value.indexOf('source=') != -1){
            	fifaSrc = value.split('=')[1];
				fifaSrc = decodeURIComponent(fifaSrc);
			}
			
		});
		var requestParamsInfoArr = location.search.split('?');
		if(requestParamsInfoArr.length === 3){
			var resourceParamVal = location.search.substr(1);
			if(resourceParamVal.indexOf('?') !== -1){
				resourcePagePath = resourceParamVal.split('resource=')[1];
				if(resourcePagePath != undefined){
					resourceReqParamsInfo = resourcePagePath.split('?')[1];
					var resourceReqParams = resourceReqParamsInfo.split('&');
					$.each(resourceReqParams, function(key, value) {
						if(value.indexOf('activityCode=') != -1){
							if(value.split('=')[1] === 'NSPBTM') {
								isNSPUpgrade = true;
							}
						}
					});
				}
			}
		}
		if(resourcePagePath === undefined){
			resourcePagePath = '';
		}
	}
	if(resourcePagePath.startsWith('%2Fcontent')){
		resourcePagePath = decodeURIComponent(resourcePagePath);
	}
	if(!resourcePagePath.startsWith('/content')) {
		var domain = getHostName(resourcePagePath);
		if(domain.indexOf('qatarairways.com') === -1){
			resourcePagePath = '';
		}
	}
	//var resourcePagePath = $('#resource-page-path').val();

	//console.log('resourcePagePath:' + resourcePagePath);
	var qcalAdultsParam = $('#qcal-adults-param').val();
	//console.log('qcalAdultsParam:' + qcalAdultsParam);
	var callBackUrl = $('#call-back-url').val();
	//console.log('callBackUrl:' + callBackUrl);
	var loginRequestCookieData = getFFPCookieValue('loginRequest');
	//console.log('loginRequestCookieData:' + loginRequestCookieData);
	if((getUserBasicInfoField('programCode') === 'PORTAL'  && !isNSPUpgrade) || isFPFlow){
		resourcePagePath = '';
	}
	var partnerActivityCodes = $('#allowed-partlogin-codes').val();
	if ( partnerActivityCodes != undefined && partnerCode != '' && partnerActivityCodes.indexOf(partnerCode) != -1 ) {
		if( getUserBasicInfoField('programCode') === 'PORTAL' ) {
			handlePortalUser();
			return false;
		} else {
			validateLinkBRedirect(partnerRedirectUrl, true);
		}
	} else if(resourcePagePath !== '') {
		isRedirected = triggerEmailValidation();
		if(isRedirected){
			return;
		}
		if(getUserBasicInfoField('category') === 'STUDENT' && $('#profile-otp-modal').length === 0) {
			var isProfileCompleteSerURL = $('#isProfileCompleteSerURL').val();
			var isProfileCompleteSerReq = {
				'customerProfileId' : getUserBasicInfoField('customerProfileId')
			};
			$.ajax({
				url: isProfileCompleteSerURL,
				type: 'POST',
				contentType: 'application/json; charset=utf-8',
				dataType: 'json',
				data: JSON.stringify(isProfileCompleteSerReq),
				headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
				cache: false,
				success: function(response) {
					var errorObject = response.errorObject;
					if(errorObject === undefined && response.studentCompleteness === 'INCOMPLETE') {
						var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
						if('new' === qmilesSiteCookieValue) {
							window.location = $('#new-qrpc-sc-profile-URL').val();
						} else if('old' === qmilesSiteCookieValue) {
							window.location = $('#old-qrpc-sc-profile-URL').val();
						} else if('other' === qmilesSiteCookieValue) {
							window.location = $('#global-qrpc-sc-profile-URL').val();
						} else if('other-en' === qmilesSiteCookieValue) {
							window.location = $('#english-qrpc-sc-profile-URL').val();
						}
					}
				}
			});
		}
		$.ajax({
			url: '/qr/getShortURL?pagePath=' + resourcePagePath,
			type: 'get',
			contentType: 'application/json; charset=utf-8',
			dataType: 'json',
			async: false,
			cache: false,
			success: function(shortURLResponse) {				
				var shortURL = shortURLResponse['shortURL'];
				if( resourcePagePath.indexOf('isQcalRed') != -1 ) {
					shortURL = resourcePagePath;
				} else if (isNSPUpgrade) {
					shortURL = shortURL.substr(0,shortURL.indexOf('?')) + '?' + resourceReqParamsInfo;
				}
				var queryCal = window.location.search.substring(1);
				var qresourceURLCal = queryCal.replace('resource=','');
				var qIndex = qresourceURLCal.indexOf('isQcalRed');
				if(shortURL !== undefined && shortURL !== '' && shortURL != resourcePagePath) {
					var isQueryParamAvailable = (shortURL.indexOf('?') === - 1);
					if( shortURL.indexOf('/postLogin') == -1 ) {
						shortURL = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC' && shortURL.indexOf('.onboardpopup.') === -1   ? shortURL.replace('.html','.onboardpopup.html') : shortURL;
					} else {
						shortURL = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC'  && shortURL.indexOf('.swiftpopup.') === -1  ? shortURL.replace('.html','.swiftpopup.html') : shortURL; 
					}
					var url = isQueryParamAvailable ? shortURL+'?qr_'+new Date().getTime() : shortURL + '&qrpl_'+new Date().getTime();
					validateLinkBRedirect(url,false);
					
				} else if( (qcalAdultsParam !== undefined && qcalAdultsParam !== '') ||  qIndex !== -1 ) {
					var resourceURL = (qIndex !== -1) ? (qresourceURLCal.substring(0,qIndex - 1)+window.location.hash) : queryCal;
					resourceURL = ( getUserBasicInfoField('programCode') == 'QRPC') ?  resourceURL : (getUserBasicInfoField('programCode') == 'PORTAL' ? portalDashboardURL+'.html#j-upgrade-portal-user' : '#');
					var anchorTag = '<a href="'+resourceURL+'" id="anchorLoginLink" target="_self"></a>';
					$('#j-call-back-url-form').append(anchorTag);
					$('#j-call-back-url-form').find('#anchorLoginLink')[0].click();
				} else {
					if( resourcePagePath.indexOf('/postLogin') == -1 ) {
						resourcePagePath = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC'  && resourcePagePath.indexOf('.onboardpopup.') === -1   ? resourcePagePath.replace('.html','.onboardpopup.html') : resourcePagePath;
					} else {
						resourcePagePath = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC'  && resourcePagePath.indexOf('.swiftpopup.') === -1   ? resourcePagePath.replace('.html','.swiftpopup.html') : resourcePagePath; 
					}
					if( window.location.href.slice(window.location.href.indexOf('?') + 1).split('&').length === 0 ) {
						validateLinkBRedirect(resourcePagePath+'?qr_'+new Date().getTime(),false);
						//window.location =  resourcePagePath+'?qr_'+new Date().getTime();
					} else {
						validateLinkBRedirect(resourcePagePath,false);
						//window.location =  resourcePagePath;
					}
				}
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				//console.error("Error while getting short URL");
				if( resourcePagePath.indexOf('/postLogin') == -1 ) {
					resourcePagePath = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC' && resourcePagePath.indexOf('.onboardpopup.') === -1 ? resourcePagePath.replace('.html','.onboardpopup.html') : resourcePagePath;
				} else {
					resourcePagePath = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC' && resourcePagePath.indexOf('.swiftpopup.') === -1 ? resourcePagePath.replace('.html','.swiftpopup.html') : resourcePagePath; 
				}
				if( window.location.href.slice(window.location.href.indexOf('?') + 1).split('&').length === 0 ) {
					validateLinkBRedirect(resourcePagePath+'?qr_'+new Date().getTime(),false);
					//window.location =  resourcePagePath+'?qr_'+new Date().getTime();
				} else {
					validateLinkBRedirect(resourcePagePath,false);
					//window.location =  resourcePagePath;
				}
			}
		});        
    } else if(callBackUrl !== '') {
		var paramsHTML = '';
        var query = window.location.search.substring(1);
		var params = query.split('&');
        for (var i = 0; i < params.length; i++) {
            var paramValuePair = params[i].split('=');
            paramsHTML += '<input type="hidden" value="' + paramValuePair[1] + '" name="' + paramValuePair[0] + '" />';
        }
		$('#j-cookie-call-back-url-form').empty();
		$('#j-cookie-call-back-url-form').append(paramsHTML);
		validateLinkBRedirect(callBackUrl,true);
        		
	} else if(null !== loginRequestCookieData && '' !== loginRequestCookieData && typeof loginRequestCookieData !== 'undefined' || activityCodeParam === 'QDF' || activityCodeParam === 'QMILES_RETRIEVE_BKG' ) {
		//console.log('loginRequest cookie exists');
		var activityCode, callBackURL;
		var isMobile = (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || navigator.userAgent.indexOf("Mobile") != -1);
		var nspLink = isMobile ?  $('#check-in-manage-mobile-link').val() : $('#check-in-manage-desktop-link').val(),
			ffpLabel = isMobile ? "ffp" : "ffpNo";
		if( null !== loginRequestCookieData && '' !== loginRequestCookieData && typeof loginRequestCookieData !== 'undefined' ) {
			var loginRequestCookieDataJSON = JSON.parse(loginRequestCookieData);
			activityCode = loginRequestCookieDataJSON[0].activityCode;
			callBackURL = loginRequestCookieDataJSON[0].callBackUrl;
			activityCode = ( activityCode === 'RETRIEVE_BKG' ) ? 'QMILES_RETRIEVE_BKG' : activityCode;
		} else {
			activityCode = activityCodeParam;
			callBackURL = (activityCodeParam === 'QDF') ?  $('#qdf-redirection-page').val(): nspLink;
		}
		
		//loginRequestCookieDataJSON = JSON.parse(loginRequestCookieDataJSON);	
		var paramsHTML = '';
		
		switch( activityCode ) {
			case "QDF" :
					paramsHTML += '<input type="hidden" value="' + getFFPCookieValue('QRTOKEN') + '" name="QRTOKEN" />';
					paramsHTML += '<input type="hidden" value="' + $('#page-locale').val() + '" name="selLang" />';
				break;
			case "QMILES_RETRIEVE_BKG" :
					paramsHTML += '<input type="hidden" value="' + $('#page-locale').val() + '" name="selLang" />';
					paramsHTML += '<input type="hidden" value="' + getUserBasicInfoField('ffpNumber') + '" name="'+ffpLabel+'" />';
					paramsHTML += '<input type="hidden" value="' + getUserBasicInfoField('lastName') + '" name="lastname" />';
				break;
			
		}
		//console.log('paramsHTML:' + paramsHTML);
		document.cookie = 'loginRequest=;path=/;domain=.qatarairways.com.qa';
		$('#j-cookie-call-back-url-form').empty();
		$('#j-cookie-call-back-url-form').append(paramsHTML);
		validateLinkBRedirect(callBackURL,true);
	}/* else if(activityCodeParam === 'QDF') {
		var paramsHTML = '<input type="hidden" value="' + getFFPCookieValue('QRTOKEN') + '" name="QRTOKEN" />';
		paramsHTML += '<input type="hidden" value="' + $('#page-locale').val() + '" name="selLang" />';
		$('#j-cookie-call-back-url-form').empty();
		$('#j-cookie-call-back-url-form').append(paramsHTML);
		validateLinkBRedirect($('#qdf-redirection-page').val(),true);
	} else if(activityCodeParam === 'QMILES_RETRIEVE_BKG') {
		var paramsHTML = '',
			isMobile = (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || navigator.userAgent.indexOf("Mobile") != -1);
		paramsHTML += '<input type="hidden" value="' + $('#page-locale').val() + '" name="selLang" />';
		var nspLink = isMobile ?  $('#check-in-manage-mobile-link').val() : $('#check-in-manage-desktop-link').val(),
		ffpLabel = isMobile ? "ffp" : "ffpNo";
		
		paramsHTML += '<input type="hidden" value="' + getUserBasicInfoField('ffpNumber') + '" name="'+ffpLabel+'" />';
		paramsHTML += '<input type="hidden" value="' + getUserBasicInfoField('lastName') + '" name="lastname" />';
		$('#j-cookie-call-back-url-form').empty();
        $('#j-cookie-call-back-url-form').append(paramsHTML);
        validateLinkBRedirect(nspLink,true);
	} */else if(activityCodeParam === 'ALMAHA') {
		var almahaURL = '';
		var requestParamsInfo = location.search.replace('?','');
		var requestParams = requestParamsInfo.split('&');
		var paramsHTML = '<input type="hidden" value="' + getFFPCookieValue('QRTOKEN') + '" name="QRTOKEN" />';
		$.each(requestParams, function(key, value) {
			if(value.indexOf('url=') != -1){
				var tempURL = value.split('url=')[1];
				almahaURL = tempURL.split('?')[0];
				var paramsList = tempURL.split('?')[1];
				var params = paramsList.split('&');
				var noOfParams = params.length;
				if (noOfParams === 1){
					paramsHTML += '<input type="hidden" value="' + params[0].split('=')[1] + '" name="' + params[0].split('=')[0] + '" />';
				}
			} else if(value.indexOf('activityCode=') === -1) {
				paramsHTML += '<input type="hidden" value="' + value.split('=')[1] + '" name="' + key.split('=')[0] + '" />';
			}
		});
		$('#j-cookie-call-back-url-form').empty();
        $('#j-cookie-call-back-url-form').append(paramsHTML);
		validateLinkBRedirect(almahaURL,true);
    } else if(activityCodeParam === 'RDMCARNTL' || activityCodeParam === 'RDMHTLSTAY') {
    	if(getUserBasicInfoField('programCode') != 'PORTAL'){
    	var travelShopSsoSerURL = $('#travelShopSsoSerURL').val();
		if(travelShopSsoSerURL !== undefined){
			var languageParam = $('#page-locale').val();
			var langPrefCookieVal = getCookieValueAsIs('Language-Preferred');
			if(langPrefCookieVal !== null){
				languageParam += '-' + langPrefCookieVal.split('/')[0];
			}
			var travelShopSsoRequest = {
			  "customerProfileId": getUserBasicInfoField('customerProfileId'),
			  "language": languageParam,
			  "activityCode":activityCodeParam
			};
			$.ajax({
				url: travelShopSsoSerURL,
				type: 'POST',
				contentType: 'application/json; charset=utf-8',
				dataType: 'json',
				data: JSON.stringify(travelShopSsoRequest),
				headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
				cache: false,
				success: function(response) {
					var errorObject = response.errorObject;
					if(errorObject === undefined) {
						var tokenURL = response.url;
						if(tokenURL !== undefined && tokenURL !== '') {
								if(tsURL !== ''){
									if(tsURL.indexOf('?')== -1){
									validateLinkBRedirect(tsURL + '?token=' + tokenURL,true);
									}
									else{
										validateLinkBRedirect(tsURL + '&token=' + tokenURL,true);
									}
								} else {
							}
						} else {
							//To-Do: Display error message
							$('#connection-failure-modal').modal();
							logout();
						}
					} else {
						//To-Do: Display error message
						$('#connection-failure-modal').modal();
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'travel-shop-connection-failure';
						}
						errorClick(window.location.href, 'travel-shop-sso-service-call', loginUserType, errorObject[0].errorName);
						logout();
					}
				}
			});
		}
		
		}
		else{
			$("#travelshop-portal-user-error-message").removeClass('hide').addClass("show");
		}
    } else if ( fifaSrc === QRHFIFABKG || fifaSrc === FIFAMCRSTE ) {
		/** Section for the FIFA activity code **/
		if( getUserBasicInfoField('programCode') === 'PORTAL' ) {
			handlePortalUser();
			return false;
		} else if( getUserBasicInfoField('programCode') === 'QRPC' ) {
          isFifaFlow = true;
          if( fifaSrc === QRHFIFABKG ) {

              var fifassoRequest = {
                "customerProfileId": getUserBasicInfoField('customerProfileId'),
                "activityCode":"FIFA"
              };
              $.ajax({
                  url: $('#serviceFifaSsoServiceURL').val(),
                  type: 'POST',
                  contentType: 'application/json; charset=utf-8',
                  dataType: 'json',
                  data: JSON.stringify(fifassoRequest),
                  headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
                  cache: false,
                  success: function(response) {
                      var errorObject = response.errorObject;
                      if(errorObject === undefined) {
                          var identifier = response.uniqueIdentifier;
                          var fifaRedirectUrlSearch = /\%/i.test(fifaRedirectUrl) ? decodeURIComponent(fifaRedirectUrl) : fifaRedirectUrl;
                          var finalRedirectionUrlFifa = fifaRedirectUrlSearch.indexOf("?") != -1 ? fifaRedirectUrl+"&uniqueIdentifier="+identifier : fifaRedirectUrl+"?uniqueIdentifier="+identifier;
                          fifaRedirectionMethod(finalRedirectionUrlFifa);
                      } else if( response.errorObject != undefined && response.errorObject[0] != undefined ) {
                          hideSpinnerMobileApp($('#global-spinner-container'), 'spinner-active');
                          var errorDescription = Granite.I18n.get(''+response.errorObject[0].errorName);
                          $('#loginErrorBlock #errorId').html(errorDescription);
                          $('#loginErrorBlock .input-base-msg-box').show().focus();
                      }
                  }
              });

          } else {
              fifaRedirectionMethod(fifaRedirectUrl);
          }
		}
		
	}  else if ( getReqParam('source') === 'HARMONIZEDUPGRADE' || sourceCode === ANCILLARIES) {
		if( getUserBasicInfoField('programCode') === 'PORTAL' ) {
			handlePortalUser();
			return false;
		} else {
			fifaRedirectionMethod(redirectUrl);
		}
	}else {
		var userType = getUserBasicInfoField('programCode');
		//var portalDashboardURL = $('#portalDashboardPage').val();//For login page
		//var privilegeClubDashboardURL = $('#privilegeClubDashboardPage').val();//For login page
		
		var loginRequestCookie;
		if(null !== loginRequest && '' !== loginRequest && typeof loginRequest !== 'undefined'){
			loginRequestCookie = $.parseJSON($.parseJSON(loginRequest));
		}
		
		delete_cookie("loginRequest", "/",".qatarairways.com.qa");
		deleteCookie('otpTriggered');
		isRedirected = triggerEmailValidation();
		if(!isRedirected){
			if(getUserBasicInfoField('category') === 'STUDENT' && $('#profile-otp-modal').length === 0) {
				var isProfileCompleteSerURL = $('#isProfileCompleteSerURL').val();
				var isProfileCompleteSerReq = {
					'customerProfileId' : getUserBasicInfoField('customerProfileId')
				};
				$.ajax({
					url: isProfileCompleteSerURL,
					type: 'POST',
					contentType: 'application/json; charset=utf-8',
					dataType: 'json',
					data: JSON.stringify(isProfileCompleteSerReq),
					headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
					cache: false,
					success: function(response) {
						var errorObject = response.errorObject;
						if(errorObject === undefined && response.studentCompleteness === 'INCOMPLETE') {
							var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
							if('new' === qmilesSiteCookieValue) {
								window.location = $('#new-qrpc-sc-profile-URL').val();
							} else if('old' === qmilesSiteCookieValue) {
								window.location = $('#old-qrpc-sc-profile-URL').val();
							} else if('other' === qmilesSiteCookieValue) {
								window.location = $('#global-qrpc-sc-profile-URL').val();
							} else if('other-en' === qmilesSiteCookieValue) {
								window.location = $('#english-qrpc-sc-profile-URL').val();
							}
						} else {
							if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
								digitalData.page.pageInfo.pageType = 'profile-complete-service-error';
							}
							errorClick(window.location.href, 'profile-complete-service-call', loginUserType, errorObject[0].errorName);
						}
					}
				});
			}
			var isLoginRequestCall = false;
			if( 'QRPC' == userType || 'PORTAL' == userType ) {
				if(null !== loginRequest && '' !== loginRequest && typeof loginRequest !== 'undefined'){
					isLoginRequestCall = true;
					$('#externalcallback-form').attr('action', loginRequestCookie[0].callBackUrl);
					var input_name = "language";
					var input = $("#externalcallback-form :input[name='"+input_name+"']").attr('value', loginRequestCookie[0].language); 
					$('#externalcallback-form').submit();
				}
			}
			var finalLink = "";
			switch( userType ) {
				case "QRPC" : 
						if(getUserBasicInfoField('category') === 'STUDENT') {
							finalLink = (studentDashboardURL !== '') ? studentDashboardURL : window.location.pathname;
						} else {
						finalLink = (privilegeClubDashboardURL !== '') ? privilegeClubDashboardURL : window.location.pathname;
						}
					break;
				case "PORTAL":
						finalLink = (portalDashboardURL.indexOf('html') == -1) ?  portalDashboardURL + '.html' : portalDashboardURL;
						var trackingCode = $("#portalSuccessTrackingCode", '#join-form').val();
						if(trackingCode != undefined && trackingCode != '') {
							finalLink = finalLink + "?"+ trackingCode;
						}
					break;
				case "QRBB" :
						finalLink = $('#sme-dashboard-URL').val();
					break;
		        case "NCP" :
						var tausertype =  getActualCookieValue("tausertype");
						if(tausertype !== undefined && tausertype === 'true'){
							const taUserDashboardURL = $('#taUserDashboardURL').val();
							finalLink = taUserDashboardURL+".html";
						} else {
							finalLink = $('#ncp-dashboard-URL').val();
						}
						$('#sme-qrewards-wheel').addClass('hide');
                    
                    break;
				default:
					location.reload();
					
			}
			if( finalLink.indexOf('/postLogin') == -1 ) {
				finalLink = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC' && finalLink.indexOf('.onboardpopup.') === -1  ? finalLink.replace('.html','.onboardpopup.html') : finalLink;
			} else {
				finalLink = getUserBasicInfoField('swiftOnboardingRequired') && getUserBasicInfoField('programCode') === 'QRPC' && finalLink.indexOf('.swiftpopup.') === -1  ? finalLink.replace('.html','.swiftpopup.html') : finalLink; 
			}
			validateLinkBRedirect(finalLink,false);
		
		}
	}
	} catch(err) {}
}
function sendBXIdentity(){
try{
if(getUserBasicInfoField("emailId")!=undefined && getUserBasicInfoField("emailId")!=""){
var langCode = ($(document).find('#langpagename').val()!=undefined)?$(document).find('#langpagename').val():"";
var boxeverLang = langCode.toLocaleUpperCase();
var boxeverCurrency = ($('#boxeverCurrencyVal').val()!=undefined)?$('#boxeverCurrencyVal').val():"";
var boxeverChannel;
if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || navigator.userAgent.indexOf("Mobile") != -1) {
	boxeverChannel = "MOBILE_WEB";
} else {
	boxeverChannel = 'WEB';
}
var identityEvent = {channel: boxeverChannel,type: "IDENTITY",page: "/homepage",language: boxeverLang,currency: boxeverCurrency, pos: "qatarairways.com",browser_id: Boxever.getID(),title:getUserBasicInfoField("title")!=undefined?getUserBasicInfoField("title"):"",firstname: getUserBasicInfoField("firstName")!=undefined?getUserBasicInfoField("firstName"):"",lastname: getUserBasicInfoField("lastName")!=undefined?getUserBasicInfoField("lastName"):"",email: getUserBasicInfoField("emailId")};
Boxever.eventCreate(identityEvent, function(data){}, 'json');}
}catch(err){}
}

function redirectUser(){
		if( sessionStorage.getItem("profilePicImage") != undefined || sessionStorage.getItem("profilePicImage") != null ){
			sessionStorage.removeItem("profilePicImage");
		}
	
		var ac = '';
		if(location.search.indexOf("activityCode=SME") != -1 ) {
			ac = 'SME';
		}
		var additionalInfoReq = {
			"customerProfileId" : getUserBasicInfoField('customerProfileId'),
			"t": getFFPCookieValue("QRTOKEN"),
			"programCode": getUserBasicInfoField('programCode'),
			"activity-code": ac,
			"j_destination": $('#j_destination').val(),
			"j_alldestination": $('#j_alldestination').val()
		};
		$.ajax({
			url: "/qr/getAdditionalInfo",
			type: 'POST',   
			data: additionalInfoReq,
			cache: false,
			success: function(response) {
			    sendBXIdentity();
				var loginMethod = '', socialMediaLoginType = $('#j_socilMediaValue').val();
				if(socialMediaLoginType == 'GOOGLE'){ 
					loginMethod = 'google';
				}else if(socialMediaLoginType == 'FACEBOOK'){
					loginMethod = 'facebook';
				}else if(socialMediaLoginType == 'TWITTER'){
					loginMethod = 'twitter';
				}else{
					loginMethod = loginUserNameType;
				}
				loginSuccessEvent(window.location.href, 'login-' + loginMethod, loginUserType);
				var isQrTokenAvailable = getFFPCookieValue("QRTOKEN") !== null && getFFPCookieValue("QRTOKEN") !== '' && getFFPCookieValue("QRTOKEN") !== undefined;
				if(!isQrTokenAvailable) {
					if (null !== loginRequest && '' !== loginRequest && typeof loginRequest !== 'undefined') {
						var loginReqCookie = $.parseJSON(loginRequest);
						if (loginReqCookie[0].activityCode == "RVE_BKG") {
							isRevenueBooking = true;
						}
					}
				}
				if (isRevenueBooking) {
					afterCookieRedirection();
				} else {
					if( getUserBasicInfoField('swiftOnboardingRequired') ) {
						updateUserBasicInfoField('dashboardvisitedavios', 'false');
					}
					var lastfetchSVBDate = localStorage.getItem('lastfetchSVBDate');
					var fetchEncryptResponseValue;
					if (lastfetchSVBDate === null || lastfetchSVBDate === undefined || lastfetchSVBDate === 'undefined'  && getFFPCookieValue('QRTOKEN') != null ) {
						tofetchsvbServiceCall();
						var fetchSVBCustomerProfile = JSON.stringify({
							customerProfileId: getUserBasicInfoField("customerProfileId"),
							lastUpdatedDate: new Date().getTime()
						});
						fetchEncryptResponseValue = fetchSVBcryptUserData(fetchSVBCustomerProfile);
						localStorage.setItem('lastfetchSVBDate', fetchEncryptResponseValue);
						lastfetchSVBDate = localStorage.getItem('lastfetchSVBDate');
					}
					if (lastfetchSVBDate != null) {
						  var fetchTime = new Date().getTime();
						  var fetchDecryptResponseValue = fetchSVBdecrypt(fetchEncryptResponseValue);
						  if(fetchDecryptResponseValue !== null) {
								var fetchResponseValueObj = JSON.parse(fetchDecryptResponseValue);
								var differenceTime = fetchTime - fetchResponseValueObj.lastUpdatedDate;
								var hours = Math.floor((differenceTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
								if (hours > 24) {
									   tofetchsvbServiceCall();
								} else {
									   createSwiftLinkStatus();
								}
						  } else {
							  createSwiftLinkStatus();
						  }
						
					}
				}
			}
		});
	
}

function applyNSPChanges() {
	var runModes = $("#runmodes").val(), titleFlag = false;
	if(typeof runModes !== 'undefined'){
		if((runModes.indexOf('publish')) > -1 ){
			titleFlag = true;
		}
		if(titleFlag && null !== loginRequest && '' !== loginRequest && typeof loginRequest !== 'undefined' ){
			$('.smeContainer').remove();
			var loginUsername, loginPassword, submitType, socialMediaEmail, socilMediaUniqId, loginRequestCookie = $.parseJSON(loginRequest), j_platform = "j_platform";
			j_platform = $("#j-login-form :input[name='"+j_platform+"']").attr('value', loginRequestCookie[0].platform);
			mainActivityCode = loginRequestCookie[0].activityCode;
			if( loginRequestCookie[0].platform == 'IOS' || loginRequestCookie[0].platform == 'ANDROID' ){
				mobilePlatform = loginRequestCookie[0].platform;
				if( $('#mobileAppTriggerer').val() == 'false' ){
					$('#mobileAppTriggerer').val('true');
					$('#mobileAppTriggerer').trigger('change');
				}
			}
			var j_assignedDeviceId = "j_assignedDeviceId";
			j_assignedDeviceId = $("#j-login-form :input[name='"+j_assignedDeviceId+"']").attr('value', loginRequestCookie[0].assignedDeviceId);
			var j_authenticationMode = "j_authenticationMode";
			j_authenticationMode = $("#j-login-form :input[name='"+j_authenticationMode+"']").attr('value', loginRequestCookie[0].authenticationMode);
			if(loginRequestCookie[0].activityCode == "AUTONSPLOGIN" || loginRequestCookie[0].activityCode == "AUTO_LOGIN"){
				if(loginRequestCookie[0].loginType.toUpperCase() == "WEB"){
					var j_username = "j_username";
					loginUsername = $("#j-login-form :input[name='"+j_username+"']").attr('value', loginRequestCookie[0].loginUsername); 
					var j_password = "j_password";
					loginPassword = $("#j-login-form :input[name='"+j_password+"']").attr('value', loginRequestCookie[0].loginPassword);
					var j_submitType = "j_submitType";
					submitType = $("#j-login-form :input[name='"+j_submitType+"']").attr('value', 'DIRECT');
					otherSitesEnrollment();
				}else {
					var j_socialMediaEmail = "j_socialMediaEmail";
					socialMediaEmail = $("#j-login-form :input[name='"+j_socialMediaEmail+"']").attr('value', loginRequestCookie[0].loginSocialMediaEmail); 
					var j_socilMediaUniqId = "j_socilMediaUniqId";
					socilMediaUniqId = $("#j-login-form :input[name='"+j_socilMediaUniqId+"']").attr('value', loginRequestCookie[0].loginSocialMediaUniqueId);
					var j_submitType = "j_submitType";
					var socialMediaType = loginRequestCookie[0].loginSocialMediaType;
					socialMediaType   = (socialMediaType != undefined && socialMediaType == "FB")?"FACEBOOK":socialMediaType;
					socialMediaType   = (socialMediaType != undefined && socialMediaType == "GP")?"GOOGLEPLUS":socialMediaType;
					socialMediaType   = (socialMediaType != undefined && socialMediaType == "TW")?"TWITTER":socialMediaType;
					submitType = $("#j-login-form :input[name='"+j_submitType+"']").attr('value', socialMediaType);
					otherSitesEnrollment();
				}
			} else if(loginRequestCookie[0].activityCode == "LOGOUT"){
			   var iscallbackURL = true			
				var paramsHTML = '';
				var cookieCallBackUrl = '';
				$.each(loginRequestCookie[0], function(key, value) {
					if('callBackUrl' === key) {
						cookieCallBackUrl = value;
					}			
					paramsHTML += '<input type="hidden" value="' + value + '" name="' + key + '" />';
				});
				//console.log('paramsHTML:' + paramsHTML);
				$('#j-cookie-call-back-url-form').attr('action', cookieCallBackUrl);
				$('#j-cookie-call-back-url-form').empty();
				$('#j-cookie-call-back-url-form').append(paramsHTML);
				
				//signOut(iscallbackURL,cookieCallBackUrl,paramsHTML);
				signOut(iscallbackURL,function(signOutResponse){
					$('#j-cookie-call-back-url-form').submit();
				});
				
			}else{
				var showguest = (loginRequestCookie[0].showGuest.toUpperCase() == "TRUE"), 
					transactional = (loginRequestCookie[0].transactional.toUpperCase() == "TRUE"),
					isEnrollLogin = (loginRequestCookie[0].activityCode !== "ENROLL_LOGIN"),
					showForgotPwdVal = loginRequestCookie[0].showForgetPwd,
					showForgotPwd = (showForgotPwdVal !== undefined ? showForgotPwdVal.toUpperCase(): '');
				if(showguest && transactional && isEnrollLogin ){
					if(showForgotPwd !== ''){
						if(showForgotPwd === 'TRUE'){
							$("#forgot-password-link").removeClass("hide");
						} else {
							$("#forgot-password-link").addClass("hide");
						}
						$(".create-profile-popup").addClass("hide");
					} else {
						$(".create-profile-popup, #forgot-password-link").addClass("hide");
					}
					$("#div_guestuserlogin").removeClass("hide");
					$('#reset-account-link').addClass('hidden');
				}else if(showguest && isEnrollLogin ){
					if(showForgotPwd !== ''){
						if(showForgotPwd === 'TRUE'){
							$("#forgot-password-link").removeClass("hide");
						} else {
							$("#forgot-password-link").addClass("hide");
						}
						$("#div_guestuserlogin").removeClass("hide");
					} else {
						$("#div_guestuserlogin, #forgot-password-link").removeClass("hide");
					}
					$(".create-profile-popup").addClass("hide");
					 $('#reset-account-link').removeClass('hidden');
				}else if( isEnrollLogin ){
					if(showForgotPwd !== ''){
						if(showForgotPwd === 'TRUE'){
							$("#forgot-password-link").removeClass("hide");
						} else {
							$("#forgot-password-link").addClass("hide");
						}
						$(".create-profile-popup").removeClass("hide");
					} else {
						$(".create-profile-popup, #forgot-password-link").removeClass("hide");
					}
					$("#div_guestuserlogin").addClass("hide");
					$('#reset-account-link').removeClass('hidden');
				}
				var activityCodes = $('#allowed-actlogin-codes').val()+",AUTONSPLOGIN,AUTO_LOGIN";
				activityCodes = activityCodes.split(',');
				var keepALiveURL = loginRequestCookie[0].keepAliveURL,
				keepALiveInterval = loginRequestCookie[0].keepAliveInterval;
					
				if( keepALiveInterval == undefined || keepALiveInterval === null || keepALiveInterval === '' ) {
					//KeepALiveInterval not defined
					keepALiveInterval = 3*60000;
				} else if( keepALiveInterval !== undefined && keepALiveInterval < 3*60000 ) { 
					//Lesser than 3 minutes
					keepALiveInterval = 3*60000;
				}
				
				if( keepALiveURL != undefined && keepALiveURL != null && keepALiveURL != '' ) {
					if( loginRequestCookie[0].activityCode != undefined && loginRequestCookie[0].activityCode != null && activityCodes.indexOf(loginRequestCookie[0].activityCode) != -1 ) {
						setInterval(function(){
							keepAliveExternalSession(keepALiveURL,loginRequestCookie[0].language);
						}, keepAliveInterval);
					}
				}
			}
		}
	}
}

function handlePortalUser() {
	mainActivityCode = "", mainFifaRedirectionUrl = '', mainFifaSource = '', crc = '', partnerCode = '', partnerState = '', partnerClientId = '', isNSPFlow = false, showGuest = '', transactional = '', showForgetPwd = '', loginSocialMediaType = '', platform = '', assignedDeviceId = '', authenticationMode = '', loginUsername = '', loginPassword = '', loginSocialMediaEmail = '', loginSocialMediaUniqueId = '', keepAliveURL = '', keepAliveInterval = '', nspLanguage = '', selLang = '',loginUserType = 'privilegeclub-login',loginUserNameType = '', pageLocale = $('#page-locale').val(), isEmbeddedLogin = 'false', cashPlusAviosToken = "";
	hideSpinnerMobileApp($('#global-spinner-container'), 'spinner-active');
	var errorDescription = $('#portalFifaErrorMessage').val();
	var linkLoginpage = '<a href="javascript:void(0);" id="basicFifaLoginLink">'+$('#loginButtonInvoke').val()+'</a>';
	errorDescription = errorDescription.replace('{0}',linkLoginpage);
	$('#portalloginfifainfo').html(errorDescription);
	$('#portalloginfifainfo').parent().removeClass('hide').focus();
	window.history.pushState({}, document.title, window.location.pathname);
	$.ajax({
		url: "/qr/Logout",
		type: "GET",
		data: {
			logOut: "logOut",
			type:'EXTERNAL'
		},
		cache: false,
		success: function(response) {
			console.log("signout success!");
		}
	});
}
var istoFetchSVBServiceCalled = false;
function tofetchsvbServiceCall() {
    istoFetchSVBServiceCalled = true;
    if (getFFPCookieValue('QRTOKEN') == null || getFFPCookieValue('QRTOKEN') == undefined) {
        return false;
    }
    var fetchSVBUrl = $('#fetchSVBSerUrl').val(); //"https://eisffpuat.qatarairways.com.qa/ffp-services/partner/fetchSVB";
    //fetchSVBUrl = "https://eisffpuat.qatarairways.com.qa/ffp-services/partner/fetchSVB";
    console.log('fetchSVBUrl', fetchSVBUrl);
    if (fetchSVBUrl == undefined || fetchSVBUrl == '' || fetchSVBUrl == '#') {
        return false;
    }
    var redirectURL = window.location.href;
    var redirectParam = window.location.search;
    var successRedirectUrl;
    var failureRedirectUrl;
    var tokenSub = getFFPCookieValue('QRTOKEN').substring(11, 22);
    tokenSub = encryptUserData(tokenSub);
    tokenSub = encodeURIComponent(tokenSub);
    if (redirectParam === '' || redirectParam === undefined) {
        successRedirectUrl = redirectURL + '?avexStatus=success&QRTKN=' + tokenSub;
        failureRedirectUrl = redirectURL + '?avexStatus=failure&QRTKN=' + tokenSub;
    } else {
        successRedirectUrl = redirectURL + '&avexStatus=success&QRTKN=' + tokenSub;
        failureRedirectUrl = redirectURL + '&avexStatus=failure&QRTKN=' + tokenSub;
    }

    var fetchSVBRequest = {
        "customerProfileId": getUserBasicInfoField("customerProfileId")
    };
    $.ajax({
        url: fetchSVBUrl,
        type: 'POST',
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        data: JSON.stringify(fetchSVBRequest),
        headers: {
            'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN")
        },
        cache: false,
        success: function(response) {
            var errorObject = response.errorObject;
            if (errorObject === undefined) {
                var singleVirtualBalance = response.singleVirtualBalance;
                updateUserBasicInfoField('singleVirtualBalance', '' + singleVirtualBalance);
				var linkedAccountsBalances = response.linkedAccountsBalances;
				if( linkedAccountsBalances.length !== 0 ) {
					document.cookie = 'swiftLinkStatus=true' + ';path=/';
				} else if( linkedAccountsBalances.length === 0 ) {
					document.cookie = 'swiftLinkStatus=false' + ';path=/';
				}
                afterCookieRedirection();
            }
        }
    });
}

function fetchSVBcryptUserData(valueString) {
	cryptoAlgorithmSelected = "AES";
    if (cryptoAlgorithmSelected == "AES") {
        var customerProfileId = getUserBasicInfoField("customerProfileId");
        var base64Key = customerProfileId;
        if (base64Key == undefined) {
            return null;
        }
        var key = CryptoJS.enc.Base64.parse(base64Key);
        var crypted = CryptoJS.AES.encrypt(valueString, key, {
            mode: CryptoJS.mode.ECB,
            padding: CryptoJS.pad.Pkcs7
        });
        var encryptedText = CryptoJS.enc.Base64.stringify(crypted.ciphertext);
        console.log("AES encryption" + encryptedText);
        return encryptedText;
    } else if (cryptoAlgorithmSelected == "AES_GCM") {
        console.log("string encrypt", valueString)
        return AES_GCM_encrypt(valueString);
    }
}

function fetchSVBdecrypt(encryptedString) {
	cryptoAlgorithmSelected = "AES";
    if (cryptoAlgorithmSelected == "AES") {
        var customerProfileId = getUserBasicInfoField("customerProfileId");
        var base64Key = customerProfileId;
        if (base64Key == undefined || base64Key == "") {
            return null;
        }
        var key = CryptoJS.enc.Base64.parse(base64Key);
        var decryptedText = null;
        try {
            var decryptedData = CryptoJS.AES.decrypt(encryptedString, key, {
                mode: CryptoJS.mode.ECB,
                padding: CryptoJS.pad.Pkcs7
            });
            decryptedText = decryptedData.toString(CryptoJS.enc.Utf8);
        } catch (e) {
            console.log("decryption failed", e);
            console.log(encryptedString);
        }
        return decryptedText;
    } else if (cryptoAlgorithmSelected == "AES_GCM") {
        return AES_GCM_decrypt(encryptedString);
    }
}


function createSwiftLinkStatus() {
    if (getFFPCookieValue('QRTOKEN') == null || getFFPCookieValue('QRTOKEN') == undefined) {
        return false;
    }
    var fetchSVBUrl = $('#fetchSVBSerUrl').val();
	if (fetchSVBUrl == undefined || fetchSVBUrl == '' || fetchSVBUrl == '#') {
        return false;
    }
   

    var fetchSVBRequest = {
        "customerProfileId": getUserBasicInfoField("customerProfileId")
    };
    $.ajax({
        url: fetchSVBUrl,
        type: 'POST',
        contentType: 'application/json; charset=utf-8',
        dataType: 'json',
        data: JSON.stringify(fetchSVBRequest),
        headers: {
            'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN")
        },
        cache: false,
        success: function(response) {
            var errorObject = response.errorObject;
            if (errorObject === undefined) {
				var linkedAccountsBalances = response.linkedAccountsBalances;
				if( linkedAccountsBalances.length !== 0 ) {
					document.cookie = 'swiftLinkStatus=true' + ';path=/';
				} else if( linkedAccountsBalances.length === 0 ) {
					document.cookie = 'swiftLinkStatus=false' + ';path=/';
				}
                afterCookieRedirection();
            } else {
				afterCookieRedirection();
			}
        },
		error: function(data) {
			afterCookieRedirection();
		}
    });
}
function taRedirectUser(selectedCustomerProfileId){
    console.log("taRedirectUser triggered!!");
    console.log("selectedCustomerProfileID="+selectedCustomerProfileId);
    taShowSpinner();
    $.ajax({
		url: "/qr/setTABasicInfo?customerProfile="+selectedCustomerProfileId,
		type: "GET",
		cache: false,
		success: function(response) {
            console.log("basic info updated !!")
			setTimeout(function() {           
                redirectUser();
            }, 4000);
		}
	});
}

function taShowSpinner(){
    $(".ta-popup-choose-customer").html($(".global-loader").html());
}

function taPopulateCorpUserList(corpuserlistJSON){
    console.log("taPopulateCorpUserList triggered!!");
    console.log("corpuserlistJSON="+corpuserlistJSON);
    corpuserlistJSON.map(function(item, index){ 
        console.log("item="+item);
        console.log("item.companyName="+item.companyName);
        console.log("item.customerProfileId="+item.customerProfileId);
        const strArr = item.companyName.split('');
        const firstChar = strArr[0].charAt(0).toUpperCase();
        const secondChar = strArr[1].charAt(0).toUpperCase();
        const taUserDashboardURL = $('#taUserDashboardURL').val();
        console.log("taUserDashboardURL="+taUserDashboardURL);
        var row = '<div onclick="taRedirectUser('+item.customerProfileId+')" class="ta-agent-customer-list-name"><span class="ta-agent-name-icon">'+firstChar+secondChar+'</span>'+item.companyName+'</div>';
        $(".ta-popup-choose-customer .ta-popup-body").append(row);
    });
}
$(document).ready(function() {
	$("#otp-check-form").addClass("hide");
	
	$(document).on('change blur keypress keyup keydown', '#otp-telephone-number',  function() {
		var value = $(this).val();
		$('.otp-email-empty-message').parent().find('#errorMsgOTPMobileZ').remove();
		if( value.length != 0 && (value.indexOf('0') == 0 || Number(value) === 0) ) {
			$('#otp-continue-button').css({'pointer-events':'none', 'opacity':'0.6'});
			$('.otp-email-empty-message').parent().append('<p id="errorMsgOTPMobileZ" style=" color: red; border: 1px solid red; padding: 4px; ">'+Granite.I18n.get('otp.login.mobilenumberzero')+'</p>');
			$(this).closest('.otp-telephone-number').css({'border': '1px solid red'});
		} else if ( value.length < 5 ) {
			$('.otp-email-empty-message').parent().append('<p id="errorMsgOTPMobileZ" style=" color: red; border: 1px solid red; padding: 4px; ">'+Granite.I18n.get('otp.login.mobilenumbermin')+'</p>');
			$('#otp-continue-button').css({'pointer-events':'none', 'opacity':'0.6'});
		} else {
			$('.otp-email-empty-message').parent().find('#errorMsgOTPMobileZ').remove();
			$('#otp-continue-button').css({'pointer-events':'auto', 'opacity':'1'});
			$(this).closest('.otp-telephone-number').css({'border': '1px solid transparent'});
		}
	});
	
	$('.otpLoginButton').on('click', function(){
		try {
		//To-Do : After clicking on OTP's Login button, verify the entered OTP through service call
       	redirectUser();
		} catch(err) {}
    });
	
	function checkEmailupdate() {
		  try {
		    var emailID = $('#otp-email').val();
             isEmailValid = isValidEmailID(emailID);
         if (emailID !== '' && isEmailValid && emailID !== email) {		     
		      return true;
		    } else {
		      return false;
		    }
		  } catch (err) {}
		}

		//on email blur fuction

		    $('#otp-email').on('blur', function() {

				var isEmailupdate =	checkEmailupdate();	
					if(isEmailupdate){
						$('#login-otp-block').fadeOut('slow');
						$('#otp-screen-spinner-container').hide();
						$('#otp-modal-label').fadeOut('slow');
						$('#emaileditalert').fadeIn('slow');
						$('#otpemailchange-continue-btn').removeClass('hide');
						$("#otp-continue-button").addClass('hide');
					}else{
						$('#emaileditalert').hide();
						$('#otpemailchange-continue-btn').addClass('hide');
						$("#otp-continue-button").removeClass('hide');
						$('#login-otp-block').removeClass('hidden');
						$('#otp-screen-spinner-container').removeAttr('style');
					}
			});
			$('#otpemailchange-continue-btn').on('click', function(){
				$('#login-otp-block').fadeOut('slow');
				$('#otp-screen-spinner-container').hide();
				$('#otp-modal-label').fadeOut('slow');
				$('#emaileditalert').fadeIn('slow');
				buttonClickAction(window.location.href, 'continue button for OTP mail change', 'login otp settings');
			});

		// email popup cancel

		 $('#email-cancel-button').on('click', function(){
				$('#login-otp-block').fadeIn('slow');
				$('#otp-modal-label').fadeIn('slow');
				$('#emaileditalert').fadeOut('slow');
				buttonClickAction(window.location.href, 'Cancel button for OTP mail change', 'login otp settings');
		});


		    // email edit confirm bitton 
		 $('#email-confirm-button').on('click', function(){
			$('#emaileditalert').fadeOut('slow');
			$('#otp-modal-label').fadeIn('slow');
			$('#otp-screen-spinner-container').fadeIn('slow').removeClass('hidden');
			 setTimeout(function(){
				 $("#otp-continue-button").click();

			},1); 
		});

	
	$("#otp-popup-close-button").click(function() {
		try {
		//console.log('clicked close button');
		deleteCookie('otpFrom');
		//$('#otp-modal').hide();
		//$('body .modal-backdrop').removeClass('in');
		//$('body .modal-backdrop').remove();
		//$('body').removeClass('modal-open');
		hideOTPErrorMessages();
		location.reload();
		} catch(err) {}
	});
	
	$('#otp-preference-0,#otp-preference-1').on('click', function(){
		try {
		$('.otp-channels').removeClass('hidden');
		$('.otp-consent-checkbox').addClass('hidden');
		var otpFrom = getActualCookieValue("otpFrom");
		//console.log('otpFrom:', otpFrom);
		if('MYPROFILE' !== otpFrom) {
			$('#otp-continue-button').removeClass('disabled').removeAttr('disabled');
		} else {
			if($('#sms-channel').prop('checked') || $('#email-channel').prop('checked') || $('#sms-email-channel').prop('checked')) {
				$('#otp-continue-button').removeClass('disabled').removeAttr('disabled');
			} else {
				$('#otp-continue-button').addClass('disabled').attr('disabled', 'disabled');
			}
		}
		} catch(err) {}
	});
	
	$('#otp-preference-2').on('click', function(){
		try {
		$('.otp-channels').addClass('hidden');
		$('.otp-consent-checkbox').removeClass('hidden');
		if($('#otp-consent-checkbox').prop('checked')){
			$('#otp-continue-button').removeClass('disabled').removeAttr('disabled');
		} else {
			$('#otp-continue-button').addClass('disabled').attr('disabled', 'disabled');
		}
		} catch(err) {}		
	});
	
	$('#sms-channel').on('click', function(){
		try {
		$('#otp-countrycode-block').removeClass('hidden');
		$('#otp-email-block').addClass('hidden');
		$('#otp-telephone-number').val(mobileNumber);
		
		if(mobileNumber !== undefined && mobileNumber !== '') {
			$('#otp-telephone-number').addClass('populated');
		}
		
		//$('#otp-email').val('');
		
		$('#otp-continue-button').removeClass('disabled').removeAttr('disabled');
			
		$('.otp-mobile-number-empty-message, .otp-mobile-calling-code-empty-message, .otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message, .otp-invalid-email-message').attr('hidden', '');
		} catch(err) {}
	});
	
	$('#email-channel').on('click', function() {
		try {
		$('#otp-countrycode-block').addClass('hidden');
		$('#otp-email-block').removeClass('hidden');
		//$('#otp-telephone-number').val('');
		$('#otp-email').val(email);
		if(email !== undefined && email !== '') {
			$('#otp-email').addClass('populated');
		}			
		
		$('#otp-continue-button').removeClass('disabled').removeAttr('disabled');
		
		$('.otp-mobile-number-empty-message, .otp-mobile-calling-code-empty-message, .otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message, .otp-invalid-email-message').attr('hidden', '');
		} catch(err) {}
	});
	
	$('#sms-email-channel').on('click', function(){
		try {
		$('#otp-countrycode-block').removeClass('hidden');
		$('#otp-email-block').removeClass('hidden');
		$('#otp-telephone-number').val(mobileNumber);
		$('#otp-email').val(email);
		
		if(mobileNumber !== undefined && mobileNumber !== '') {
			$('#otp-telephone-number').addClass('populated');
		}
		
		if(email !== undefined && email !== '') {
			$('#otp-email').addClass('populated');
		}
		
		$('#otp-continue-button').removeClass('disabled').removeAttr('disabled');
		
		$('.otp-mobile-number-empty-message, .otp-mobile-calling-code-empty-message, .otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message, .otp-invalid-email-message').attr('hidden', '');
		} catch(err) {}
	});
	
	
	$('#otp-telephone-number').on('blur', function(){
		try {
		var telephoneNumber = $('#otp-telephone-number').val();
		if($('#sms-channel').prop('checked') && telephoneNumber === '') {
			$('.otp-email-empty-message, .otp-mobile_email-empty-message, .otp-invalid-email-message').attr('hidden', '');
			$('.otp-mobile-number-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
		} else if($('#sms-email-channel').prop('checked')){
			var emailID = $('#otp-email').val();
			if(emailID === '' && telephoneNumber === '') {
				$('.otp-mobile-number-empty-message, .otp-email-empty-message, .otp-invalid-email-message').attr('hidden', '');
				$('.otp-mobile_email-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			}else if(telephoneNumber === '') {
				$('.otp-email-empty-message, .otp-mobile_email-empty-message, .otp-invalid-email-message').attr('hidden', '');
				$('.otp-mobile-number-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			} else {
				$('.otp-mobile-number-empty-message, .otp-email-empty-message, .otp-mobile_email-empty-message,.otp-invalid-email-message').attr('hidden', '');
			}			
		} else {
			$('.otp-mobile-number-empty-message, .otp-email-empty-message, .otp-mobile_email-empty-message,.otp-invalid-email-message').attr('hidden', '');
		}
		} catch(err) {}
	});
	
	$('#otp-email').on('blur', function() {
		try {
		var emailID = $('#otp-email').val();			
           isEmailValid = isValidEmailID(emailID);
		if($('#email-channel').prop('checked')) {
            if(emailID === '') {
			$('.otp-mobile-number-empty-message, .otp-mobile_email-empty-message, .otp-invalid-email-message').attr('hidden', '');
			$('.otp-email-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
            }else{
				$('.otp-mobile-number-empty-message, .otp-email-empty-message , .otp-mobile_email-empty-message, .otp-invalid-email-message').attr('hidden', '');
			}
            if (!isEmailValid){
				$('.otp-mobile-number-empty-message,.otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message').attr('hidden', '');
				$('.otp-invalid-email-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			}	
			else {
				$('.otp-mobile-number-empty-message, .otp-email-empty-message , .otp-mobile_email-empty-message, .otp-invalid-email-message').attr('hidden', '');
			}
		} else if($('#sms-email-channel').prop('checked')){
			var telephoneNumber = $('#otp-telephone-number').val();
			isEmailValid = isValidEmailID(emailID);
			if(emailID === '' || telephoneNumber === '') {
				$('.otp-mobile-number-empty-message, .otp-email-empty-message, .otp-invalid-email-message').attr('hidden', '');
				$('.otp-mobile_email-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			} else if (!isEmailValid){
				$('.otp-mobile-number-empty-message,.otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message').attr('hidden', '');
				$('.otp-invalid-email-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			}	
			else {
				$('.otp-mobile-number-empty-message, .otp-email-empty-message , .otp-mobile_email-empty-message, .otp-invalid-email-message').attr('hidden', '');
			}				
		} else if(($('#email-channel').prop('checked') || $('#sms-email-channel').prop('checked')) && emailID !== ''){
			//To-Do: Call isValidEmailID()
			isEmailValid = isValidEmailID(emailID);
			//console.log('isEmailValid:', isEmailValid);
			if(!isEmailValid) {
				$('.otp-mobile-number-empty-message,.otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message').attr('hidden', '');
				$('.otp-invalid-email-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			} else {
				$('.otp-invalid-email-message').attr('hidden', '');
			}
		} else {
			$('.otp-mobile-number-empty-message, .otp-email-empty-message , .otp-mobile_email-empty-message, .otp-invalid-email-message').attr('hidden', '');
		}
		} catch(err) {}
	});
	
	
	
	$('#otp-consent-checkbox').on('click', function() {
		try {
		if($('#otp-consent-checkbox').prop('checked')){
			$('#otp-continue-button').removeClass('disabled').removeAttr('disabled');
		} else {
			$('#otp-continue-button').addClass('disabled').attr('disabled', 'disabled');
		}    
		} catch(err) {}		
	});
	
	
	$('#otp-continue-button').on('click', function() {
		try {
		$('.otp-preference-service-error-message').addClass('hidden');
		//To-Do : After clicking on 'Continue' button, call the necessary services
		$('#otp-back-button').removeClass('hidden');
		$('#profile-settings-otp-cancel-button').addClass('hidden');
		hideOTPErrorMessages();
		showSpinnerMobileApp($('#otp-preferences-spinner-container'),'spinner-full-page');
		$('#otp-value').val('');
		//console.log('Clicked on Continue button');			
		existingPreference = getUserOtherInfoField('otpPreference');
		//console.log('existingPreference:', existingPreference);
		
		var selectedOTPPreference = $('#otp-preference-0').prop('checked') ? "LOGIN" : ( $('#otp-preference-1').prop('checked') ? "TRANSACTION" : ($('#otp-preference-2').prop('checked') ? "BYPASS" : "") );
		//console.log('selectedOTPPreference:', selectedOTPPreference);
		if( selectedOTPPreference == '' ) {
			selectedOTPPreference = 'LOGIN';
		}
		newPreference = selectedOTPPreference;
		
		//if (selectedOTPPreference === 'BYPASS') {
			//saveNoOTPPreferences();
		//}
		
		var customerProfileId = getUserBasicInfoField('customerProfileId');
		var ffpNumber = getUserBasicInfoField('ffpNumber');
					
		var selectedChannel = $('#sms-channel').prop('checked') ? "SMS" : ( $('#email-channel').prop('checked') ? "EMAIL" : ( $('#sms-email-channel').prop('checked') ? "SMS_EMAIL" : "") );
	
		//console.log('selectedChannel:', selectedChannel);
		
		newChannel = selectedChannel;
		
		var countryInfo = $('#otp-country-code').val();
		var finalCountryCallingCode = '';
		var finalCountryCode = '';
		
		if (countryInfo !== null && countryInfo !== undefined) {
			finalCountryCallingCode = countryInfo.split('-')[0];
			//console.log('finalCountryCallingCode:', finalCountryCallingCode);
			newCountryCallingCode = finalCountryCallingCode;
			
			
			finalCountryCode = countryInfo.split('-')[1];
			//console.log('finalCountryCode:', finalCountryCode);
			newCountryCode = finalCountryCode;
		}
		
		var finalMobileNumber = $('#otp-telephone-number').val();
		newMobileNumber = finalMobileNumber;
		
		var finalEmail = $('#otp-email').val();
		//console.log('finalEmail:', finalEmail);
		newEmail = finalEmail;
				
		var isInputEmpty = false;
		//var isMobileNumberEmpty = false;
		var isInputValid = false;
		if (selectedOTPPreference === 'LOGIN' || selectedOTPPreference === 'TRANSACTION' || (selectedOTPPreference === 'BYPASS' && existingPreference === 'TRANSACTION')) {
			if (selectedChannel === 'SMS') {
				//console.log('selectedChannel[SMS]:finalMobileNumber', finalMobileNumber);
				if (finalMobileNumber === '' || finalCountryCallingCode === '') {
					isInputEmpty = true;
					if(finalMobileNumber === ''){
						$('.otp-mobile-number-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
					}
					if(finalCountryCallingCode === ''){
						$('.otp-mobile-calling-code-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
					}
					
				} else {
					isInputValid = true;
					var mobileHelpText = $('#mobileShowMessageLogin').val();
					//console.log('mobileHelpText:', mobileHelpText);
					var digitsToShow = 4;
					mobileHelpText = mobileHelpText.replace('{0}', getShortMobileNumber(finalMobileNumber, digitsToShow));
					//console.log('getShortMobileNumber:', mobileHelpText);
					$('.mobile-help-text').removeClass('hidden').text(mobileHelpText);
					$('.resend-mobile-help-text, .email-help-text, .resend-email-help-text,.mobile-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
					//var tempMobileNumber  = new Array(finalMobileNumber.length - digitsToShow + 1).join('x') + finalMobileNumber.slice(-digitsToShow);
					//mobileHelpText.replace('{0}', tempMobileNumber);					
				}
			} else if(selectedChannel === 'EMAIL') {
				//console.log('selectedChannel[EMAIL]:finalEmail', finalEmail);
				if (finalEmail === '') {
					isInputEmpty = true;
					$('.otp-email-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
				} else {
					
					isEmailValid = isValidEmailID(finalEmail);
					//console.log('isEmailValid:', isEmailValid);
					if(!isEmailValid) {
						$('.otp-mobile-number-empty-message,.otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message').attr('hidden', '');
						$('.otp-invalid-email-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
					} else {
						$('.otp-invalid-email-message').attr('hidden', '');
						isInputValid = true;
					}				
					
					var emailHelpText = $('#emailShowMessageLogin').val();
					var charsToShow = 3;					
					emailHelpText = emailHelpText.replace('{0}', getShortEmailID(finalEmail, charsToShow));
					$('.email-help-text').removeClass('hidden').text(emailHelpText);
					$('.mobile-help-text,.resend-mobile-help-text, .resend-email-help-text, .mobile-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
				}
				
			} else if(selectedChannel === 'SMS_EMAIL') {
				//console.log('selectedChannel[SMS_EMAIL]:finalMobileNumber[ ' + finalMobileNumber + '] ---- finalEmail[', finalEmail + ']');
				if (finalMobileNumber === '' || finalEmail === '' || finalCountryCallingCode === '') {
					$('.otp-invalid-email-message').attr('hidden', '');
					isInputEmpty = true;
					if(finalMobileNumber === '' && finalEmail === '' && finalCountryCallingCode === ''){
						$('.otp-mobile_email-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
					} else {
						if(finalMobileNumber === ''){
							$('.otp-mobile-number-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
						}
						if(finalCountryCallingCode === ''){
							$('.otp-mobile-calling-code-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
						}
						if (finalEmail === '') {
							$('.otp-email-empty-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
						}
					}
				}  else {
					
					isEmailValid = isValidEmailID(finalEmail);
					//console.log('isEmailValid:', isEmailValid);
					if(!isEmailValid) {
						$('.otp-mobile-number-empty-message, .otp-email-empty-message, .otp-mobile_email-empty-message, .otp-preference-service-error-message').attr('hidden', '');
						$('.otp-invalid-email-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
					} else {
						$('.otp-invalid-email-message').attr('hidden', '');
						isInputValid = true;
					}
					
					
					var mobileEmailHelpText = $('#emailMobileShowMessageLogin').val();
					var digitsToShow = 4;
					var charsToShow = 3;					
					mobileEmailHelpText = mobileEmailHelpText.replace('{0}', getShortMobileNumber(finalMobileNumber, digitsToShow));
					mobileEmailHelpText = mobileEmailHelpText.replace('{1}', getShortEmailID(finalEmail, charsToShow));
					$('.mobile-email-help-text').text(mobileEmailHelpText);
					$('.mobile-email-help-text').removeClass('hidden');
					$('.mobile-help-text, .resend-mobile-help-text, .email-help-text, .resend-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
				}
				
				
			}
		} else {
			isInputEmpty = false;
			isInputValid = true;
		}
		
		//console.log('isInputEmpty:' + isInputEmpty);
		//console.log('isInputValid:' + isInputValid);
		
		if(!isInputEmpty && isInputValid) {
			var validateOTPPreferenceServiceURL = $('#validateOTPPreferenceServiceURL').val();
			//console.log('validateOTPPreferenceServiceURL:' + validateOTPPreferenceServiceURL);
							
			if(validateOTPPreferenceServiceURL !== '' && validateOTPPreferenceServiceURL !== undefined) {
				
				var validateOTPPreferenceRequest = {
					"customerProfileId": customerProfileId
				};
				
				//var activity = getFFPCookieValue('activity');
				var activity = getUserOtherInfoField('activity');
				
				if (selectedOTPPreference === 'BYPASS') {
					//To-Do: Need to check the call to saveOTPPreference
					
					validateOTPPreferenceRequest = {
						"customerProfileId": customerProfileId,
						"secureOTP": selectedOTPPreference,						
						"consentCheck": true
					};					
				} else {
					validateOTPPreferenceRequest = {
						"customerProfileId": customerProfileId,
						"secureOTP": selectedOTPPreference,
						"receiveOTP": selectedChannel,
						"countryCode": finalCountryCode,
						"mobileNumber": finalMobileNumber,
						"callingCode": finalCountryCallingCode,
						"email": finalEmail,
						"activity": activity
					};
				}
				
				window.qrServiceRef.zone.run(function() {
					Promise.all([
						window.qrServiceRef.postReq(validateOTPPreferenceServiceURL, validateOTPPreferenceRequest, loginReq_headers, '', {}),						
					]).then(function(validateOTPPreferenceResponse) {						
						//console.log('validateOTPPreferenceResponse[0]:', validateOTPPreferenceResponse[0]);
						//var isOTPPreferenceSaved = saveOTPPreferenceResponse[0].errorObject === undefined ? true : false;
												
						var isOTPPreferenceValid = validateOTPPreferenceResponse[0].valid === true ? true : false;
						//isOTPPreferenceSaved = true;
						//console.log('isOTPPreferenceValid:', isOTPPreferenceValid);							
						if(isOTPPreferenceValid) {
							//console.log('isOTPPreferenceValid is true');
							//updateUserOtherInfoField('otpPreference', selectedOTPPreference);
							deleteCookie('otpChannel');
							$('.otp-preference-service-error-message').attr('hidden', '');
							if ((selectedOTPPreference === 'BYPASS' && existingPreference !== 'TRANSACTION') || existingPreference === 'BYPASS' || (selectedOTPPreference === 'TRANSACTION' && existingPreference === 'LOGIN')) {
								//To-Do: Call the service to update otpVerified as true
								saveNoOTPPreferences();
							} else {
								var sendOTPServiceURL = $('#sendOTPServiceURL').val();
								//console.log('sendOTPServiceURL:' + sendOTPServiceURL);
								
								if(sendOTPServiceURL !== '' && sendOTPServiceURL !== undefined) {
									var sendOTPActivity = 'LOGIN';
									if($('#profile-otp-modal').val() !== undefined) {
										sendOTPActivity = 'PROFUPD';
									}
									//console.log('sendOTPActivity:' + sendOTPActivity);
									var sendOTPRequest = formSendOTPRequest(customerProfileId, ffpNumber, finalMobileNumber, finalCountryCallingCode, finalCountryCode, finalEmail, selectedChannel, sendOTPActivity);
									if( getUserBasicInfoField("customerProfileId") == undefined || getUserBasicInfoField("customerProfileId") == '' || getUserBasicInfoField("customerProfileId") == null ) {
										return false;
									}
									
									//console.log('sendOTPRequest:' + JSON.stringify(sendOTPRequest));
									//console.log('sendOTPReqHeaders:', JSON.stringify(loginReq_headers));								
									window.qrServiceRef.zone.run(function() {
										Promise.all([
											window.qrServiceRef.postReq(sendOTPServiceURL, sendOTPRequest, loginReq_headers, '', {})
										]).then(function(sendOTPResponse) {
											hideSpinnerMobileApp($('#otp-preferences-spinner-container'),'spinner-full-page');
											//console.log('sendOTPResponse:', sendOTPResponse[0]);
											//To-Do: Error handling
											if(sendOTPResponse[0].errorObject === undefined) {
												showOtpTimer($("#otp-modal #otpcountdowntimer"), $("#otp-modal #otp-resend-button"));
												$('.otp-preference-service-error-message').attr('hidden', '');
												sendOTPContactDetails = sendOTPResponse[0].contactDetails;
												//console.log('sendOTPContactDetails:', sendOTPContactDetails);
												$('#otp-popup-close-button, #otp-modal .login-secure-otp-block').addClass('hidden');
												$('.login-enter-otp-column').removeClass('hidden');
												var otpIsFrom = getActualCookieValue('otpFrom');
												if(otpIsFrom === 'MYPROFILE') {
													var element, textMessage, digitsToShow = 4, charsToShow = 3;
													var previousOTPChannel = getUserOtherInfoField('receiveOTP');
													buttonClickAction(window.location.href, 'send-OTP', 'myprofile otp settings');
													switch(previousOTPChannel) {
														case "SMS" :
																element = $('.mobile-help-text');
																textMessage = $('#mobileShowMessageLogin').val();
																textMessage = textMessage.replace('{0}', getShortMobileNumber(finalMobileNumber, digitsToShow));
																$('.resend-mobile-help-text, .email-help-text, .resend-email-help-text, .mobile-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
															break;
														case  "EMAIL" :
																element = $('.email-help-text');
																textMessage = $('#emailShowMessageLogin').val();
																textMessage = textMessage.replace('{0}', getShortEmailID(finalEmail, charsToShow));
																$('.mobile-help-text, .resend-mobile-help-text, .resend-email-help-text, .mobile-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
															break;
														case "SMS_EMAIL" :
																element = $('.mobile-email-help-text');
																textMessage = $('#emailMobileShowMessageLogin').val();
																textMessage = textMessage.replace('{0}', getShortMobileNumber(finalMobileNumber, digitsToShow));
																textMessage = textMessage.replace('{1}', getShortEmailID(finalEmail, charsToShow));
																$('.mobile-help-text, .resend-mobile-help-text, .email-help-text, .resend-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
															break;
													}
													$(element).removeClass('hidden').text(textMessage);
													
												} else {
													buttonClickAction(window.location.href, 'send-OTP', 'login otp settings');
												}
											} else {
												if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
													digitalData.page.pageInfo.pageType = 'send-OTP-error';
												}
												errorClick(window.location.href, 'send-OTP', 'login', sendOTPResponse[0].errorObject[0].errorName);
												$('#otp-modal .login-secure-otp-block').removeClass('hidden');
												$('.login-enter-otp-column').addClass('hidden');
												$('.otp-preference-service-error-message').removeClass('hidden').html(sendOTPResponse[0].errorObject[0].errorDescription);
												$('.otp-preference-service-error-message').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
												
												if(sendOTPResponse[0].errorObject[0].errorName === 'SESSION_EXPIRED') {
													//console.log('Session got expired. Redirecting to Login page.....');
													$('.otp-preference-service-error-message').fadeOut(3000);
													setTimeout(function() {
														redirectToLogin(loginPage);
													}, 3000);
												}
												
											}
											
										});
									});	
								} else {
									//console.log('sendOTP Service is not configured properly');
								}
							}
							
						} else {
							hideSpinnerMobileApp($('#otp-preferences-spinner-container'),'spinner-full-page');
							//console.log('isOTPPreferenceValid is false');
							$('#otp-modal .login-secure-otp-block').removeClass('hidden');
							var isEmailupdate =	checkEmailupdate();	
							if(isEmailupdate){
								$('#login-otp-block').fadeIn('slow');
								$('#otp-screen-spinner-container').hide();
								$('#otp-modal-label').fadeIn('slow');
								$('#emaileditalert').fadeOut('slow');
								$('#otpemailchange-continue-btn').addClass('hide');
								$("#otp-continue-button").removeClass('hide');
							}
							$('.login-enter-otp-column').addClass('hidden');
							$('.otp-preference-service-error-message').html(validateOTPPreferenceResponse[0].errorObject[0].errorDescription);
							$('.otp-preference-service-error-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
							if(validateOTPPreferenceResponse[0] != undefined && validateOTPPreferenceResponse[0].errorObject  != undefined && validateOTPPreferenceResponse[0].errorObject[0]  != undefined){
								if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
									digitalData.page.pageInfo.pageType = 'validate-OTP-preference-error';
								}
								errorClick(window.location.href, 'validate-OTP-preference', 'join-now', validateOTPPreferenceResponse[0].errorObject[0].errorName);
							}
							//To-Do: Show error messages from saveOTPPreference service response
						}
						
					});
				});	
			} else {
				//console.log('saveOTPPreference Service is not configured properly');
			}
			
		} else {
			hideSpinnerMobileApp($('#otp-preferences-spinner-container'),'spinner-full-page');
			if( $('#otp-telephone-number').val() == '') {
				$('.otp-mobile-number-empty-message').removeClass('hidden').removeAttr('hidden').css({'color':'red'});
			}
			if( $('#otp-country-code').val() == '' ) {
				$('.otp-mobile-calling-code-empty-message').removeClass('hidden').removeAttr('hidden').css({'color':'red'});
			}
			if( $('#otp-email').val() == '' ) {
				$('.otp-email-empty-message').removeClass('hidden').removeAttr('hidden');
			}
			//$('.otp-mobile_email-empty-message').attr('hidden', '');
		}
		
		} catch(err) {}
		
	});
	
	
	$('#otp-resend-button').on('click', function() {
		try {
		showSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
		hideOTPErrorMessages();
		var tausertype =  getActualCookieValue("tausertype");
		var sendOTPServiceURL = $('#sendOTPServiceURL').val();
		if(tausertype !== undefined && tausertype != ""  && tausertype === 'true'){
			sendOTPServiceURL = $('#sendCorpOTPServiceURL').val();
		}
		//console.log('sendOTPServiceURL:' + sendOTPServiceURL);
		var customerProfileId = getUserBasicInfoField('customerProfileId');
		var ffpNumber = getUserBasicInfoField('ffpNumber');
		var selectedOTPPreference = '';
		var selectedChannel = '';
				
		var otpPreference = getUserOtherInfoField('otpPreference');
		//console.log('otpPreference:', otpPreference);
		
		if(otpPreference === 'NEW' || otpPreference === '') {
			selectedOTPPreference = $('#otp-preference-0').prop('checked') ? "LOGIN" : ( $('#otp-preference-1').prop('checked') ? "TRANSACTION" : ( $('#otp-preference-2').prop('checked') ? "BYPASS" : "" ));
			selectedChannel = $('#sms-channel').prop('checked') ? "SMS" : ( $('#email-channel').prop('checked') ? "EMAIL" : ($('#sms-email-channel').prop('checked') ? "SMS_EMAIL" : "") );
			
		} else {
			selectedOTPPreference = otpPreference;
			//selectedChannel = getFFPCookieValue("otpChannel");
			selectedChannel = newChannel;
		}
		
		//console.log('selectedOTPPreference:', selectedOTPPreference);
		//var activity = getFFPCookieValue('activity');
		var sendOTPActivity = 'LOGIN';
		if($('#profile-otp-modal').val() !== undefined) {
			sendOTPActivity = 'PROFUPD';
		}
		//console.log('sendOTPActivity:' + sendOTPActivity);
		
		//var otpMobile = getFFPCookieValue("otpMobile");
		var otpMobile = newMobileNumber;
		//var otpEmail = getFFPCookieValue("otpEmail");
		var otpEmail = newEmail;
		//var otpCountryCode = getFFPCookieValue("otpCountryCode");
		var otpCountryCode = newCountryCode;
		//var otpCountryCallingCode = getFFPCookieValue("otpCountryCallingCode");
		var otpCountryCallingCode = newCountryCallingCode;
		var sendOTPRequest = formSendOTPRequest(customerProfileId, ffpNumber, otpMobile, otpCountryCallingCode, otpCountryCode, otpEmail, selectedChannel, sendOTPActivity,tausertype);
		
		var programCode = getUserBasicInfoField('programCode');
		var loggedInUser = getUserBasicInfoField('loggedInUser');
		if('QRBB' === programCode || 'NCP' === programCode) {
			sendOTPRequest['programCode'] = programCode;
			sendOTPRequest['userName'] = loggedInUser;
		}
		
		//console.log('sendOTPRequest:' + sendOTPRequest);				
		//console.log('sendOTPReqHeaders:', JSON.stringify(loginReq_headers));								
		if( getUserBasicInfoField("customerProfileId") == undefined || getUserBasicInfoField("customerProfileId") == '' || getUserBasicInfoField("customerProfileId") == null ) {
			return false;
		}
		window.qrServiceRef.zone.run(function() {
			Promise.all([
				window.qrServiceRef.postReq(sendOTPServiceURL, sendOTPRequest, loginReq_headers, '', {})
			]).then(function(sendOTPResponse) {		
				//console.log('Resend OTP Response:', sendOTPResponse[0]);
				hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
				if(sendOTPResponse[0].errorObject === undefined) {
					showOtpTimer($("#otp-modal #otpcountdowntimer"), $("#otp-modal #otp-resend-button"));
					$('.otp-preference-service-error-message').attr('hidden', '');
					sendOTPContactDetails = sendOTPResponse[0].contactDetails;
					//console.log('sendOTPContactDetails:', sendOTPContactDetails);
					var otpIsFrom = getActualCookieValue('otpFrom');
					var element, textMessage, digitsToShow = 4, charsToShow = 3, selectedOTPChannel, isMyProfile = false;;
					
					switch( otpIsFrom ) {
						case "MYPROFILE" :
								isMyProfile = true;
								selectedOTPChannel = getUserOtherInfoField('receiveOTP');
								buttonClickAction(window.location.href, 'resend-OTP ', 'myprofile otp settings');
							break;
						default : 
								isMyProfile = false;
								selectedOTPChannel = selectedChannel;
								buttonClickAction(window.location.href, 'resend-OTP ', 'login otp settings');
							break;
					}
					switch( selectedOTPChannel ) {
						case "SMS":
								element = isMyProfile ? $('#otp-modal .resend-mobile-help-text') : $('.resend-mobile-help-text');
								textMessage = isMyProfile ? $('#otp-modal .resend-mobile-help-text').text() : $('.resend-mobile-help-text').text();
								textMessage = textMessage.replace('{0}', getShortMobileNumber(otpMobile, digitsToShow));
								$('.mobile-help-text,.email-help-text,.mobile-email-help-text,.resend-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
							break;
						case "EMAIL":
								element = isMyProfile ? $('#otp-modal .resend-email-help-text') : $('.resend-email-help-text');
								textMessage = isMyProfile ? $('#otp-modal .resend-email-help-text').text() : $('.resend-email-help-text').text();
								textMessage = textMessage.replace('{0}', getShortEmailID(otpEmail, charsToShow));
								$('.mobile-help-text, .resend-mobile-help-text, .email-help-text, .mobile-email-help-text, .resend-mobile-email-help-text').addClass('hidden');
							break;
						case "SMS_EMAIL":
								element = isMyProfile ? $('#otp-modal .resend-mobile-email-help-text') : $('.resend-mobile-email-help-text');
								textMessage = isMyProfile ? $('#otp-modal .resend-mobile-email-help-text').text() : $('.resend-mobile-email-help-text').text();
								textMessage = textMessage.replace('{0}', getShortMobileNumber(otpMobile, digitsToShow));
								textMessage = textMessage.replace('{1}', getShortEmailID(otpEmail, charsToShow));
								$('.mobile-help-text, .email-help-text, .resend-mobile-help-text, .resend-email-help-text, .mobile-email-help-text').addClass('hidden');
							break;
					}
					$(element).empty().removeClass('hidden').text(textMessage);
					
				} else {
					if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
						digitalData.page.pageInfo.pageType = 'send-OTP-error';
					}
					errorClick(window.location.href, 'send-OTP', 'login', sendOTPResponse[0].errorObject[0].errorName);
					if( sendOTPResponse[0].errorObject[0].errorName === 'FFP_MAX_OTP_ATTEMPTS_EXCEEDED_FOR_TIME' ) {
						$.ajax({
							url:'/qr/Logout',
							type: "POST",
							data: {
								logOut: "logOut",
								resource: "/en/Privilege-Club/loginpage.html"
							},
							cache: false,
							success:function(response) {
								if(response != undefined && response.errorObject != undefined && response.errorObject[0] != undefined){
									if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
										digitalData.page.pageInfo.pageType = 'send-otp-maximum-attempts';
									}
									errorClick(window.location.href, 'send-OTP', 'login', response.errorObject[0].errorName);
								}
								$('.otp-verify-account-locked-error-message').removeClass('hidden').attr('style',"background: rgb(247, 229, 229); color: rgb(181, 0, 0); padding: 10px; border: 1px solid;");
								$('#otp_acnt_locked_login').attr('href',$('#loginPage').val());
								$('.otp-receive-help,#otp-resend-button, #profile-settings-otp-resend-button,#otp-verify-button').addClass('hide');
								$('.login-enter-otp-column #otp-value').closest('.input-base').css({'pointer-events':'none'});
								$('.login-enter-otp-column #otp-value').closest('.input-base').find('.input-base-bg').css({'background-color':'#cccccc'});
							}, 
							error:function(response){
								$('.otp-verify-account-locked-error-message').removeClass('hidden').attr('style',"background: rgb(247, 229, 229); color: rgb(181, 0, 0); padding: 10px; border: 1px solid;");
								$('#otp_acnt_locked_login').attr('href',$('#loginPage').val());
								$('.otp-receive-help,#otp-resend-button, #profile-settings-otp-resend-button,#otp-verify-button').addClass('hide');
								$('.login-enter-otp-column #otp-value').closest('.input-base').css({'pointer-events':'none'});
								$('.login-enter-otp-column #otp-value').closest('.input-base').find('.input-base-bg').css({'background-color':'#cccccc'});
							}
						});
					} else {
						$('.otp-verify-service-error-message').html(sendOTPResponse[0].errorObject[0].errorDescription);
						$('.otp-verify-service-error-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
						if(sendOTPResponse[0].errorObject[0].errorName === 'SESSION_EXPIRED') {
							//console.log('Session got expired. Redirecting to Login page.....');
							$('.otp-verify-service-error-message').fadeOut(3000);
							setTimeout(function() {
								redirectToLogin(loginPage);							
							}, 3000);
						}
					}
				}
				
				
			});
		});	
		} catch(err) {}
	});
	
	
	
	
	$('#otp-back-button').on('click', function() {
		try {
		hideOTPErrorMessages();
		hideVerifyOTPErrorMessages();
		$('#otp-modal .login-secure-otp-block').removeClass('hidden');
		$('.login-enter-otp-column').addClass('hidden');
		$('#login-otp-block').removeAttr('style');
		var otpFrom = getActualCookieValue("otpFrom");
		if(otpFrom === 'MYPROFILE'){
		$('#otp-popup-close-button').removeClass('hidden');
		}
		} catch(err) {}
		buttonClickAction(window.location.href, 'Go back to OTP settings', 'login otp settings');
	});
	
	
	$('#otp-verify-button').on('click', function() {
		try {
		if( $('.login-enter-otp-column #otp-value').val().length > 6 ) {
			hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
			hideVerifyOTPErrorMessages();
			$('.invalid-otp-error-message').attr('hidden', '').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			return false;
		}
		//To-Do: Call verifyOTP service
		showSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
		var verifyOTPServiceURL = $('#verifyOTPServiceURL').val();
		var isTAUser = getActualCookieValue("tausertype");
		if(isTAUser !== undefined && isTAUser != "" && isTAUser === 'true'){
			verifyOTPServiceURL = $('#verifyCorpOTPServiceURL').val();
		}
		//console.log('verifyOTPServiceURL:' + verifyOTPServiceURL);
		var ffpNumber = getUserBasicInfoField('ffpNumber');
		if(verifyOTPServiceURL !== '' && verifyOTPServiceURL !== undefined) {
			var customerProfileId = getUserBasicInfoField('customerProfileId');
			//var activity = getFFPCookieValue('activity');
			var otpValue = $('.login-enter-otp-column #otp-value').val();
			////console.log('verifyOTP:sendOTPContactDetails:Before:' + JSON.stringify(sendOTPContactDetails));
			$.each(sendOTPContactDetails, function(key,value) {					
				value.otpValue = otpValue;					
			});
			////console.log('verifyOTP:sendOTPContactDetails:After:' + JSON.stringify(sendOTPContactDetails));				
			if(otpValue !== undefined && otpValue !== '') {
				hideVerifyOTPErrorMessages();
				/*
				var verifyOTPRequest = {
					"customerProfileId": customerProfileId,
					"activity": activity,
					"ffpNumber": ffpNumber,
					"contactDetails": sendOTPContactDetails,
					"otpValue": otpValue					
				};
				*/
				var verifyOTPActivity = 'LOGIN';
				if($('#profile-otp-modal').val() !== undefined){
					verifyOTPActivity = 'PROFUPD';
				}
				//console.log('verifyOTPActivity:' + verifyOTPActivity);
				if(isTAUser !== undefined && isTAUser != "" && isTAUser === 'true'){
					customerProfileId = "";
					ffpNumber = "";
				}
				var verifyOTPRequest = {
					"customerProfileId": customerProfileId,
					"activity": verifyOTPActivity,
					"ffpNumber": ffpNumber,
					"contactDetails": sendOTPContactDetails
				};
				
				window.qrServiceRef.zone.run(function() {
					Promise.all([
						window.qrServiceRef.postReq(verifyOTPServiceURL, verifyOTPRequest, loginReq_headers, '', {})
					]).then(function(verifyOTPResponse) {		
						
						//console.log('verifyOTPResponse:');
						//console.log(verifyOTPResponse[0]);
						//console.log(JSON.stringify(verifyOTPResponse[0]));
						if(verifyOTPResponse[0].errorObject === undefined) {
							var contactDetails = verifyOTPResponse[0].cotactDetails;
							var contactDetailsLength = contactDetails.length;
							var otpVerified = false;
							//console.log('contactDetailsLength:' + contactDetailsLength);
							
							if (contactDetailsLength == 1) {
								otpVerified = contactDetails[0].otpVerified;
							} else {
								otpVerified = contactDetails[0].otpVerified || contactDetails[1].otpVerified;
							}
							//console.log('otpVerified:' + otpVerified);
							//console.log('skipSaveOtpPreference:' + skipSaveOtpPreference);
							if (otpVerified) {

								if (!skipSaveOtpPreference) {
									hideOTPErrorMessages();
									hideVerifyOTPErrorMessages();
									//$('.invalid-otp-error-message').attr('hidden', '');
									
									/* Call saveOTPPreference service with otpVerified flag as true - START */
									
									var saveOTPPreferenceServiceURL = $('#saveOTPPreferenceServiceURL').val();
									//console.log('saveOTPPreferenceServiceURL:2:' + saveOTPPreferenceServiceURL);
									
									if(saveOTPPreferenceServiceURL !== '' && saveOTPPreferenceServiceURL !== undefined) {
										var saveOTPPreferenceRequest = {
											"customerProfileId": customerProfileId
										};
										
										//var activity = getFFPCookieValue('activity');
										var activity = getUserOtherInfoField('activity');
										
										
										var selectedOTPPreference = '';
										selectedOTPPreference = $('#otp-preference-0').prop('checked') ? "LOGIN" : ( $('#otp-preference-1').prop('checked') ? "TRANSACTION" : ($('#otp-preference-2').prop('checked') ? "BYPASS" : "") );
										/*if($('#otp-preference-0').prop('checked')) {
											selectedOTPPreference = 'LOGIN';
										} else if($('#otp-preference-1').prop('checked')) {
											selectedOTPPreference = 'TRANSACTION';
											//updateUserOtherInfoField('otpPreference', 'TRANSACTION');
										} else if($('#otp-preference-2').prop('checked')) {
											selectedOTPPreference = 'BYPASS';
										} else */
										if( selectedOTPPreference === '' && secureOTPChannel != '' ) {
											selectedOTPPreference = secureOTPChannel;
										} else if(selectedOTPPreference === '' && getUserOtherInfoField('otpPreference') != '' ) {
											selectedOTPPreference = getUserOtherInfoField('otpPreference');
										} else if(selectedOTPPreference === '') {
											selectedOTPPreference = 'LOGIN';
										}
										//console.log('Final selectedOTPPreference:', selectedOTPPreference);
										
										
										var selectedChannel = '';//sms-channel
										selectedChannel = $('#sms-channel').prop('checked') ? "SMS" : ( $('#email-channel').prop('checked') ? "EMAIL" : ( $('#sms-email-channel').prop('checked') ? "SMS_EMAIL" : ""));
										/*if($('#sms-channel').prop('checked')) {
											selectedChannel = 'SMS';
										} else if($('#email-channel').prop('checked')) {
											selectedChannel = 'EMAIL';
										} else if($('#sms-email-channel').prop('checked')) {
											selectedChannel = 'SMS_EMAIL';
										} else*/
										if( selectedChannel === '' && receiveOTPChannel != '' ) {
											selectedChannel = receiveOTPChannel;
										} else if(selectedChannel === '') {
											selectedChannel = newChannel;
										}
										
										//console.log('Final selectedChannel:', selectedChannel);
										
										var countryInfo = $('#otp-country-code').val();
										var finalCountryCallingCode = '';
										var finalCountryCode = '';
										
										if (countryInfo !== null && countryInfo !== undefined && countryInfo !== '') {
											finalCountryCallingCode = countryInfo.split('-')[0];
											//console.log('finalCountryCallingCode:', finalCountryCallingCode);
											
											finalCountryCode = countryInfo.split('-')[1];
											//console.log('finalCountryCode:', finalCountryCode);
										} else {
											//console.log('2nd time saveOTP');
											finalCountryCallingCode = countryCallingCode;
											
											finalCountryCode = countryCode;
										}
										
										var finalMobileNumber = $('#otp-telephone-number').val();
										
										if(finalMobileNumber === '' && typeof mobileNumber != "undefined" ) {
											finalMobileNumber = mobileNumber;
										} else if( finalMobileNumber === '') {
											//console.log('finalMobileNumber is undefined');
											//finalMobileNumber = getFFPCookieValue('otpMobile');
											finalMobileNumber = newMobileNumber;
										}
										
										//console.log('finalMobileNumber:', finalMobileNumber);
										
										var finalEmail = $('#otp-email').val();
										if(finalEmail === '' && typeof email != "undefined" ) {
											finalEmail = email;
										} else if(finalEmail === '') {
											//console.log('finalEmail is undefined');
											//finalEmail = getFFPCookieValue('otpEmail');
											finalEmail = newEmail;
										}
										
										//console.log('finalEmail:', finalEmail);
										
										
										if (selectedOTPPreference === 'BYPASS') {
											saveOTPPreferenceRequest = {
												"customerProfileId": customerProfileId,
												"secureOTP": selectedOTPPreference,						
												"consentCheck": true
											};					
										} else {
											saveOTPPreferenceRequest = {
												"customerProfileId": customerProfileId,
												"secureOTP": selectedOTPPreference,
												"receiveOTP": selectedChannel,
												"countryCode": finalCountryCode,
												"mobileNumber": finalMobileNumber,
												"callingCode": finalCountryCallingCode,
												"email": finalEmail,
												"activity": activity
											};
										}
										
										window.qrServiceRef.zone.run(function() {
											Promise.all([
												window.qrServiceRef.postReq(saveOTPPreferenceServiceURL, saveOTPPreferenceRequest, loginReq_headers, '', {})
											]).then(function(saveOTPPreferenceResponse) {		
												//console.log('saveOTPPreferenceResponse:2:', saveOTPPreferenceResponse[0]);
												var isOTPPreferenceSaved = saveOTPPreferenceResponse[0].status === true ? true : false;						
												//console.log('isOTPPreferenceSaved:', isOTPPreferenceSaved);
												if(isOTPPreferenceSaved) {
													//console.log('OTP Preferences Saved Successfully........');
													updateUserOtherInfoField('otpPreference', selectedOTPPreference);
													hideVerifyOTPErrorMessages();
													if(selectedChannel === 'SMS_EMAIL' || selectedChannel === 'EMAIL') {
														updateUserBasicInfoField('emailId', finalEmail);
													}
													if(selectedChannel === 'SMS_EMAIL' || selectedChannel === 'SMS') {
														updateUserBasicInfoField('mobile', finalMobileNumber);
														updateUserBasicInfoField('mobileCountryCode', finalCountryCode);
														updateUserBasicInfoField('mobileCallingCode', finalCountryCallingCode);
													}
													var otpFrom = getActualCookieValue("otpFrom");
													//console.log('otpFrom:', otpFrom);
													if(otpFrom === 'MYPROFILE'){
														//$('#otp-modal').hide();
														//$('body .modal-backdrop').remove();
														deleteCookie('otpFrom');
														$('#otp-settings-success-message').removeClass('hidden').removeAttr('hidden').fadeOut(4000);
														buttonClickAction(window.location.href, 'verify-OTP ', 'myprofile-otp');
														setTimeout(function() {
															location.reload();
														}, 4000);
													} else {
														hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
														$('#otp-verify-success-message').removeAttr('hidden').removeClass('hidden').fadeOut(4000);
														showSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
														var isEmailUpdated = checkEmailupdate();
														buttonClickAction(window.location.href, 'verify-OTP ', 'login otp');
                                                       if (secureOTPChannel == "NEW" && isEmailUpdated) {
                                                            setTimeout(function() {

															logout();
														}, 4000);

                                                        } else {
                                                            setTimeout(function() {

															redirectUser();
														}, 4000);

                                                        }
													}
													hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
													
												} else {
													hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
													//console.log('Error in saving OTP Preferences');
													$('.otp-verify-service-error-message').removeClass('hidden').html(saveOTPPreferenceResponse[0].errorObject[0].errorDescription);
													$('.otp-verify-service-error-message').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
													if(saveOTPPreferenceResponse[0] != undefined && saveOTPPreferenceResponse[0].errorObject != undefined  && saveOTPPreferenceResponse[0].errorObject[0] != undefined){
														if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
															digitalData.page.pageInfo.pageType = 'save-OTP-preference-error';
														}
														errorClick(window.location.href, 'save-OTP-preference', 'login', saveOTPPreferenceResponse[0].errorObject[0].errorName);
													}
												}
												
											});
										});									
									}
									/* Call saveOTPPreference service with otpVerified flag as true - END */
									
								} else {
									hideOTPErrorMessages();
									hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
									$('#otp-verify-success-message').removeAttr('hidden').removeClass('hidden').fadeOut(4000);
									showSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
									buttonClickAction(window.location.href, 'verify-OTP ', 'login otp');
									
									var tausertype =  getActualCookieValue("tausertype");
									var corpUserList = getFFPCookieValue("corpuserlist");
									console.log("tausertype= " +tausertype);
									console.log("corpUserList= " +corpUserList);
									var corpuserlistJSON;
                                    if(corpUserList){
										corpuserlistJSON = JSON.parse(corpUserList);
                                    }
									console.log("corpuserlistJSON= " +corpuserlistJSON)
									if((corpuserlistJSON && corpuserlistJSON.length > 1) && (tausertype && tausertype !="" && tausertype === "true") ){		
										console.log("more than one corp!!");
										$('#otp-modal').modal('hide');
										// $('.modal-open .modal-backdrop').hide();
										$('#ta-popup-choose-customer').modal('show', {backdrop: 'static', keyboard: false});
										taPopulateCorpUserList(corpuserlistJSON)			
									}else{
										setTimeout(function() {
											redirectUser();
										}, 4000);
									}
									
								}
							
							} else {
								hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
								
								if (  verifyOTPResponse[0].loggedOut ) {
									//logout();
									$.ajax({
										url:'/qr/Logout',
										type: "POST",
										data: {
											logOut: "logOut",
											resource: "/en/Privilege-Club/loginpage.html"
										},
										cache: false,
										success:function(response) {
											if(response != undefined && response.errorObject != undefined && response.errorobject[0] != undefined){
												if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
													digitalData.page.pageInfo.pageType = 'verify-OTP-logOut-error';
												}
												errorClick(window.location.href, 'verify-OTP', 'login', response.errorObject[0].errorName);
											}
											$('.otp-verify-account-locked-error-message').removeClass('hidden').attr('style',"background: rgb(247, 229, 229); color: rgb(181, 0, 0); padding: 10px; border: 1px solid;");
											$('#otp_acnt_locked_login').attr('href',$('#loginPage').val());
											$('.otp-receive-help,#otp-resend-button, #profile-settings-otp-resend-button,#otp-verify-button').addClass('hide');
											$('.login-enter-otp-column #otp-value').closest('.input-base').css({'pointer-events':'none'});
											$('.login-enter-otp-column #otp-value').closest('.input-base').find('.input-base-bg').css({'background-color':'#cccccc'});
										}
									});
								} else {
									hideVerifyOTPErrorMessages();
									$('.invalid-otp-error-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
								}									
								//To-Do: Show custom error messages
							}
						} else {
							//To-Do: Show error messages based on the errorObject
							//console.log('Error from verifyOTP service');
							if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
								digitalData.page.pageInfo.pageType = 'verify-OTP-error';
							}
							errorClick(window.location.href, 'verify-OTP', 'login', verifyOTPResponse[0].errorObject[0].errorName);
							$('.otp-verify-service-error-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
							$('.otp-verify-service-error-message').html(verifyOTPResponse[0].errorObject[0].errorDescription);
							hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
							if (  verifyOTPResponse[0].loggedOut ) {
								//logout();
								$.ajax({
									url:'/qr/Logout',
									type: "POST",
									data: {
										logOut: "logOut",
										resource: "/en/Privilege-Club/loginpage.html"
									},
									cache: false,
									success:function(response) {
										if(response != undefined && response.errorObject != undefined && response.errorobject[0] != undefined){
											if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
												digitalData.page.pageInfo.pageType = 'verify-OTP-logOut-error';
											}
											errorClick(window.location.href, 'verify-OTP', 'login', response.errorObject[0].errorName);
										}
										$('.otp-verify-account-locked-error-message').removeClass('hidden').attr('style',"background: rgb(247, 229, 229); color: rgb(181, 0, 0); padding: 10px; border: 1px solid;");
										$('#otp_acnt_locked_login').attr('href',$('#loginPage').val());
										$('.otp-receive-help,#otp-resend-button, #profile-settings-otp-resend-button,#otp-verify-button,#otp-back-button').addClass('hide');
										$('.login-enter-otp-column #otp-value').closest('.input-base').css({'pointer-events':'none'});
										$('.login-enter-otp-column #otp-value').closest('.input-base').find('.input-base-bg').css({'background-color':'#cccccc'});
									}
								});
							}
							if(verifyOTPResponse[0].errorObject[0].errorName === 'SESSION_EXPIRED') {
								//console.log('Session got expired. Redirecting to Login page.....');
								$('.otp-verify-service-error-message').fadeOut(3000);
								setTimeout(function() {
									redirectToLogin(loginPage);
								}, 3000);
								hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
							}
						}
					});
				});	
			} else {
				hideVerifyOTPErrorMessages();
				hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
				$('.empty-otp-error-message').removeClass('hidden').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
			}
			
			
		}
		} catch(err) {}
		
	});
	

});


 
function saveNoOTPPreferences() {
	try {
	var saveOTPPreferenceServiceURL = $('#saveOTPPreferenceServiceURL').val();
	//console.log('saveOTPPreferenceServiceURL:BYPASS:' + saveOTPPreferenceServiceURL);
	
	if(saveOTPPreferenceServiceURL !== '' && saveOTPPreferenceServiceURL !== undefined) {
		
		//console.log('existingPreference:BYPASS:' + existingPreference);
		//console.log('newPreference:BYPASS:' + newPreference);
		//console.log('newChannel:BYPASS:' + newChannel);
		
		var customerProfileId = getUserBasicInfoField('customerProfileId');
		
		var saveOTPPreferenceRequest = {
			"customerProfileId": customerProfileId,
			"secureOTP": 'BYPASS',						
			"consentCheck": true
		};
		
		//if(existingPreference === 'BYPASS' && newPreference !== 'BYPASS') {
		if(newPreference !== 'BYPASS') {
			saveOTPPreferenceRequest = {
				"customerProfileId": customerProfileId,
				"secureOTP": newPreference,
				"receiveOTP": newChannel,
				"countryCode": newCountryCode,
				"mobileNumber": newMobileNumber,					
				"callingCode": newCountryCallingCode,
				"email": newEmail,
				"activity": 'UPDATE'
			};
			/*if (newChannel === 'SMS') {
				saveOTPPreferenceRequest = {
					"customerProfileId": customerProfileId,
					"secureOTP": newPreference,
					"receiveOTP": "SMS",
					"countryCode": newCountryCode,
					"mobileNumber": newMobileNumber,					
					"callingCode": newCountryCallingCode,
					"email": newEmail,
					"activity": 'UPDATE'
				};
			} else if(newChannel === 'EMAIL') {
				saveOTPPreferenceRequest = {
					"customerProfileId": customerProfileId,
					"secureOTP": newPreference,
					"receiveOTP": "EMAIL",
					"email": newEmail,
					"countryCode": newCountryCode,
					"callingCode": newCountryCallingCode,
					"mobileNumber": newMobileNumber,
					"activity": 'UPDATE'
				};
			} else if(newChannel === 'SMS_EMAIL') {
				saveOTPPreferenceRequest = {
					"customerProfileId": customerProfileId,
					"secureOTP": newPreference,
					"receiveOTP": "SMS_EMAIL",
					"countryCode": newCountryCode,
					"callingCode": newCountryCallingCode,
					"mobileNumber": newMobileNumber,
					"email": newEmail,
					"activity": 'UPDATE'
				};
			}*/
		}
		//console.log('saveOTPPreferenceRequest:BYPASS:', JSON.stringify(saveOTPPreferenceRequest));
					
		//console.log('saveOTPReqHeaders:BYPASS:', JSON.stringify(loginReq_headers));
		
		window.qrServiceRef.zone.run(function() {
			Promise.all([
				window.qrServiceRef.postReq(saveOTPPreferenceServiceURL, saveOTPPreferenceRequest, loginReq_headers, '', {})
			]).then(function(saveOTPPreferenceResponse) {		
				//console.log('saveOTPPreferenceResponse:BYPASS:', saveOTPPreferenceResponse[0]);
				var isOTPPreferenceSaved = saveOTPPreferenceResponse[0].status === true ? true : false;						
				//console.log('isOTPPreferenceSaved:BYPASS:', isOTPPreferenceSaved);
				if(isOTPPreferenceSaved) {
					//console.log('No OTP Preferences Saved Successfully........');
					updateUserOtherInfoField('otpPreference', newPreference);
					updateUserOtherInfoField('receiveOTP', newChannel);
					if(newChannel === 'SMS_EMAIL' || newChannel === 'EMAIL') {
						updateUserBasicInfoField('emailId', newEmail);
					}
					if(newChannel === 'SMS_EMAIL' || newChannel === 'SMS') {
						updateUserBasicInfoField('mobile', '+'+parseInt(newCountryCallingCode)+'-'+newMobileNumber);
					}
					$('.otp-preference-service-error-message, .no-otp-preference-service-error-message').attr('hidden', '');
					var otpFrom = getActualCookieValue("otpFrom");
					//console.log('otpFrom:', otpFrom);
					if(otpFrom === 'MYPROFILE'){
						hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
						deleteCookie('otpFrom');
						$('#no-otp-settings-success-message').removeClass('hidden').removeAttr('hidden').fadeOut(4000);
						setTimeout(function() {
							location.reload();
						}, 4000);
					} else {
						hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
						$('#no-otp-settings-success-message').removeAttr('hidden').removeClass('hidden').fadeOut(4000);
						setTimeout(function() {
							redirectUser();
						}, 4000);
					}
				} else {
					//console.log('Error in saving OTP Preferences');
					$('.no-otp-preference-service-error-message').html(saveOTPPreferenceResponse[0].errorObject[0].errorDescription);
					$('.no-otp-preference-service-error-message').removeClass('hidden');
					$('.no-otp-preference-service-error-message').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
					if(saveOTPPreferenceResponse[0] != undefined && saveOTPPreferenceResponse[0].errorObject  != undefined && saveOTPPreferenceResponse[0].errorObject[0]  != undefined){
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'save-OTP-preference-error';
						}
						errorClick(window.location.href, 'save-OTP-preference', 'login', saveOTPPreferenceResponse[0].errorObject[0].errorName);
					}
				}
				
			});
		});
	}
	} catch(err) {}
}


function updateOTPDetails(customerProfileIdParam) {
	try {
	var updateOTPDetailsServiceURL = $('#updateOTPDetailsServiceURL').val();
	//console.log('updateOTPDetailsServiceURL:', updateOTPDetailsServiceURL);
	
	if(updateOTPDetailsServiceURL !== '' && updateOTPDetailsServiceURL !== undefined) {
		
		var sessionToken = getFFPCookieValue("QRTOKEN");
		
		var updateOTPDetailsRequest = {
			"customerProfileId": customerProfileIdParam,
			"otpVerified": true,
			"token": sessionToken
		};
		
		//console.log('updateOTPDetailsRequest:', updateOTPDetailsRequest);

		window.qrServiceRef.zone.run(function() {
			Promise.all([
				window.qrServiceRef.postReq(updateOTPDetailsServiceURL, updateOTPDetailsRequest, loginReq_headers, '', {}),						
			]).then(function(response) {
				hideVerifyOTPErrorMessages();
				//console.log('updateOTPDetailsService:response[0]:', response[0]);	
				
				var isUpdateSuccess = response[0].status === true ? true : false;
				//console.log('isUpdateSuccess:', isUpdateSuccess);
				if(isUpdateSuccess) {
					var otpFrom = getActualCookieValue("otpFrom");
					//console.log('otpFrom:', otpFrom);
					if(otpFrom === 'MYPROFILE'){
						//$('#otp-modal').hide();
						//$('body .modal-backdrop').remove();
						deleteCookie('otpFrom');
						$('#otp-settings-success-message').removeClass('hidden').removeAttr('hidden').fadeOut(4000);
						buttonClickAction(window.location.href, 'update-OTP-details', 'myprofile otp');
						setTimeout(function() {
							location.reload();
						}, 4000);
					} else {
						hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
						buttonClickAction(window.location.href, 'update-OTP-details', 'login otp');
						$('#otp-verify-success-message').removeAttr('hidden').removeClass('hidden').fadeOut(4000);
						setTimeout(function() {
							redirectUser();
						}, 4000);
					}					
				} else {
					hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
					//To-Do: Show error messages from updateOTPDetails service response
					//console.log('Error from updateOTPDetails service');
					$('.otp-verify-service-error-message').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
					$('.otp-verify-service-error-message').html(response[0].errorObject[0].errorDescription);
					$('.otp-verify-service-error-message').removeClass('hidden');
					if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
						digitalData.page.pageInfo.pageType = 'update-OTP-details-error';
					}
					errorClick(window.location.href, 'update-OTP-details', 'login', response[0].errorObject[0].errorName);
				}
			});
		});
		
	} else {
		//console.log('updateOTPDetails Service is not configured properly');
	}
	} catch(err) {}
}


function verifyOTP(){
	try {
	location.hash="OTRG";
	window.onhashchange = function() {
		location.hash="OTRG"
	}
		$('#otp-modal #otp-modal-label').attr("tabindex", 0).focus();
	//console.log('verifyOTP is called');
	showSpinnerMobileApp($('#otp-preferences-spinner-container'),'spinner-full-page');
	var otpFrom = getActualCookieValue("otpFrom");
	//console.log('otpFrom:', otpFrom);
	
	var customerProfileId = getUserBasicInfoField('customerProfileId');
	//console.log('customerProfileId is:', customerProfileId);
	
	var ffpNumber = getUserBasicInfoField('ffpNumber');
	//console.log('ffpNumber:', ffpNumber);
	
	var getOTPPreferenceServiceURL = $('#getOTPPreferenceServiceURL').val();
	
	/*changes for Travel Agent Login */
	var isTAUser =  getActualCookieValue('tausertype');
	if(isTAUser !== undefined && isTAUser != "" && isTAUser === 'true'){
		getOTPPreferenceServiceURL	= $('#getCorpOTPPreferenceServiceURL').val();
	}
	/*changes for Travel Agent Login - END */

	//console.log('getOTPPreferenceServiceURL is:', getOTPPreferenceServiceURL);
	
	var programCode = getUserBasicInfoField('programCode');
	var loggedInUser = getUserBasicInfoField('loggedInUser');
	
	if(getOTPPreferenceServiceURL !== '' && getOTPPreferenceServiceURL !== undefined) {
		var getOTPPreferenceRequest = {
			"customerProfileId": customerProfileId
		};
		
		if(isTAUser !== undefined && isTAUser !="" && isTAUser === 'true' ){
			getOTPPreferenceRequest['customerProfileId'] = "";
		}

		if('QRBB' === programCode || 'NCP' === programCode){
			getOTPPreferenceRequest['programCode'] = programCode;
			getOTPPreferenceRequest['userName'] = loggedInUser;
		}
		
		//console.log('getOTPPreferenceRequest:', getOTPPreferenceRequest);
		loginReq_headers[''+authParameterName] = 'Bearer ' + getFFPCookieValue("QRTOKEN");
		//console.log('getOTPReqHeaders:' + JSON.stringify(loginReq_headers));
	
		window.qrServiceRef.zone.run(function() {
			Promise.all([
				window.qrServiceRef.postReq(getOTPPreferenceServiceURL, getOTPPreferenceRequest, loginReq_headers, '', {})
			]).then(function(getOTPPreferenceResponse) {
				//console.log('getOTPPreferenceResponse:', getOTPPreferenceResponse[0]);
				
				
				var secureOTP = getOTPPreferenceResponse[0].secureOTP;
				//console.log('secureOTP:' + secureOTP);
				secureOTPChannel = secureOTP;
				
				var receiveOTP = getOTPPreferenceResponse[0].receiveOTP;
				//console.log('receiveOTP:' + receiveOTP);
				newChannel = receiveOTP;
				
				receiveOTPChannel = receiveOTP;
				
				mobileNumber = getOTPPreferenceResponse[0].mobileNumber;
				//console.log('mobileNumber:' + mobileNumber);
				
				countryCallingCode = getOTPPreferenceResponse[0].callingCode;
				//console.log('countryCallingCode:' + countryCallingCode);
				ccc = getOTPPreferenceResponse[0].callingCode;
				//console.log('ccc:' + ccc);
				
				countryCode = getOTPPreferenceResponse[0].countryCode;
				//console.log('countryCode:' + countryCode);
				cc = getOTPPreferenceResponse[0].countryCode;
				//console.log('cc:' + cc);
				
				email = getOTPPreferenceResponse[0].email;
				//console.log('email:' + email);
				
				
				if((secureOTP == undefined && receiveOTP === undefined) || secureOTP == 'NEW' || otpFrom === 'MYPROFILE') {
					//$('body').append('<div class="modal-backdrop fade in"></div>');
					//$('#otp-modal').addClass('in');
					$('body').css({'display':'block'});
					$('#otp-modal').modal({backdrop:'static', keyboard:false});
                    //$('#otp-modal').modal('show');
					$('#otp-modal .login-secure-otp-block').removeClass('hidden');
					$('.otp-mobile-number-empty-message').attr('hidden', '');
					$('#otp-modal').attr("tabindex", 0).focus();
					if(otpFrom === 'MYPROFILE'){
						$('.login-enter-otp-column').addClass('hidden');
						if(secureOTP === 'LOGIN') {
							$('#otp-preference-0').attr('checked', 'checked');
						} else if(secureOTP === 'TRANSACTION') {
							$('#otp-preference-1').attr('checked', 'checked');
						} else if(secureOTP === 'BYPASS') {
							$('#otp-preference-2').attr('checked', 'checked');
						}
						
						//Get Countries - Start
						var getCountriesRequest = {};
						var getCountriesRequestHeaders = {};
						var getCountriesServiceURL = $('#getCountriesServiceURL').val();
						//console.log('getCountriesServiceURL:', getCountriesServiceURL);
						var i18nReqCountries = {
							"name": "countries",
							"srcDestMapcols" : [{src:"twoLetterCode",dest:"countryName"}]
						};
						window.qrServiceRef.zone.run(function() {
							Promise.all([
								window.qrServiceRef.postReq(getCountriesServiceURL, getCountriesRequest , getCountriesRequestHeaders, '/content/Qatar/i18n/common.services.master.allCountries.json', i18nReqCountries)
							]).then(function(countriesResponse) {										
								if(countriesResponse != undefined && countriesResponse[0] != undefined && countriesResponse[0].errorObject  != undefined && countriesResponse[0].errorObject[0]  != undefined){
									if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
										digitalData.page.pageInfo.pageType = 'get-countries-error';
									}
									errorClick(window.location.href, 'get-countries', 'login', countriesResponse[0].errorObject[0].errorName);
								}
								//console.log('countriesResponse:', countriesResponse[0]);
								var countries = countriesResponse[0].countries;
								////console.log('countries:', countries);
								var countriesList = customSortFunction(countries, 'countryName', true);
								////console.log('countriesList:', countriesList);
								$.each(countriesList, function(index, val) {
									var i = $("<option/>", {
										value: val.callingCode + '-' + val.twoLetterCode,
										'data-country-iso': val.twoLetterCode,
										text: val.countryName + ' (' + val.callingCode + ')'
									});
									////console.log('i:', i);
									$('#otp-country-code').append(i);
								});
								countryCallingCode = $("#otp-country-code option[data-country-iso="+countryCode+"]").attr("value");
								$('#otp-country-code').selecter('refresh');
								$('#otp-country-code').val(countryCallingCode);
								$('#otp-country-code').trigger('change');									
							});
						});
						//Get Countries - End
						
						if(mobileNumber !== undefined && mobileNumber !== '') {							
							$('#otp-telephone-number').val(mobileNumber);
							$('#otp-telephone-number').addClass('populated');
							$('#otp-telephone-number').parent().addClass('filled');
						} else {
							$('#otp-telephone-number').val('');
						}
						
						if(email !== undefined && email !== '') {
							$('#otp-email').val(email);
							$('#otp-email').addClass('populated');
						} else {
							$('#otp-email').val('');
						}
						
						if(receiveOTP === 'SMS') {
							$('#sms-channel').attr('checked', 'checked');
							$('#otp-email-block').addClass('hidden');
						} else if(receiveOTP === 'EMAIL') {
							$('#otp-countrycode-block').addClass('hidden');
							$('#email-channel').attr('checked', 'checked');
														
						} else if(receiveOTP === 'SMS_EMAIL') {
							$('#sms-email-channel').attr('checked', 'checked');
						} else {
							$('.otp-channels').addClass('hidden');
							$('.otp-consent-checkbox').removeClass('hidden');
							$('#otp-consent-checkbox').attr('checked', 'checked');
						}
						hideSpinnerMobileApp($('#otp-preferences-spinner-container'),'spinner-full-page');
					} else {
						//document.cookie = 'activity=LOGIN' + ';path=/';
						updateUserOtherInfoField('activity', 'LOGIN');
						$('#otp-preference-1').attr('checked', 'checked');
						$('#otp-telephone-number').val(mobileNumber);
						if(mobileNumber !== undefined && mobileNumber !== '') {
							$('#otp-telephone-number').addClass('populated');
							$('#otp-telephone-number').parent().addClass('filled');
						} else {
							$('#otp-telephone-number').val('');
						}
						
						if(email !== undefined && email !== '') {
							$('#otp-email').val(email);
							$('#otp-email').addClass('populated');
						} else {
							$('#otp-email').val('');
						}
						
						var getCountriesRequest = {};
						var getCountriesRequestHeaders = {};
						var getCountriesServiceURL = $('#getCountriesServiceURL').val();
						//console.log('getCountriesServiceURL:', getCountriesServiceURL);
						var i18nReqCountries = {
							"name": "countries",
							"srcDestMapcols" : [{src:"twoLetterCode",dest:"countryName"}]
						};
						window.qrServiceRef.zone.run(function() {
							Promise.all([
								window.qrServiceRef.postReq(getCountriesServiceURL, getCountriesRequest , getCountriesRequestHeaders, '/content/Qatar/i18n/common.services.master.allCountries.json', i18nReqCountries)
							]).then(function(countriesResponse) {										
								if(countriesResponse  != undefined && countriesResponse[0] != undefined && countriesResponse[0].errorObject  != undefined && countriesResponse[0].errorObject[0]  != undefined){
									if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
										digitalData.page.pageInfo.pageType = 'get-countries-error';
									}
									errorClick(window.location.href, 'get-countries', 'login', countriesResponse[0].errorObject[0].errorName);
								}
								//console.log('countriesResponse:', countriesResponse[0]);
								var countries = countriesResponse[0].countries;
								////console.log('countries:', countries);
								var countriesList = customSortFunction(countries, 'countryName', true);
								////console.log('countriesList:', countriesList);
								$.each(countriesList, function(index, val) {
									var i = $("<option/>", {
										value: val.callingCode + '-' + val.twoLetterCode,
										'data-country-iso': val.twoLetterCode,
										text: val.countryName + ' (' + val.callingCode + ')'
									});
									////console.log('i:', i);
									$('#otp-country-code').append(i);
								});
								countryCallingCode = $("#otp-country-code option[data-country-iso="+countryCode+"]").attr("value");
								if($('form#join-form').length == 0) {
									$('#otp-country-code').selecter();
								}								
								$('#otp-country-code').val(countryCallingCode);	
								$('#otp-country-code').selecter('refresh');		
								$('#otp-country-code').trigger('change');	
							});
						});					
						hideSpinnerMobileApp($('#otp-preferences-spinner-container'),'spinner-full-page');
						/*	Enable or Disable contact details	-	START	*/
						var enableDisableOTPContacts = 'disable';
						if(enableDisableOTPContacts === 'disable'){
							if(mobileNumber !== undefined && mobileNumber !== '') {
								$('#otp-country-code, #otp-telephone-number').attr('disabled','disabled');
							}
							if(email !== undefined && email !== '') {
								$('#otp-email').attr('disabled','disabled');
							}
							$(document).bind("contextmenu",function(e){
								return false;
							});
						}
						/*	Enable or Disable contact details	-	END	*/
						/*	Disable SMS and SMS + EMAIL option for Lead Ads users	-	START	*/
						var source = getOTPPreferenceResponse[0].source;
						if(source === 'ADSGOOGLE'){
							$('#sms-channel').attr('disabled','disabled');
							$('#sms-email-channel').attr('disabled','disabled');
							$('#otp-countrycode-block').addClass('hidden');
							$('#email-channel').attr('checked', 'checked');
							$(document).bind("contextmenu",function(e){
								return false;
							});
							buttonClickAction(window.location.href, source + '-get-OTP-details', 'login otp');
						} else {
							$('#sms-email-channel').attr('checked', 'checked');
						}
						/*	Disable SMS and (SMS + EMAIL) option for Lead Ads users	-	END	*/
					}					
					
				} else if (secureOTP == 'LOGIN') {
					showSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
					skipSaveOtpPreference = true;
					//$('body').append('<div class="modal-backdrop fade in"></div>');
					//$('#otp-modal').addClass('in');
					var sendOTPServiceURL = $('#sendOTPServiceURL').val();
					if(isTAUser !== undefined && isTAUser != "" && isTAUser === 'true'){
						sendOTPServiceURL = $('#sendCorpOTPServiceURL').val();
					}
					//console.log('sendOTPServiceURL:' + sendOTPServiceURL);
					//document.cookie = 'activity=LOGIN' + ';path=/';
					updateUserOtherInfoField('activity', 'LOGIN');
					newMobileNumber = mobileNumber;
					newEmail = email;
					var isEmailIDValid = true;
					if(receiveOTP === 'EMAIL' && (email === undefined || email === '')) {
						isEmailIDValid = false;
						triggerEmailValidation();
					}
					
					if(sendOTPServiceURL !== '' && sendOTPServiceURL !== undefined) {
						var sendOTPRequest = formSendOTPRequest(customerProfileId, ffpNumber, mobileNumber, countryCallingCode, countryCode, email, receiveOTP, 'LOGIN', isTAUser);
						
						var element, textMessage, digitsToShow = 4, charsToShow = 3;
						switch(receiveOTP) {
							
							case "SMS" :
									element = $('.mobile-help-text');
									textMessage = $('.mobile-help-text').text()
									textMessage = textMessage.replace('{0}', getShortMobileNumber(mobileNumber, digitsToShow));
								break;
							case "EMAIL" :
									element = $('.email-help-text');
									textMessage = $('.email-help-text').text();
									textMessage = textMessage.replace('{0}', getShortEmailID(email, charsToShow));
								break;
							case "SMS_EMAIL" :
									element = $('.mobile-email-help-text');
									textMessage = $('.mobile-email-help-text').text();
									textMessage = textMessage.replace('{0}', getShortMobileNumber(mobileNumber, digitsToShow));
									textMessage = textMessage.replace('{1}', getShortEmailID(email, charsToShow));
								break;
						}
						$(element).text(textMessage);
						$(element).removeClass('hidden');
						
						//console.log('sendOTPRequest:' + JSON.stringify(sendOTPRequest));
						//console.log('sendOTPReqHeaders:', JSON.stringify(loginReq_headers));
						if(isEmailIDValid){
							$('body').css({'display':'block'});
                            $('#otp-modal').modal({backdrop:'static', keyboard:false});
						//$('#otp-modal').modal('show');
						$('#otp-modal .login-secure-otp-block').addClass('hidden');
						$('#otp-back-button').addClass('hidden');
						$('.login-enter-otp-column').removeClass('hidden');
						$('#otp-modal').attr("tabindex", 0).focus();
						if('QRBB' === programCode || 'NCP' === programCode) {
							sendOTPRequest['programCode'] = programCode;
							sendOTPRequest['userName'] = loggedInUser;
						}
						if( getUserBasicInfoField("customerProfileId") == undefined || getUserBasicInfoField("customerProfileId") == '' || getUserBasicInfoField("customerProfileId") == null ) {
							return false;
						}
						window.qrServiceRef.zone.run(function() {
							Promise.all([
								window.qrServiceRef.postReq(sendOTPServiceURL, sendOTPRequest, loginReq_headers, '', {})
							]).then(function(sendOTPResponse) {
								hideSpinnerMobileApp($('#otp-screen-spinner-container'),'spinner-full-page');
								//console.log('Login: sendOTPResponse:', sendOTPResponse[0]);									
								if(sendOTPResponse[0].errorObject === undefined) {
									$('.otp-preference-service-error-message').attr('hidden', '');
									sendOTPContactDetails = sendOTPResponse[0].contactDetails;
									//console.log('sendOTPContactDetails:', sendOTPContactDetails);						
									buttonClickAction(window.location.href, 'send-OTP', 'login otp');
									showOtpTimer($("#otp-modal #otpcountdowntimer"), $("#otp-modal #otp-resend-button"));
								} else {
									if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
										digitalData.page.pageInfo.pageType = 'send-OTP-error';
									}
									errorClick(window.location.href, 'send-OTP', 'login', sendOTPResponse[0].errorObject[0].errorName);
									if( sendOTPResponse[0].errorObject[0].errorName === 'FFP_MAX_OTP_ATTEMPTS_EXCEEDED_FOR_TIME' ) {
									$.ajax({
										url:'/qr/Logout',
										type: "POST",
										data: {
											logOut: "logOut",
											resource: "/en/Privilege-Club/loginpage.html"
										},
										cache: false,
										success:function(response) {
											if(response != undefined && response.errorObject != undefined && response.errorobject[0] != undefined){
												if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
													digitalData.page.pageInfo.pageType = 'logOut-error';
												}
												errorClick(window.location.href, 'logOut', 'login', response.errorObject[0].errorName);
											}
											$('.otp-verify-account-locked-error-message').removeClass('hidden').attr('style',"background: rgb(247, 229, 229); color: rgb(181, 0, 0); padding: 10px; border: 1px solid;");
											$('#otp_acnt_locked_login').attr('href',$('#loginPage').val());
											$('.otp-receive-help,#otp-resend-button, #profile-settings-otp-resend-button,#otp-verify-button').addClass('hide');
											$('.login-enter-otp-column #otp-value').closest('.input-base').css({'pointer-events':'none'});
											$('.login-enter-otp-column #otp-value').closest('.input-base').find('.input-base-bg').css({'background-color':'#cccccc'});
										}, 
										error:function(response){
											$('.otp-verify-account-locked-error-message').removeClass('hidden').attr('style',"background: rgb(247, 229, 229); color: rgb(181, 0, 0); padding: 10px; border: 1px solid;");
											$('#otp_acnt_locked_login').attr('href',$('#loginPage').val());
											$('.otp-receive-help,#otp-resend-button, #profile-settings-otp-resend-button,#otp-verify-button').addClass('hide');
											$('.login-enter-otp-column #otp-value').closest('.input-base').css({'pointer-events':'none'});
											$('.login-enter-otp-column #otp-value').closest('.input-base').find('.input-base-bg').css({'background-color':'#cccccc'});
										}
									});
									} else {
										$('.otp-verify-service-error-message').removeClass('hidden');
										$('.otp-verify-service-error-message').html(sendOTPResponse[0].errorObject[0].errorDescription);
										$('.otp-verify-service-error-message').css({'background':'#f7e5e5','color':'#b50000','padding':'10px','border':'1px solid'}).removeAttr('hidden').focus();
										
										if(sendOTPResponse[0].errorObject[0].errorName === 'SESSION_EXPIRED') {
											//console.log('Session got expired. Redirecting to Login page.....');
											$('.otp-verify-service-error-message').fadeOut(3000);
											setTimeout(function() {
												redirectToLogin(loginPage);
											}, 3000);
										}
									}
								}

							});
						});
						}
					} else {
						//console.log('sendOTP Service is not configured properly');
					}

				} else if (secureOTP == 'BYPASS') {
					//saveNoOTPPreferences();
					redirectUser();
				} else if (secureOTP == 'TRANSACTION') {
					redirectUser();
				}
				
				if(getOTPPreferenceResponse !== undefined && getOTPPreferenceResponse[0] != undefined && getOTPPreferenceResponse[0].errorObject  != undefined && getOTPPreferenceResponse[0].errorObject[0]  != undefined){
					if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
						digitalData.page.pageInfo.pageType = 'get-OTP-preference-error';
					}
					errorClick(window.location.href, 'get-OTP-preference', 'login', getOTPPreferenceResponse[0].errorObject[0].errorName);
				}



			});
		});

	} else {
		//console.log('getOTPPreference Service is not configured properly');
	}

	} catch(err) {}
}

function formSendOTPRequest(customerProfileId, ffpNumber, mobileNumber, countryCallingCode, countryCode, email, receiveOTP, sendOTPActivity, isTAUser) {
	var sendOTPRequest = {
		"customerProfileId": customerProfileId,
		"activity": sendOTPActivity,
		"ffpNumber": ffpNumber													
	};
	if(isTAUser !== undefined && isTAUser != "" && isTAUser === 'true'){
		sendOTPRequest['customerProfileId'] = "";
		sendOTPRequest['ffpNumber'] = "";
	}
	switch(receiveOTP) {
							
		case "SMS" :
				sendOTPRequest["contactDetails"] = [
					{
					  "contactType": "MOBILE",
					  "contactValue": mobileNumber,
					  "countryCallingCode": countryCallingCode,
					  "countryCode": countryCode
					}
				]
			break;
		case "EMAIL" :
				sendOTPRequest["contactDetails"] = [
					{
					  "contactType": "EMAIL",
					  "contactValue": email															  
					}
				]
			break;
		case "SMS_EMAIL" :
				sendOTPRequest["contactDetails"] = [
					{
					  "contactType": "EMAIL",
					  "contactValue": email
					},
					{
					  "contactType": "MOBILE",
					  "contactValue": mobileNumber,
					  "countryCallingCode": countryCallingCode,
					  "countryCode": countryCode
					}															
				]
				
			break;
	}
	return sendOTPRequest;
}


function hideVerifyOTPErrorMessages() {
	try {
		$('.invalid-otp-error-message, .empty-otp-error-message, .otp-verify-service-error-message').attr('hidden', '').addClass('hidden');
	} catch(err) {}
}
var availableDataForgot = '', isSMEFlow = false, userName = '', fpOTP = '', fpToken = '', isPasswordsSame = false, np = '', forgotPasswordRequest = {}, isOfflineFlow = false, fpUserType = 'privilegeclub-forgot-password';

var verifyCaptchaForgot = function(response) {
	availableDataForgot = response;
    if( response.length > 0 ) {
    	$('.forgetPasswordSendButton').css({'pointer-events':'auto','opacity':'1'});
		$('#social-login-block').find('div').eq(0).css({'visibility':'hidden'});
		$('#social-login-block').find('.back-to-login').css({'visibility':'visible'});
    } else {
		if( !isMobileApp() ){
			$('.forgetPasswordSendButton').css({'pointer-events':'none','opacity':'0.4'});
		}
    }
}

var expiredCaptchaForgot = function() {
	availableDataForgot = "";
	if( !isMobileApp() ){
		$('.forgetPasswordSendButton').css({'pointer-events':'none','opacity':'0.4'});
	}
}

var resetForgotCaptcha = function() {
	availableDataForgot = '';
	if( !isMobileApp() ){
		if( typeof grecaptcha != 'undefined' ) {
			grecaptcha.reset(widgetForgotId);
		}
		$('.forgetPasswordSendButton').css({'pointer-events':'none','opacity':'0.4'});
	}
}

function forgotPassword() {
	
	
	try {
    showSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
    userName = $('.forgotPasswordUserName').val();
    //console.log('userName:', userName);

    var forgotPasswordServiceURL = $('#forgotPasswordServiceURL').val();
    //console.log('forgotPasswordServiceURL:', forgotPasswordServiceURL);

    if (userName === '') {
        $('.forgetPasswordNoInputErrorMessage').removeClass('hide');
		$('.forgetPasswordNoInputErrorMessage').closest('.error-box').removeClass('hide');
		$('#f1002').focus();
        $('.forgetPasswordSendButton').removeClass('hide');
        $('.forgetPasswordNote').addClass('hide');
        $('.forgetPasswordErrorMessage').addClass('hide');
		$('.forgetPasswordErrorMessage').closest('.error-box').addClass('hide');
        $('.forgetPasswordSuccessMessage').addClass('hide');
		$('.forgetPasswordSuccessMessage').closest('.sucsmsg-bar').addClass('hide');
        hideSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
        if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
        	digitalData.page.pageInfo.pageType = 'FP_NO_INPUT';
        }
		errorClick(window.location.href, 'forgot-password', fpUserType, 'FP_NO_INPUT');
		resetForgotCaptcha();
    } else {
		forgotPasswordRequest = {
			"userName": userName,
			"additionalInfo": availableDataForgot
		};
		if(location.search.indexOf("activityCode=SME") != -1 ) {
			isSMEFlow = true;
			forgotPasswordRequest['programCode'] = 'QRBB';
			forgotPasswordRequest['activity-code'] = 'SME';
			fpUserType = 'beyondbusiness-forgot-password';
        } else {
			fpUserType = 'privilegeClub-forgot-password';
			var tgtCookie = getCookieValueAsIs('tgtCookie');
			if(tgtCookie !== null && tgtCookie !== '' && tgtCookie === 'veriCode'){
				isSMEFlow = true;
                s.events = 'event188';
                s.eVar86 = s.pageName;
                if($('#sc_variable').val() == 'true') {
                    s.t();
                }
			} else {
				forgotPasswordRequest['resetType'] = 'OTP';
                s.events = 'event182';
                s.eVar86 = s.pageName;
                if($('#sc_variable').val() == 'true') {
                    s.t();
                }
			}
        }
		if( isMobileApp() ){
			forgotPasswordRequest['j_platform'] = mobilePlatform;
		} else if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
			forgotPasswordRequest['j_platform'] = 'MWEB';
		} else {
			forgotPasswordRequest['j_platform'] = 'WEB';
		}
		forgotPasswordRequest['C_FOR_TYPE'] = $('#FFP_CAPTCHA_FORGOT').val();
		
		if( $('#FFP_CAPTCHA_FORGOT').val() === 'BOT' ) {
			forgotPasswordRequest['C_BT_ID'] = forgotPasswordCaptcha.captchaId;
			forgotPasswordRequest['C_BT_CODE'] = $('#fpCaptchaCode').val();
		}
		
		console.log('forgotPasswordRequest:', forgotPasswordRequest);
		$.ajax({
			url: '/qr/bot/forgotpassword',
			method: 'POST',
			cache: false,
			data : forgotPasswordRequest,
			success: function(response){
				hideLoginMessages();
				//console.log('response:', response);
				response = JSON.parse(response);
				deleteCookie('SAC_ERROR');
				hideSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
				var isEmailSent = response.isEmailSent;
				fpToken = response.token;
				//console.log('isEmailSent:', isEmailSent);
				if (typeof isEmailSent !== "undefined") {
					if (isEmailSent) {
						if(isSMEFlow){
						$('.forgetPasswordNote').addClass('hide');
						$('.forgetPasswordErrorMessage').addClass('hide');
						$('.forgetPasswordErrorMessage').closest('.error-box').addClass('hide');
						$('.forgetPasswordNoInputErrorMessage').addClass('hide');
						$('.forgetPasswordNoInputErrorMessage').closest('.error-box').addClass('hide');
						$('.forgetPasswordSuccessMessage').removeClass('hide');
						$('.forgetPasswordSuccessMessage').closest('.sucsmsg-bar').removeClass('hide').focus();
						$('.forgetPasswordInputForm').addClass('hide');
						$('.forgetPasswordSendButton').addClass('hide');
						buttonClickAction(window.location.href, 'forgot-password-email-success', fpUserType);
						} else {
							forgotPasswordRequest['otpSalt'] = fpToken;
							forgotPasswordRequest['refreshToken'] = response.refreshToken;
                            $('.login-drop-column.j-login-action').addClass('delVertLine');
                            $('.smeContainer').addClass('hide');
                            $('.login-drop-column.create-profile-popup').addClass('hide');
							$('#fp-otp-success-message').removeClass('hide');
							$('#enter-otp').addClass('flip-side-1').removeClass('flip-side-2');
							$('#j-login-form, #forgot-password, #update-new-password').addClass('flip-side-2').removeClass('flip-side-1');
							buttonClickAction(window.location.href, 'forgot-password-OTP-success', fpUserType);
							showOtpTimer($("#fp-otpcountdowntimer"), $("#resend-fp-otp-btn"));
						}
						if( $('#FFP_CAPTCHA_FORGOT').val() === 'GOOGLE' ) {
							$('#forgotCaptcha').hide();
							resetForgotCaptcha();
						} else if( $('#FFP_CAPTCHA_FORGOT').val() === 'BOT' ) {
							forgotPasswordCaptcha.reloadImage();
							resetForgotCaptcha();
							$('#forgot-botdetect-captcha').parent().hide();
						}
						//alert("We will send you a password-reset link to your mailbox");
					}
				} else {
					resetForgotCaptcha();
					$('.forgetPasswordNote').addClass('hide');
					$('.forgetPasswordNoInputErrorMessage').addClass('hide');
					$('.forgetPasswordNoInputErrorMessage').closest('.error-box').addClass('hide');
					var errorObject = response.errorObject[0];
					if(errorObject != undefined && errorObject.errorName != undefined && errorObject.errorName.trim() === 'FFP_AUTH_USR_EMAIL_NOT_VRFD'){
						$('#f1003').val('');
						$('#j_socialMediaEmail').val('');
						var alertMessage = $('#email-verification-alert-message').val();
						var resendVerificationLinkLabel = $('#resend-verification-link-label').val();
						var resendVerificationLink = '<a href="javascript:void(0)" id="resend-verification-link"><u>' + resendVerificationLinkLabel + '</u></a>';
						var finalAlertMessage = alertMessage.replace('${0}', resendVerificationLink);
						$('#login-alert-message .alert-message').html(finalAlertMessage);
						$('#login-alert-message').removeClass('hidden');
						return false;
					}
					var errorMessage = '';
					var errorDescription = response.errorObject[0].errorDescription;
					if(errorDescription !== undefined){
						errorMessage = errorDescription + '';
					} else {
						errorMessage = Granite.I18n.get(response.errorObject[0].errorName) + '';
					}
					if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
						digitalData.page.pageInfo.pageType = 'forgot-password-service-error';
					}
					errorClick(window.location.href, 'forgot-password', fpUserType, response.errorObject[0].errorName);
					$('.forgetPasswordErrorMessage').html(errorMessage);
					$('.forgetPasswordErrorMessage').removeClass('hide');
					$('.forgetPasswordErrorMessage').closest('.error-box').removeClass('hide').focus();
					//console.log("Error: " + response.errorObject[0].errorCode + "===" +response.errorObject[0].errorDescription);
					$('.back-to-login.j-login-action-toggle').parent().css({'margin-top':'20px'});
					if( $('#FFP_CAPTCHA_FORGOT').val() === 'GOOGLE' ) {
						resetForgotCaptcha();
					} else if( $('#FFP_CAPTCHA_FORGOT').val() === 'BOT' ) {
						forgotPasswordCaptcha.reloadImage();
						resetForgotCaptcha();
					}
				}
			}
		});
		/*
		if (forgotPasswordServiceURL !== '') {
			window.qrServiceRef.zone.run(function() {
				var forgotPasswordRequest = {
					"userName": userName
				};
				//console.log('forgotPasswordRequest:', forgotPasswordRequest);
				var forgotPasswordHeaders = {
					'Content-Type': 'application/json'
				};
				$('.back-to-login.j-login-action-toggle').parent().css({'margin-top':'0px'});

                window.qrServiceRef.postReq(forgotPasswordServiceURL, forgotPasswordRequest, forgotPasswordHeaders, '', {}).then(function(response) {
					//console.log('response:', response);
                    hideSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
					var isEmailSent = response.isEmailSent;
					//console.log('isEmailSent:', isEmailSent);
					if (typeof isEmailSent !== "undefined") {
						if (isEmailSent) {
							$('.forgetPasswordNote').addClass('hide');
							$('.forgetPasswordErrorMessage').addClass('hide');
							$('.forgetPasswordErrorMessage').closest('.error-box').addClass('hide');
							$('.forgetPasswordNoInputErrorMessage').addClass('hide');
							$('.forgetPasswordNoInputErrorMessage').closest('.error-box').addClass('hide');
							$('.forgetPasswordSuccessMessage').removeClass('hide');
							$('.forgetPasswordSuccessMessage').closest('.sucsmsg-bar').removeClass('hide').focus();
							$('.forgetPasswordInputForm').addClass('hide');
							$('.forgetPasswordSendButton').addClass('hide');
							//alert("We will send you a password-reset link to your mailbox");
						}
					} else {
						$('.forgetPasswordNote').addClass('hide');
						$('.forgetPasswordNoInputErrorMessage').addClass('hide');
						$('.forgetPasswordNoInputErrorMessage').closest('.error-box').addClass('hide');
                        var errorMessage = response.errorObject[0].errorDescription + '';
                        $('.forgetPasswordErrorMessage').html(errorMessage);
						$('.forgetPasswordErrorMessage').removeClass('hide');
						$('.forgetPasswordErrorMessage').closest('.error-box').removeClass('hide').focus();
                        //console.log("Error: " + response.errorObject[0].errorCode + "===" +response.errorObject[0].errorDescription);
						$('.back-to-login.j-login-action-toggle').parent().css({'margin-top':'20px'});
						resetForgotCaptcha();
					}

				});
			});
		} else {
			//console.log('Forgot Password Service URL is not configured properly');
		}*/
    }
	  } catch(err) {}
}

function hidePswdErrorMessages() {
	$('.rpPswdEmptyErrMsg').addClass('hide');
	$('.rpPswdInvalidErrMsg').addClass('hide');
}

function hideCnfPswdErrorMessages() {
	$('.rpCnfPswdEmptyErrMsg').addClass('hide');
	$('.rpCnfPswdInvalidErrMsg').addClass('hide');
}


$(document).ready(function() {
	$('.j-login-action-toggle').on('click', function() {
		$("#fp-otp").val('');
		$('.j-login-action').toggleClass('toggled');
		$('#f1002').focus();
	});
	
	$('#qrpc-reset-password-btn').css({'pointer-events':'none','opacity':'0.4'});
	if($('#isPublishInstance').val() === 'false'){
		$('#update-new-password').removeClass('front-flip');
	}
	$("#resetshowpassword").on("click", function(d) {
        $(this).prop("checked") ? $("#fp-pswd").attr("type", "text") : $("#fp-pswd").attr("type", "password")
    });
    $("#resetconfirmshowpassword").on("click", function(d) {
        $(this).prop("checked") ? $("#fp-confirm-pswd").attr("type", "text") : $("#fp-confirm-pswd").attr("type", "password")
    });
	
	$('#fpCaptchaCode').on('validatecaptcha', function(event, isCorrect) {
		if( isCorrect ) {
			$('.forgetPasswordSendButton').css({'pointer-events':'auto','opacity':'1'});
			$('#social-login-block').find('div').eq(0).css({'visibility':'hidden'});
			$('#social-login-block').find('.back-to-login').css({'visibility':'visible'});
		} else {
			if( !isMobileApp() ){
				$('.forgetPasswordSendButton').css({'pointer-events':'none','opacity':'0.4'});
			}
		}
	});
	
	$('.submit-otp-btn').on('click', function(){
		showSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
		$('.vrpServiceErrorMessage').addClass('hide');
		fpOTP = $('#fp-otp').val();
		if(fpOTP !== undefined && fpOTP !== ''){
			var verifyRPTokenServiceURL = $('#verifyRPTokenServiceURL').val();
			var verifyRPTokenServiceRequest = {
				"userName": userName,
				"resetPasswordToken": fpToken,
				"resetType": "OTP",
				"otp": fpOTP,
			};
			$.ajax({
					url: verifyRPTokenServiceURL,
					type: 'POST',
					contentType: 'application/json; charset=utf-8',
					dataType: 'json',
					data: JSON.stringify(verifyRPTokenServiceRequest),
					cache: false,
					success: function(response) {
						hideSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
						var errorObject = response.errorObject;
						if(errorObject === undefined){
							buttonClickAction(window.location.href, 'fp-OTP-verification-success', 'privilegeClub-forgot-password');
							$('#update-new-password').addClass('flip-side-1').removeClass('flip-side-2');
							$('#j-login-form, #forgot-password, #enter-otp').addClass('flip-side-2').removeClass('flip-side-1');
							var accountDetailsEnable = false; 
                            var consentsResponseLength = response.consents.length;
							if( response.consents != undefined && consentsResponseLength > 0 ){
								isOfflineFlow = true;
								$.each(response.consents, function(index, value) {
									var consentValue = value.consentType;
									var emailEnabled = value.emailEnabled;
									var  smsEnabled = value.smsEnabled;	
									if( consentValue === 'ACCOUNTDETAILS' && ( emailEnabled || smsEnabled ) ) {
										$('[name="privilegeClubTerms"]').prop('checked',true);
										$('[name="privilegeClubTerms"]').parent().addClass('hide');
                                        $('#pcTerms').find('.simplify-consent-text').addClass('hide');
										accountDetailsEnable = true;
									} else if( consentValue === 'QROFFERS'  && emailEnabled ) {
										$('[name="privilegeClubNotifyTerms"]').prop('checked',true);
									} else if( consentValue === 'QRPCOFFERS'  && emailEnabled ) {
										$('[name="privilegeClubNotifyTerms3"]').prop('checked',true);
									} else if( consentValue === 'QRPCPARTNEROFFERS'  && emailEnabled ) {
										$('[name="privilegeClubNotifyTerms2"]').prop('checked',true);
									}
								});
								$('#fp-offline-tnc').removeClass('hidden');
							}
							if(response.consents != undefined && consentsResponseLength == 1 && accountDetailsEnable ){
                               $('.pcnotifyTerms .simplified-consent-wrapper').addClass('hide');								
							}
							s.events = 'event185';
							s.eVar86 = s.pageName;
							if($('#sc_variable').val() == 'true') {
								s.t();
							}
						} else {
							$('.vrpServiceErrorMessage').text(Granite.I18n.get(errorObject[0].errorName)).removeClass('hide');
							s.events = 'event184';
							s.eVar86 = s.pageName;
							if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
								digitalData.page.pageInfo.pageType = 'fp-verify-token-otp-validation-service-error';
							}
							errorClick(window.location.href, 'forgot-password-verify-OTP', fpUserType, errorObject[0].errorName);
							if($('#sc_variable').val() == 'true') {
								s.t();
							}
						}
					}
			});
		}
    });
	
	$('#qrpc-reset-password-btn').on('click', function(){
		showSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
		$('.rpServiceErrorMessage').addClass('hide');
		var resetPasswordServiceURL = $('#resetPasswordServiceURL').val();
		np = $('#fp-pswd').val();
		var resetPasswordServiceRequest = {
			"newPassword": np,
			"customerType": "INDV",
			"userName": userName,
			"token": fpToken,
			"resetType": "OTP",
			"otp": fpOTP,
		};
		if(isOfflineFlow){
			var consents = [];
			if( $('[name="privilegeClubTerms"]').is(':checked') ) {
				var jsonObject = {
					"consentType": "ACCOUNTDETAILS",
					"emailEnabled": true,
					"smsEnabled": true
				};
				consents.push(jsonObject);
			}
			if( $('[name="privilegeClubNotifyTerms"]').is(':checked') ) {
				var jsonObject = {
					"consentType": "QROFFERS",
					"emailEnabled": true,
					"smsEnabled": true
				};
				consents.push(jsonObject);
			}
			var isQRPCOffersEnabled = $('#isQRPCOffersEnabled').val();
			if(isQRPCOffersEnabled === 'true' && $('[name="privilegeClubNotifyTerms3"]').is(':checked')){
				var qrOffersObject = {
					"consentType": "QRPCOFFERS",
					"emailEnabled": true,
					"smsEnabled": true
				};
				consents.push(qrOffersObject);
			} else {
				var qrOffersObject = {
					"consentType": "QRPCOFFERS",
					"emailEnabled": true,
					"smsEnabled": true
				};
				consents.push(qrOffersObject);
			}
			if( $('[name="privilegeClubNotifyTerms2"]').is(':checked') ) {
				var jsonObject = {
					"consentType": "QRPCPARTNEROFFERS",
					"emailEnabled": true,
					"smsEnabled": true
				};
				consents.push(jsonObject);
			}
			console.log("consents "+JSON.stringify(consents));
			resetPasswordServiceRequest['consents'] = consents;
		}
		$.ajax({
				url: resetPasswordServiceURL,
				type: 'POST',
				contentType: 'application/json; charset=utf-8',
				dataType: 'json',
				data: JSON.stringify(resetPasswordServiceRequest),
				cache: false,
				success: function(response) {
					hideSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
					var errorObject = response.errorObject;
					var isPasswordReset = response.isPasswordReset;
					if(errorObject === undefined && isPasswordReset){
						$('#resetpassword-success-modal').modal();
						s.events = 'event187';
						s.eVar86 = s.pageName;
						if($('#sc_variable').val() == 'true') {
							s.t();
						}
						buttonClickAction(window.location.href, 'fp-OTP-reset-password-success', 'privilegeClub-forgot-password');
					} else {
						$('.rpServiceErrorMessage').text(Granite.I18n.get(errorObject[0].errorName)).removeClass('hide');
						s.events = 'event186';
						s.eVar86 = s.pageName;
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'reset-password-service-error';
						}
						errorClick(window.location.href, 'reset-password', fpUserType, errorObject[0].errorName);
						if($('#sc_variable').val() == 'true') {
							s.t();
						}
					}
				}
		});
	});
	$('#fp-pswd').on('blur', function(){
		hidePswdErrorMessages();
		isPasswordsSame =  false;
		var fpPswd = $(this).val();
		if(fpPswd !== '' && fpPswd !== undefined) {
			var isValidFpPswd = isValidPassword(fpPswd);
			if(isValidFpPswd) {
				var fpConfirmPswd = $('#fp-confirm-pswd').val();
				if(fpConfirmPswd !== '' && fpConfirmPswd !== undefined) {
					if(fpPswd !== fpConfirmPswd){
						isPasswordsSame =  false;
						$('.rpMismatchErrMsg').removeClass('hide');
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'RP_OTP_PSWD_MISMATCH';
						}
						errorClick(window.location.href, 'reset-password', fpUserType, 'RP_OTP_PSWD_MISMATCH');
					} else {
						isPasswordsSame = true;
						$('.rpMismatchErrMsg').addClass('hide');
					}
				}
			} else {
				$('.rpPswdInvalidErrMsg').removeClass('hide');
				if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
					digitalData.page.pageInfo.pageType = 'RP_OTP_INVALID_PSWD';
				}
				errorClick(window.location.href, 'reset-password', fpUserType, 'RP_OTP_INVALID_PSWD');
			}
		} else {
			$('.rpPswdEmptyErrMsg').removeClass('hide');
			if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
				digitalData.page.pageInfo.pageType = 'RP_OTP_EMPTY_PSWD';
			}
			errorClick(window.location.href, 'reset-password', fpUserType, 'RP_OTP_EMPTY_PSWD');
		}
		if(isPasswordsSame){
			if(isOfflineFlow){
				if($('#f1211').is(':checked')) {
					$('#qrpc-reset-password-btn').css({'pointer-events':'auto','opacity':'1'});
				} else {
					$('#qrpc-reset-password-btn').css({'pointer-events':'none','opacity':'0.4'});
				}
				
			} else {
				$('#qrpc-reset-password-btn').css({'pointer-events':'auto','opacity':'1'});
			}
		} else {
			$('#qrpc-reset-password-btn').css({'pointer-events':'none','opacity':'0.4'});
		}
	});
	
	$('#fp-confirm-pswd').on('blur', function(){
		hideCnfPswdErrorMessages();
		isPasswordsSame =  false;
		var fpConfirmPswd = $(this).val();
		if(fpConfirmPswd !== '' && fpConfirmPswd !== undefined) {
			var isValidFpPswd = isValidPassword(fpConfirmPswd);
			if(isValidFpPswd) {
				var fpPswd = $('#fp-pswd').val();
				if(fpPswd !== '' && fpPswd !== undefined) {
					if(fpPswd !== fpConfirmPswd){
						isPasswordsSame = false;
						$('.rpMismatchErrMsg').removeClass('hide');
						if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
							digitalData.page.pageInfo.pageType = 'RP_OTP_CNFPSWD_MISMATCH';
						}
						errorClick(window.location.href, 'reset-password', fpUserType, 'RP_OTP_CNFPSWD_MISMATCH');
					} else {
						isPasswordsSame = true;
						$('.rpMismatchErrMsg').addClass('hide');
					}
				}
			} else {
				$('.rpCnfPswdInvalidErrMsg').removeClass('hide');
				if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
					digitalData.page.pageInfo.pageType = 'RP_OTP_INVALID_CNFPSWD';
				}
				errorClick(window.location.href, 'reset-password', fpUserType, 'RP_OTP_INVALID_CNFPSWD');
			}
		} else {
			$('.rpCnfPswdEmptyErrMsg').removeClass('hide');
			if(digitalData !== undefined && digitalData.page !== undefined && digitalData.page.pageInfo !== undefined && digitalData.page.pageInfo.pageType !== undefined) {
				digitalData.page.pageInfo.pageType = 'RP_OTP_EMPTY_CNFPSWD';
			}
			errorClick(window.location.href, 'reset-password', fpUserType, 'RP_OTP_EMPTY_CNFPSWD');
		}
		if(isPasswordsSame){
			if(isOfflineFlow){
				if($('#f1211').is(':checked')) {
					$('#qrpc-reset-password-btn').css({'pointer-events':'auto','opacity':'1'});
				} else {
					$('#qrpc-reset-password-btn').css({'pointer-events':'none','opacity':'0.4'});
				}
			} else {
				$('#qrpc-reset-password-btn').css({'pointer-events':'auto','opacity':'1'});
			}
		} else {
			$('#qrpc-reset-password-btn').css({'pointer-events':'none','opacity':'0.4'});
		}
	});
	
	$('.back-to-login').on('click', function(){
		$('.login-drop-column.j-login-action').removeClass('delVertLine');
		$('.smeContainer').removeClass('hide');
		$('.login-drop-column.create-profile-popup').removeClass('hide');
		$('#j-login-form').addClass('flip-side-1').removeClass('flip-side-2');
		$('#update-new-password, #forgot-password, #enter-otp').addClass('flip-side-2').removeClass('flip-side-1');
    });
	$('#continue-dashboard').on('click', function(){
		$('#f1003').val(userName);
		$('#f1001').val(np);
		isFPFlow = true;
		invoke();
    });
	
	$('#resend-fp-otp-btn').on('click', function(){
		$('.vrpServiceErrorMessage').text('').addClass('hide');
		showSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
		$.ajax({
			url: '/qr/bot/forgotpassword',
			method: 'POST',
			cache: false,
			data : forgotPasswordRequest,
			success: function(response){
				hideSpinnerMobileApp($('#forgot-password-spinner-container'),'spinner-full-page');
				response = JSON.parse(response);
				var errorObject = response.errorObject;
				if(errorObject === undefined){
					$('#fp-otp-success-message').removeClass('hide');
					$('#fp-otp-success-message .send-fp-otp-success-message').addClass('hidden');
					$('#fp-otp-success-message .resend-fp-otp-success-message').removeClass('hidden');
					fpToken = response.token;
					showOtpTimer($("#fp-otpcountdowntimer"), $("#resend-fp-otp-btn"));
				} else {
					$('#fp-otp-success-message').addClass('hide');
					$('.vrpServiceErrorMessage').text(Granite.I18n.get(errorObject[0].errorName)).removeClass('hide');
				}
			}
		});
		s.events = 'event183';
		s.eVar86 = s.pageName;
		if($('#sc_variable').val() == 'true') {
			s.t();
		}
    });
	
	$('#fp-otp').on('keypress keydown',function(e) {
        if (!isNumber(e.which)) {
            e.preventDefault();
        }
    });
	
	$('#f1211').on('click', function() {
		if(isPasswordsSame && $('#f1211').is(':checked')) {
			$('#qrpc-reset-password-btn').css({'pointer-events':'auto','opacity':'1'});
		} else {
			$('#qrpc-reset-password-btn').css({'pointer-events':'none','opacity':'0.4'});
		}
	});
	
});
var showQcreditExpiryModal = false;
var showQmilesExpiryModal = false;
var showTiertExpiryModal = false;
var showQpointsExpiryModal = false;
var showServiceRequestModal = false;
var showCompanionConfirmationAlerts = false,
showCompanionExpiredAlerts = false,
showCompanionUsedAlerts = false,
showCompanionInvalidAlerts = false,
showCompanionSlotsFullAlerts = false,
showCompanionDuplicateAlerts = false,
showSwiftAlert = false;
var companionConfirmationAlerts = [],
companionExpiredAlerts = [],
companionUsedAlerts = [],
companionInvalidAlerts = [],
companionSlotsFullAlerts = [],
companionDuplicateAlerts = [];
var studentExpiryDate;
var reinstatedQmilesValue;
var reinstatedTierValue;

var qmileRequest = "";
var oneDay = 24 * 60 * 60 * 1000;
var $todaydate = new Date();
var qpoints, qpointExpiryDate, qmilesExpiryDate, qcreditsExpiryDate, tiersExpiryDate, serReqExpiryDate;
var codeTierMatch;
var tierMatchJson = [{"tier": "PLATINUM", "code" :"PL_EXP_MTCH", "points":"300", "messageID" : "tierMatchQpointsPlatinum"},
					{"tier": "SILVER", "code" : "SL_EXP_MTCH", "points":"150", "messageID" : "tierMatchQpointsSilver"},
					{"tier": "GOLD", "code" : "GL_EXP_MTCH", "points":"75", "messageID" : "tierMatchQpointsGold"}];
var getdaysDifferenceAlerts = function(utcDate, $duration) {
	try {
		if (utcDate != undefined && utcDate != null) {
			if ($duration > 0) {
				var expiryDate = utcDate.split('-');
				var $todaydate = new Date();
				var $givenDate = new Date(expiryDate[2], parseInt(expiryDate[1]) - 1 , expiryDate[0], $todaydate.getHours(), $todaydate.getMinutes(), $todaydate.getSeconds());
				if ($givenDate > $todaydate) {

					return Math.round(Math.abs(($todaydate.getTime() - $givenDate.getTime()) / (oneDay))) < $duration;
				}
			}
		}
		return false;
	} catch (err) {}
};

var findDateisWithIntheRange = function($startDate, $endDate) {
	try {
		var $todaydate = new Date();
		var from = new Date($startDate); // -1 because months are from 0 to 11
		var to = new Date($endDate);
		return ($todaydate > from && $todaydate < to);
	} catch (err) {}
}
$(document).ready(function(){
	var runmodes = $("#runmodes").val();
    if( runmodes!=undefined && runmodes != null && runmodes.split(',').includes('author') ){
        return false;
    }
	qpoints = getUserBasicInfoField('qpointsAmount');
	qpointExpiryDate = getUserBasicInfoField('qpointsExpiryDate');
	qmilesExpiryDate = getUserBasicInfoField('qmilesExpiryDate');
	qcreditsExpiryDate = getUserBasicInfoField('qcreditsExpiryDate');
	tiersExpiryDate = getUserOtherInfoField("tierExpiry");
	serReqExpiryDate = getUserBasicInfoField('serReqExpiryDate');

	if( getUserBasicInfoField('tier') === undefined || getUserBasicInfoField('tier') === null || getUserBasicInfoField('tier') === '' ) {
		return false;
	}

	var locationMapper = window.location.pathname.split('/')[1].indexOf('-');
	if( locationMapper !== -1 ) {
		locationMapper = window.location.pathname.split('/');
		var urlLength = locationMapper.length;
		if( locationMapper[urlLength - 1].indexOf('.mobile.html')) {
			locationMapper[urlLength - 1] = locationMapper[urlLength - 1].replace('.mobile.html','.html');
		}
		locationMapper[1] = getCookieValue('country');
		locationMapper = locationMapper.join('/');
	} else {
		locationMapper = window.location.pathname.split('/');
		var urlLength = locationMapper.length;
		if( locationMapper[urlLength - 1].indexOf('.mobile.html')) {
			locationMapper[urlLength - 1] = locationMapper[urlLength - 1].replace('.mobile.html','.html');
		}
		locationMapper = locationMapper.join('/');
	}

	var campaignMapperLink1 = $('#campaignPageUrl').val() != undefined && $('#campaignPageUrl').val() != '' ? $('#campaignPageUrl').val().split('/') : '',
		campaignMapperLink2 = $('#campaignRedirectionLink').val() != undefined && $('#campaignRedirectionLink').val() != '' ? $('#campaignRedirectionLink').val().split('/') : '';

	var userMilesExpiry = getUserBasicInfoField('qmilesExpiryDate') != undefined && getUserBasicInfoField('qmilesExpiryDate') != null ? getUserBasicInfoField('qmilesExpiryDate').split('-') : '2019-01-01';
	userMilesExpiry = userMilesExpiry[1]+'/'+userMilesExpiry[0]+'/'+userMilesExpiry[2];
	userMilesExpiry = new Date(userMilesExpiry);

	if( campaignMapperLink1 != '' ) {
		var campaignMapperLink1Length = campaignMapperLink1.length;
		campaignMapperLink1 = campaignMapperLink1[campaignMapperLink1Length-2]+"/"+campaignMapperLink1[campaignMapperLink1Length-1];
	}
	if( campaignMapperLink2 != '' ) {
		var campaignMapperLink2Length = campaignMapperLink2.length;
		campaignMapperLink2 = campaignMapperLink2[campaignMapperLink2Length-2]+"/"+campaignMapperLink2[campaignMapperLink2Length-1];
	}
	/** check for locationmapper matching */
	var isInsideLinks = false;
	if( window.location.pathname.indexOf(campaignMapperLink1) !== -1 || window.location.pathname.indexOf(campaignMapperLink2) !== -1 ) {
		isInsideLinks = true;
	}

	/** check if campaign is enabled and eligible */
	var campaignEndDate = $('#campaignEndDate').val() != undefined ? new Date($('#campaignEndDate').val()) : new Date(),
		currentCampaignDate = new Date();

	var currentUserTier = getUserBasicInfoField('tier').toLowerCase(), isCampaignAllowed = false, campaignRequest = "";//getUserBasicInfoField('tier').toLowerCase();

	if( currentUserTier == undefined || currentUserTier == null || currentUserTier == '' ) {
		return false;
	}

	var userTierMapper = { 'burgundy' : 'campaignBGCheck', 'silver': 'campaignSLCheck', 'gold': 'campaignGLCheck', 'platinum' : 'campaignPLCheck' },
		mappedUserTier = userTierMapper[currentUserTier];

	$(".previousNext").css("display", "none");

	var reqCampaignEndDate = campaignEndDate.getDate()+"-"+(campaignEndDate.getMonth() + 1)+ "-"+campaignEndDate.getFullYear();
	if( $('.modal-alert-block.campaign').length > 0 && ( campaignEndDate.getTime() > currentCampaignDate.getTime() && campaignEndDate.getTime() >= userMilesExpiry.getTime() ) && $('#'+mappedUserTier).val() == 'true' && isInsideLinks && getUserBasicInfoField('qmilesExpiryAmount') > 0 ) {
		campaignRequest = '{ "alertType": "QMILES_EXP_OFFER", "expiryDate": "'+reqCampaignEndDate+'", "ignored": false,"promoCode":"'+$('#campaignPromoCode').val()+'"}';
		var htmlString = $('.modal-alert-block.campaign').find('.messageBody').html();
		var qmilesAmntExpiring = getUserBasicInfoField('qmilesExpiryAmount') != null && getUserBasicInfoField('qmilesExpiryAmount') != '' ? parseFloat(getUserBasicInfoField('qmilesExpiryAmount')) : 0;
		qmilesAmntExpiring = qmilesAmntExpiring.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
		htmlString = htmlString.replace('{qmiles}',qmilesAmntExpiring);
		$('.modal-alert-block.campaign').find('.messageBody').html(htmlString);
	} 

	var isBurgundyEligibleCampaign = false;
	if( $('.modal-alert-block.campaign').length > 0 && ( campaignEndDate.getTime() > currentCampaignDate.getTime() && campaignEndDate.getTime() >= userMilesExpiry.getTime() ) && window.location.pathname.indexOf(campaignMapperLink1) !== -1 &&  getUserBasicInfoField('qmilesExpiryAmount') > 0 && currentUserTier === 'burgundy' ) {
		isBurgundyEligibleCampaign = true;
	}

	var campFFPCookieValue = getActualCookieValue('isCampFFP');

	if( campFFPCookieValue == 'true' && typeof isProfileCampaign !== 'undefined' ) {
		isProfileCampaign = true;
	}

	/**Register to an offer on clicking the register button */
	$(document).on('click', '#campaignActionButton', function() {
		var expires = "";
		var date = new Date();
        date.setTime(date.getTime() + (-2*24*60*60*1000));
        expires = "; expires=" + date.toUTCString();

    document.cookie = "isCampFFP=true" + expires + "; path=/";
		$.ajax({
			type: 'GET',
			url: '/qr/qrweb/qmilesOffersRegisterservlet',
			data: {
				promoCode: $('#campaignPromoCode').val(),
				customerProfileId: getUserBasicInfoField("customerProfileId"),
				sessionID: getCookieValue('QRTOKEN')
			},
			cache: false,
			success: function(data) {
				if( data === 'true' ){
					$('#campaignActionButton').text($('#campaignRegisteredButtonTxt').val());
					//$('.campaignSuccessMessage').removeClass('hide');
					var campaignMailLink = $('#campaignRedirectionLink').val().split('/');
					var campaignMainLength = $('#campaignRedirectionLink').val().split('/').length;
					campaignMailLink = campaignMailLink[campaignMainLength-2]+"/"+campaignMailLink[campaignMainLength-1];
					if( window.location.pathname.indexOf(campaignMailLink) === -1 ) {
						setTimeout(function() {
							$('body').append('<a id="campaignRedirectionAnchor" href="'+$('#campaignRedirectionLink').val()+"?offerSuccess=true"+'">Redirection</a>');
							$('#campaignRedirectionAnchor')[0].click();
						}, 500);
					} else {
						$('#alert-modal').modal('hide');
						$('.myProfileCampaignSuccessMessage').removeClass('hide');
						$([document.documentElement, document.body]).animate({
							scrollTop: $(".myProfileCampaignSuccessMessage").offset().top -200
						}, 500);
					}
				} 
			}
		});	
		buttonClickAction(window.location.href, 'Register-campaignAlert', 'T3-alert');
	});


	$(document).on('click','#alert-modal button.close,#modal-alert-container a,#modal-alert-container .messageBody a',function() {
		/*if( ($(this).hasClass('button button-dark-transparent') || $(this).hasClass('button button-dark')) && $(this).closest('.modal-alert-block').hasClass('serreq') ) {
			$('.donotdisturb').trigger('click');
		}*/
		createCookie('alertModalExpiry','true');
		buttonClickAction(window.location.href, 'Close- alert', 'T3-alert');
	});
    var isTierAllowed = false;

	try {
		if ($('#modal-alert-container').html() != undefined) {
			var alertRequired = $('#isdashboardAlertsRequired').val();
			var qpointSummary = getUserBasicInfoField("qPointsSalesInfoVO");
			var qpointsType = qpointSummary != null && qpointSummary != undefined ? qpointSummary.activity : '';
			var requiredQPoints = qpointSummary != null && qpointSummary != undefined ? qpointSummary.requiredQPoints : '0';
			var qpointsAllowed = qpointSummary != null && qpointSummary != undefined ? qpointSummary.activityAllowed : false;
			var allowedQPoints = qpointSummary != null && qpointSummary != undefined ? qpointSummary.allowedQPoints : '0';
			var qpointsConsent = qpointSummary != null && qpointSummary != undefined ? qpointSummary.consentRequired : false;
			var showPopupAlert = false;


			var loadAlertsPopup = function() {
				if( getFFPCookieValue('alertModalExpiry')  !== null && getFFPCookieValue("alertModalExpiry") !== '') {
					return false;
				}
				if (getFFPCookieValue('otherInfo') === null) {
					return false;
				}
				var isQpointExpiry = $('#isQpointExpiry').val();
				var currencyExpiryDays = $('#currencyExpiryDays').val();
				var difference,differenceTier;
				var newQSaleDate = new Date();
				var qpointsSaleExpiryDateValue = JSON.parse(getFFPCookieValue('basicInfo')).qpointsExpiryDate;
				if( getFFPCookieValue('basicInfo') != null && qpointsSaleExpiryDateValue !== undefined && qpointsSaleExpiryDateValue != '' && qpointsSaleExpiryDateValue != null ) {
					var expiryQSaleDateTier = JSON.parse(getFFPCookieValue('basicInfo')).qpointsExpiryDate.split('-');
					expiryQSaleDateTier = expiryQSaleDateTier[1] + "/" + expiryQSaleDateTier[0] + "/" + expiryQSaleDateTier[2];
					var tierQSaleDate = new Date(expiryQSaleDateTier);
					difference = (tierQSaleDate.getTime() - newQSaleDate.getTime()) / (1000 * 60 * 60 * 24);
				}
				if( getFFPCookieValue('otherInfo') != null && JSON.parse(getFFPCookieValue('otherInfo')).tierExpiry !== undefined && JSON.parse(getFFPCookieValue('otherInfo')).tierExpiry !== null ) {	
					var expiryDateTier = JSON.parse(getFFPCookieValue('otherInfo')).tierExpiry.split('-');
					expiryDateTier = expiryDateTier[1] + "/" + expiryDateTier[0] + "/" + expiryDateTier[2];
					var tierSaleDate = new Date(expiryDateTier);
					differenceTier = (tierSaleDate.getTime() - newQSaleDate.getTime()) / (1000 * 60 * 60 * 24);
				}
				var qpointsSaleRequest = false;
				var qpointInitialDuration = parseInt($('#qpointInitialDuration').val()),
					tierduration = parseInt($('#tierduration').val());
				if ( getUserBasicInfoField('tier') != null && getUserBasicInfoField('tier').toLowerCase() === 'burgundy' && qpointsAllowed === true) {
					var qpointBodyBurgundy = $('#qpointBodyBurgundy').val();
					$('.modal-alert-block.qpoint .messageBody').empty();
					var message = $('#qpointBodyBurgundy').val();
					if ( qpointsConsent && requiredQPoints === '0') {
						message = $('#qpointsMsgBodyBurgundyConsent').val();
					}
                    message = message.replace('{qpoints}', requiredQPoints);
                    message = message.replace('{purqpoints}',allowedQPoints);
					var cYear = newQSaleDate.getFullYear(),
						cMonth = newQSaleDate.getMonth(),
						cDate = newQSaleDate.getDate(),
						finalDate = cDate+"-"+(cMonth + 1)+"-"+(cYear+1);

					var finalDateMsg = window.qrServiceRef.translateDate(finalDate).replace(/-/g, " ");
					message = message.replace('{date}',finalDateMsg);

					$('.modal-alert-block.qpoint .messageBody').html(message);

					$(".modal-alert-container .tier").remove();
					qpointsSaleRequest = true;
				} else if (getUserBasicInfoField('tier') != null && qpointsType === 'RETENTION' && getUserBasicInfoField('tier').toLowerCase() !== 'burgundy' && differenceTier < tierduration && qpointsAllowed === true && ($('#tierMatchQpointsAlertPage').val().indexOf(locationMapper.replace('.html','')) != -1 || (getUserBasicInfoField('category') === 'STUDENT' && $('#tierMatchQpointsAlertSCPage').val().indexOf(locationMapper.replace('.html','')) != -1))) {
					$(".modal-alert-container .qpoint").remove();
					isTierAllowed = true;
					qpointsSaleRequest = true;
				} else if (getUserBasicInfoField('tier') != null && qpointsType === 'UPGRADE' && getUserBasicInfoField('tier').toLowerCase() !== 'burgundy' && differenceTier < tierduration && qpointsAllowed === true && ($('#tierMatchQpointsAlertPage').val().indexOf(locationMapper.replace('.html','')) != -1 || (getUserBasicInfoField('category') === 'STUDENT' && $('#tierMatchQpointsAlertSCPage').val().indexOf(locationMapper.replace('.html','')) != -1))) {
					$('.modal-alert-block.tier .messageBody').empty();
					var message = $('#tierMessageBodyUpgrade').val();
					var tier = getUserBasicInfoField('tier'),
						tierExpiryDate = getUserOtherInfoField('tierExpiry'),
						tierExpiryDate = window.qrServiceRef.translateDate(tierExpiryDate).replace(/-/g, " "),
						tierRenewalPoints = requiredQPoints;
					isTierAllowed = true;
					showPopupAlert = true;
					var message = $('#tierMessageBodyUpgrade').val();
					message = message.replace('{tierType}',$('#flyout_tier_'+tier.toLowerCase()).val());
					message = message.replace('{tierExpiryDate}',tierExpiryDate);
                    message = message.replace('{tierRenewalPoints}',tierRenewalPoints);
                    message = message.replace('{tierThreshold}',allowedQPoints);
					//message.replace('{tierType}',getUserBasicInfoField('tier')
					$('.modal-alert-block.tier .messageBody').html(message);
					$(".modal-alert-container .qpoint").remove();
					qpointsSaleRequest = true;
				} else if (getUserBasicInfoField('tier') != null && ((qpointsType === 'RETENTION' || qpointsType === 'UPGRADE') && getUserBasicInfoField('tier').toLowerCase() !== 'burgundy' && differenceTier > tierduration && qpointsAllowed === true)) {
					$(".modal-alert-container .tier").remove();
					var message = $('.modal-alert-block.qpoint .messageBody p').html();
					var tier = getUserBasicInfoField('tier'),
						tierExpiryDate = getUserOtherInfoField('tierExpiry'),
						tierExpiryDate = window.qrServiceRef.translateDate(tierExpiryDate).replace(/-/g, " "),
						tierRenewalPoints = requiredQPoints;
					if( ( getUserBasicInfoField('tier').toLowerCase() === 'platinum' && parseInt(qpoints) === 0 )) {
						qpointsType = 'RETENTION';
					}
					if( qpointsType === 'RETENTION' ) {
						message = $('.modal-alert-block.qpoint .messageBody p').html();
					} else {
						message = $('#qpointBodyBurgundy').val();
					}
					if ( qpointsConsent && requiredQPoints === '0' ) {
						message = $('#qpointsMsgBodyBurgundyConsent').val();
					}
                    if( message != undefined ) {
                        message = message.replace('{tier}',$('#flyout_tier_'+tier.toLowerCase()).val());
                        message = message.replace('{tierExpiryDate}',tierExpiryDate);
                        message = message.replace('{qpointsEarn}',requiredQPoints);
                        message = message.replace(/{qpointsType}/g,Granite.I18n.get(qpointsType));
                        message = message.replace("{tierThreshold}",allowedQPoints);
                        message = message.replace("{qpoints}",requiredQPoints);
    
                        if( qpointsType === 'RETENTION' ) {
                            message = message.replace('{nextTier}',$('#qpointsRetentionText').val());
                        } else if( qpointsType === 'UPGRADE' ) {
                            message = message.replace('{nextTier}',$('#qpointsUpgradeText').val());
                        }
                        $('.modal-alert-block.qpoint .messageBody p').html(message);
                        qpointsSaleRequest = true;
                    }
				}  else if (getUserBasicInfoField('tier') != null && getUserBasicInfoField('tier').toLowerCase() !== 'burgundy' && difference > qpointInitialDuration && qpointsAllowed === true && !isTierAllowed) {
					$(".modal-alert-container .tier").remove();
					var message = $('.modal-alert-block.qpoint .messageBody p').html();
					if ( qpointsConsent && requiredQPoints === '0' ) {
						message = $('#qpointsMsgBodyBurgundyConsent').val();
					}
					var tier = getUserBasicInfoField('tier'),
						tierExpiryDate = getUserOtherInfoField('tierExpiry'),
						tierExpiryDate = window.qrServiceRef.translateDate(tierExpiryDate).replace(/-/g, " "),
						tierRenewalPoints = requiredQPoints;

					message = message.replace('{tier}',$('#flyout_tier_'+tier.toLowerCase()).val());
					message = message.replace('{tierExpiryDate}',tierExpiryDate);
                    message = message.replace('{qpointsEarn}',requiredQPoints);
					message = message.replace(/{qpointsType}/g,Granite.I18n.get(qpointsType));
					message = message.replace('{nextTier}',"next tier");
					message = message.replace('{tierThreshold}',allowedQPoints);
                    message = message.replace("{qpoints}",requiredQPoints);
					$('.modal-alert-block.qpoint .messageBody p').html(message);
					qpointsSaleRequest = true;
				}
				var qpointsShow = false;
				var reqTierMatch;
				/*if( getUserBasicInfoField('tier') != null && getUserBasicInfoField('tier').toLowerCase() === 'burgundy' && qpointsAllowed === true && parseInt(qpoints) == 0 && $('#dashboard-layover').length > 0 ) {
					$(".modal-alert-container .qcredit").remove();
					$(".modal-alert-container .tier").remove();
					$(".modal-alert-container .qmile").remove();
					qpointsShow = true;
					$(".modal-alert-container .modal-alert-block.qpoint").css("display", "block");
					$(".previousNext").css("display", "none")
					$('#alert-modal').modal();
				}*/
				if (getFFPCookieValue('QRTOKEN') != undefined && getFFPCookieValue('QRTOKEN') != null && (alertRequired && !qpointsShow) || (isProfileCampaign && typeof isProfileCampaign !== 'undefined' ) ) {
					var needModel = false;
					var donotdisturb;
					var isQmileRequest = false;
					var isQcreditRequest = false;
					var isTierRequest = false;
					var isServiceRequest = false;
					qmileRequest = ' { "alertInformationVos": [';
					if (getUserBasicInfoField('tier') != 'Platinum' && getdaysDifferenceAlerts(qmilesExpiryDate, $("#qmileduration").val()) && ($('#qmileAlertPageURL').val().indexOf(locationMapper) != -1 || $('#qmileAlertSCPageURL').val().indexOf(locationMapper) != -1) && null == getUserBasicInfoField('qmilesAlert') && getUserBasicInfoField('qmilesExpiryAmount') > 0) {
						if( isBurgundyEligibleCampaign ) {
							qmileRequest = qmileRequest + '	{ "alertType": "QMILES","expiryDate": "' + qmilesExpiryDate + '","promoCode":"'+$('#campaignPromoCode').val()+'"}';
						} else {
							qmileRequest = qmileRequest + '	{ "alertType": "QMILES","expiryDate": "' + qmilesExpiryDate + '"}';
						}
						isQmileRequest = true;
					}
					if (getUserBasicInfoField('tier') != 'Platinum' && getUserBasicInfoField('qcreditsExpiryAmount') > 0 && getdaysDifferenceAlerts(qcreditsExpiryDate, $("#qcreditsduration").val()) && ($('#qcreditsAlertPageURL').val().indexOf(locationMapper) != -1 || $('#qcreditsAlertSCPageURL').val().indexOf(locationMapper) != -1) && null == getUserBasicInfoField('qcreditAlert')) {
						if (isQmileRequest) {
							qmileRequest = qmileRequest + ",";
						}
						qmileRequest = qmileRequest + '	{ "alertType": "QCREDITS","expiryDate": "' + qcreditsExpiryDate + '"}';
						isQcreditRequest = true;
					}
					if (getUserBasicInfoField('tier') != 'Platinum' && getUserOtherInfoField("tierRenewQpoints") > 0 && getdaysDifferenceAlerts(tiersExpiryDate, $("#tierduration").val()) && ($('#tiersAlertPageURL').val().indexOf(locationMapper) != -1 || $('#tiersAlertSCPageURL').val().indexOf(locationMapper) != -1)) {
						if (isQmileRequest || isQcreditRequest) {
							qmileRequest = qmileRequest + ",";
						}
						qmileRequest = qmileRequest + '	{ "alertType": "TIER","expiryDate": "' + tiersExpiryDate + '"}';
						isTierRequest = true;
					}
					//confirm these conditions
					if ( ( null == getUserBasicInfoField('serReqAlert') || undefined == getUserBasicInfoField('serReqAlert') ) && ($('#serreqAlertPageUrl').val().indexOf(locationMapper) != -1 ||  $('#serreqAlertSCPageUrl').val().indexOf(locationMapper) != -1)) {
						if (isQmileRequest || isQcreditRequest || isTierRequest) {
							qmileRequest = qmileRequest + ",";
						}
						qmileRequest = qmileRequest + ' { "alertType" : "SVCREQUEST" } ';
						isServiceRequest = true;
					}
					if (qpointsSaleRequest && qpointExpiryDate != undefined && qpointExpiryDate != "undefined" && ($('#qpointAlertPageURL').val().indexOf(locationMapper) != -1 || $('#qpointAlertSCPageURL').val().indexOf(locationMapper) != -1 )) {
						if (isQmileRequest || isQcreditRequest || isTierRequest || isServiceRequest) {
							qmileRequest = qmileRequest + ",";
						}
						var qpointExpiryDateDup = qpointExpiryDate != undefined && qpointExpiryDate != "undefined" ? qpointExpiryDate : "";
						qmileRequest = qmileRequest + '	{ "alertType": "QPOINTS","expiryDate": "' + qpointExpiryDateDup + '"}';
					} else {
						qpointsSaleRequest = false;
					}
					var isQpointsTierExpiry = false, showQpointsTierExpiry = false;

					if ( getUserBasicInfoField('tier').toLowerCase() !== 'burgundy' && ($('#tierMatchQpointsAlertPage').val().indexOf(locationMapper.replace('.html','')) != -1 || $('#tierMatchQpointsAlertSCPage').val().indexOf(locationMapper.replace('.html','')) != -1)) {
						if (isQmileRequest || isQcreditRequest || isTierRequest || isServiceRequest || qpointsSaleRequest) {
							qmileRequest = qmileRequest + ",";
						}
						isQpointsTierExpiry = true;
						var isQPointsTierMatchEnabled = $('#isQPointsTierMatchEnabled').val();
						if(isQPointsTierMatchEnabled === 'true'){
							reqTierMatch = tierMatchJson.filter(function(item) { return item.tier === currentUserTier.toUpperCase(); });;
							if( reqTierMatch[0] != undefined ) {
								codeTierMatch = reqTierMatch[0].code;
							}
							qmileRequest = qmileRequest + '	{ "alertType": "'+codeTierMatch+'"}';
						}
					}

					if( !qpointsSaleRequest ) {
						$(".modal-alert-container .qpoint").remove();
					}
					if ( (isQmileRequest || isQcreditRequest || isTierRequest || isServiceRequest || qpointsSaleRequest || isQpointsTierExpiry) && campaignRequest != '' ) {
						qmileRequest = qmileRequest + "," ;
					}
					qmileRequest = qmileRequest + campaignRequest ;
					console.log("qmilesRequest "+qmileRequest);
					var isQpointsIgnored = false, campaignTriggered;
					if(qmileRequest.endsWith(',')){
						qmileRequest = qmileRequest.replace(/,\s*$/, "");
					}
					qmileRequest = qmileRequest + ' ],"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
					if ( true ) {
						var studentConversionAllowed = false, tierMatchAlertAllowed, gccQmilesAllowed= false, gccTierAllowed = false, gccQmilesTierAllowed = false;
						window.qrServiceRef.zone.run(function() {
							window.qrServiceRef.postReq($('#getAlertInformation').val(), qmileRequest, req_headers, '', {}).then(function(qmilesResponse) {
								var qpointsLastmodifiedDate;
								var studentCompanionPageLink = $('#studentCompanionAlertPageLocation').val()+".html";
								var studentCompanionSCPageLink = $('#studentCompanionAlertSCPageLocation').val()+".html";
								var tempLocationMapper = locationMapper;
								if (locationMapper.indexOf('.swiftpopup.') !== -1) {
									tempLocationMapper = locationMapper.replace('.swiftpopup','');
								}
								var showStudentCompanionAlerts = ((studentCompanionPageLink.indexOf(tempLocationMapper) != -1) || (studentCompanionSCPageLink.indexOf(tempLocationMapper) != -1));
								var reinstatePCURL = $('#reinstatePCURL').val() + '.html';
								var reinstateSCURL = $('#reinstateSCURL').val() + '.html';
								var showReinstateAlert = ((reinstatePCURL.indexOf(tempLocationMapper) != -1) || (reinstateSCURL.indexOf(tempLocationMapper) != -1));
								if (undefined == qmilesResponse.errorObject) {
									if (undefined == qmilesResponse.alertInformationVOs) {
										showQmilesExpiryModal = false;
										showQcreditExpiryModal = false;
										showTiertExpiryModal = false;
										showServiceRequestModal = false;
										showQpointsTierExpiry = false;
									} else {
										$.each(qmilesResponse.alertInformationVOs, function(index, object) {
											if (object.alertType == "QMILES" && !object.ignored) {
												//do not distubed is true
												showQmilesExpiryModal = true;
											} else if (object.alertType == "QCREDITS" && !object.ignored) {
												showQcreditExpiryModal = true;
											} else if (object.alertType == "TIER" && !object.ignored) {
												showTiertExpiryModal = true;
											}else if (object.alertType == "SVCREQUEST" && !object.ignored) {
												showServiceRequestModal = true;
											} else if (object.alertType == "QPOINTS" && !object.ignored) {
												showQpointsExpiryModal = true;
											} else if (object.alertType == "QPOINTS" && object.ignored) {
												isQpointsIgnored = true;
											} else if (object.alertType == "QMILES_EXP_OFFER" && !object.ignored) {
												isCampaignAllowed = true;
												campaignTriggered = true;
											} else if(object.alertType == codeTierMatch && !object.ignored) {
												showQpointsTierExpiry = true;
											} else if(object.alertType == "STUDENT_CONVERSN" && !object.ignored) {
												studentConversionAllowed = true;
												studentExpiryDate = object.expiryDate;
											} else if(object.alertType == "TIER_EXTENSION_2021" && !object.ignored) {
												tierMatchAlertAllowed = true;
											}  else if(object.alertType == "TIER_EXTENSION_2021" && object.ignored) {
												tierMatchAlertAllowed = false;
											} else if(object.alertType == "GCC_QMILES" && !object.ignored && showReinstateAlert) {
												gccQmilesAllowed = true;
                                                reinstatedQmilesValue = object.reinstatedQmiles;
                                                var tier = object.reinstatedTier;
												if(tier !== undefined){
													reinstatedTierValue = tier[0] + tier.substring(1).toLocaleLowerCase();
												}
											} else if(object.alertType == "GCC_TIER" && !object.ignored && showReinstateAlert) {
												gccTierAllowed = true;
                                                //reinstatedQmilesValue = object.reinstatedQmiles;
												var reinstatedTier = object.reinstatedTier;
                                                if(reinstatedTier !== undefined){
													var tier = reinstatedTier.split('');
													reinstatedTierValue = tier[0] + reinstatedTier.substring(1).toLocaleLowerCase();
												}
											} else if(object.alertType == "GCCQMILES_TIER" && !object.ignored && showReinstateAlert) {
												gccQmilesTierAllowed= true;
                                                reinstatedQmilesValue = object.reinstatedQmiles;
												var reinstatedTier = object.reinstatedTier;
												if(reinstatedTier !== undefined){
													var tier = reinstatedTier.split('');
													reinstatedTierValue = tier[0] + reinstatedTier.substring(1).toLocaleLowerCase();
												}
											} else if(object.alertType == 'CMPN_REF_CNFRM' && !object.ignored && showStudentCompanionAlerts) {
												showCompanionConfirmationAlerts = true;
												companionConfirmationAlerts.push({'alertType': object.alertType, 'expiryDate': object.expiryDate, "ignored": object.ignored,'firstName': object.qualifier1, "lastName": object.qualifier2, 'referrerProfileId': object.qualifier3});
											} else if(object.alertType == 'CMPN_REF_EXPRD' && !object.ignored && showStudentCompanionAlerts) {
												showCompanionExpiredAlerts = true;
												companionExpiredAlerts.push({'alertType': object.alertType, 'expiryDate': object.expiryDate, "ignored": object.ignored,'firstName': object.qualifier1, "lastName": object.qualifier2, 'referrerProfileId': object.qualifier3});
											} else if(object.alertType == 'CMPN_REF_USED' && !object.ignored && showStudentCompanionAlerts) {
												showCompanionUsedAlerts = true;
												companionUsedAlerts.push({'alertType': object.alertType, 'expiryDate': object.expiryDate, "ignored": object.ignored,'firstName': object.qualifier1, "lastName": object.qualifier2, 'referrerProfileId': object.qualifier3});
											} else if(object.alertType == 'CMPN_REF_INV' && !object.ignored && showStudentCompanionAlerts) {
												showCompanionInvalidAlerts = true;
												companionInvalidAlerts.push({'alertType': object.alertType, "ignored": object.ignored});
											} else if(object.alertType == 'CMPN_REF_SLTFUL' && !object.ignored && showStudentCompanionAlerts) {
												showCompanionSlotsFullAlerts = true;
												companionSlotsFullAlerts.push({'alertType': object.alertType, 'expiryDate': object.expiryDate, "ignored": object.ignored,'firstName': object.qualifier1, "lastName": object.qualifier2, 'referrerProfileId': object.qualifier3});
											} else if(object.alertType == 'CMPN_REF_DUPL' && !object.ignored && showStudentCompanionAlerts) {
												showCompanionDuplicateAlerts = true;
												companionDuplicateAlerts.push({'alertType': object.alertType, 'expiryDate': object.expiryDate, "ignored": object.ignored,'firstName': object.qualifier1, "lastName": object.qualifier2, 'referrerProfileId': object.qualifier3});
											} else if(object.alertType == 'SWIFT' && !object.ignored) {
												showSwiftAlert = true;
											}
											
											if(object.alertType == "QMILES_EXP_OFFER" && object.ignored) {
												$('.modal-alert-block.qmile').remove();
												campaignTriggered = true;
											}

											if (object.alertType == "QPOINTS" ) {
												qpointsLastmodifiedDate = object.lastModifiedDate;
												qpointsLastmodifiedDate = qpointsLastmodifiedDate != undefined ? qpointsLastmodifiedDate.split('-') : '';
												qpointsLastmodifiedDate = qpointsLastmodifiedDate != undefined && qpointsLastmodifiedDate != '' ? qpointsLastmodifiedDate[1] +"-"+qpointsLastmodifiedDate[0]+"-"+qpointsLastmodifiedDate[2] : undefined ;
												qpointsLastmodifiedDate = qpointsLastmodifiedDate != undefined && qpointsLastmodifiedDate != '' ? new Date(qpointsLastmodifiedDate) : undefined;
											} 
										});
									}
								}

								if( tierMatchAlertAllowed ) {
									
									var tierMatchHeader = $('.modal-alert-block.tierMatch').find('#modal-label-title').text();
									var tierMatchmessage = $('.modal-alert-block.tierMatch').find('.messageBody').html();
									var tierText = getUserBasicInfoField('tier');
									tierText = $('#flyout_tier_'+tierText.toLowerCase()).val() != undefined ? $('#flyout_tier_'+tierText.toLowerCase()).val() : tierText;
									
									tierMatchHeader = tierMatchHeader.replace('{tier}',tierText);
									$('.modal-alert-block.tierMatch').find('#modal-label-title').text(tierMatchHeader);
									
									var tiersExpiryDateText = window.qrServiceRef.translateDate(getUserOtherInfoField("tierExpiry")).replace(/-/g,' ');
									tierMatchmessage = tierMatchmessage.replace(/{tier}/g, tierText);
									tierMatchmessage = tierMatchmessage.replace(/{tierEndDate}/g, tiersExpiryDateText);
									$('.modal-alert-block.tierMatch').find('.messageBody').html(tierMatchmessage);
									$('.modal-alert-block.tierMatch').removeClass('hide');
                                    $('.modal-alert-block.tierMatch').css({'display':'block'});
									$('.modal-alert-block.qmile').remove();
								} else {
									$('.modal-alert-block.tierMatch').remove();
								}
								
								if( gccQmilesAllowed ) {
									
									var gccHeader = $('#modal-label-title.qmilesReinstate').text();
									gccHeader = gccHeader.replace('{qmilesAmount}',reinstatedQmilesValue).replace('{tierLevel}',reinstatedTierValue);
									$('#modal-label-title.qmilesReinstate').text(gccHeader);									
									var gccMessage = $('.qmilesReinstate.messageBody').text();
									gccMessage = gccMessage.replace('{qmilesAmount}',reinstatedQmilesValue).replace('{tierLevel}',reinstatedTierValue);									
									$('.qmilesReinstate.messageBody').html(gccMessage);
									
									
									$('.modal-alert-block.reinstate-match').removeClass('hide').addClass('show');
									
									$('#modal-label-title.qmilesReinstate').removeClass('hide').addClass('show');
									
									$('.qmilesReinstate.messageBody').removeClass('hide').addClass('show');
									
									$('.qmilesReinstate.button').removeClass('hide').addClass('show');
								}
								
								if( gccTierAllowed ) {
									
									var gccTierHeader = $('#modal-label-title.tierReinstate').text();
									gccTierHeader = gccTierHeader.replace('{qmilesAmount}',reinstatedQmilesValue).replace('{tierLevel}',reinstatedTierValue);
									$('#modal-label-title.tierReinstate').text(gccTierHeader);
									
									var gccTierMessage = $('.tierReinstate.messageBody').text();
									gccTierMessage = gccTierMessage.replace('{qmilesAmount}',reinstatedQmilesValue).replace('{tierLevel}',reinstatedTierValue);									
									$('.tierReinstate.messageBody').html(gccTierMessage);
									
									
									$('.modal-alert-block.reinstate-match').removeClass('hide').addClass('show');
									
									$('#modal-label-title.tierReinstate').removeClass('hide').addClass('show');
									
									$('.tierReinstate.messageBody').removeClass('hide').addClass('show');
									
									$('.tierReinstate.button').removeClass('hide').addClass('show');
								}
                            if( gccQmilesTierAllowed ) {
									
									var gccQmilesTierHeader = $('#modal-label-title.qmilesTierReinstate').text();
									gccQmilesTierHeader = gccQmilesTierHeader.replace('{qmilesAmount}',reinstatedQmilesValue).replace('{tierLevel}',reinstatedTierValue);	
									$('#modal-label-title.qmilesTierReinstate').html(gccQmilesTierHeader);
									
									var gccQmilesTierMessage = $('.qmilesTierReinstate.messageBody').text();
									gccQmilesTierMessage = gccQmilesTierMessage.replace('{qmilesAmount}',reinstatedQmilesValue).replace('{tierLevel}',reinstatedTierValue);									
									$('.qmilesTierReinstate.messageBody').html(gccQmilesTierMessage);
																		
									$('.modal-alert-block.reinstate-match').removeClass('hide').addClass('show');
									
									$('#modal-label-title.qmilesTierReinstate').removeClass('hide').addClass('show');
									
									$('.qmilesTierReinstate.messageBody').removeClass('hide').addClass('show');
									
									$('.qmilesTierReinstate.button').removeClass('hide').addClass('show');
								}
								
								if( !gccQmilesAllowed && !gccTierAllowed && !gccQmilesTierAllowed ) {
									$('.modal-alert-block.reinstate-match').remove();
								}
								
								if( showQpointsTierExpiry ) {
									$('#qpoints-tier-match').removeClass('hide').addClass('show');
									if( reqTierMatch[0] != undefined ) {
										var messageID = reqTierMatch[0].messageID;
										messageID = $('#'+messageID).val();
										var tiersExpiryDateMatch = window.qrServiceRef.translateDate(getUserOtherInfoField("tierExpiry")).replace(/-/g,' ');
                                        messageID = messageID.replace("{qpoints}", reqTierMatch[0].points);
										messageID = messageID.replace("{tierExpiryDate}", tiersExpiryDateMatch);

										$('#qpoints-tier-match').find('.messageBody').text(messageID);
									}
								} else {
									$('#qpoints-tier-match').remove();
								}

								if( campaignTriggered ) {
									showQmilesExpiryModal = false;
									$('.modal-alert-block.qmile').remove();
								}
								if( isCampaignAllowed ) {
									$('.modal-alert-block.qmile').remove();
									$('.modal-alert-block.campaign').removeClass('hide');
								} else {
									$('.modal-alert-block.campaign').remove();
								}
								if (!showQmilesExpiryModal) {
									$(".modal-alert-container .qmile").remove();
								} else {
									updateUserBasicInfoField("qmilesAlert", "false");
									$(".modal-alert-container .qmile .messageBody").text($(".modal-alert-container .qmile .messageBody").text().replace("{qmiles}", parseInt(getUserBasicInfoField('qmilesExpiryAmount')).toLocaleString()));
									$(".modal-alert-container .qmile .messageBody").text($(".modal-alert-container .qmile .messageBody").text().replace("{qmilesExpiryDate}", window.qrServiceRef.translateDate(qmilesExpiryDate).replace(/-/g, " ")));
								}
								if (!showQcreditExpiryModal) {
									$(".modal-alert-container .qcredit").remove();
								} else {
									updateUserBasicInfoField("qcreditAlert", "false");
									$(".modal-alert-container .qcredit .messageBody").text($(".modal-alert-container .qcredit .messageBody").text().replace("{qcredits}", parseInt(getUserBasicInfoField('qcreditsExpiryAmount')).toLocaleString()));
									$(".modal-alert-container .qcredit .messageBody").text($(".modal-alert-container .qcredit .messageBody").text().replace("{qcreditsExpiryDate}", window.qrServiceRef.translateDate(qcreditsExpiryDate).replace(/-/g, " ")));
								}
								if (!showTiertExpiryModal && !isTierAllowed) {
									$(".modal-alert-container .tier").remove();
								} else {
									var tierValue = getUserBasicInfoField('tier');
									tierValue = $('#flyout_tier_'+tierValue.toLowerCase()).val();
									$(".modal-alert-container .tier").remove();
									if($('#tier-upgrade-story').length > 0 && qpointsType === 'UPGRADE') {
										showTierUpgradeStory(qpointSummary);
									} else if($('#tier-retention-story').length > 0 && qpointsType === 'RETENTION') {
										showTierRetentionStory(qpointSummary);
									}
								} 
								if (!showServiceRequestModal) {
									$(".modal-alert-container .serreq").remove();
								} else {
									updateUserBasicInfoField("serReqAlert", "false");
									$(".modal-alert-container .serreq .messageBody").text($(".modal-alert-container .serreq .messageBody").text());                           
								}

								if( isTierAllowed && parseInt(requiredQPoints) !== 0 && tierMatchAlertAllowed == undefined ) {
									if( !studentConversionAllowed ) {
										$(".modal-alert-container .modal-alert-block.tier").addClass('show');
									}
								} else {
									$(".modal-alert-container .modal-alert-block.tier").remove();
									//$('#alert-modal').modal('hide');
								}
								/*	STUDENT COMPANION ALERTS - START	*/
								
								if(showCompanionConfirmationAlerts){
									$.each(companionConfirmationAlerts, function(index, companionConfirmationAlert) {
										var $studentCompanionAlert = $('#companion-alert-static').clone();					
										if(index == 0){
											$studentCompanionAlert.insertAfter('#companion-alert-static').attr('id','companion-confirmation-alert-'+index).removeClass('hide').addClass('companion-confirmation-alert');
										} else {
											$studentCompanionAlert.insertAfter('#companion-confirmation-alert-'+(index - 1)).attr('id','companion-confirmation-alert-'+index).removeClass('hide').addClass('companion-confirmation-alert');
										}
										var confirmationMessage = $studentCompanionAlert.find('h3.companion-confirmation').text().trim();
										confirmationMessage = confirmationMessage.replace('{firstName}', companionConfirmationAlert.firstName);
										$studentCompanionAlert.find('h3.companion-confirmation').text(confirmationMessage);
										$studentCompanionAlert.attr('data-info', JSON.stringify(companionConfirmationAlert));
										$studentCompanionAlert.find('.companion-accept-btn,.companion-reject-btn', JSON.stringify(companionConfirmationAlert));
										$studentCompanionAlert.find('.companion-confirmation').removeClass('hide');
									});
								}
								
								if(showCompanionExpiredAlerts){
									$.each(companionExpiredAlerts, function(index, companionExpiredAlert) {
										var $studentCompanionAlert = $('#companion-alert-static').clone();
										if(index == 0){
											if(showCompanionConfirmationAlerts){
												$studentCompanionAlert.insertAfter('.companion-confirmation-alert').last().attr('id','companion-expired-'+index).removeClass('hide');
											} else {
												$studentCompanionAlert.insertAfter('#companion-alert-static').attr('id','companion-expired-'+index).removeClass('hide');
											}
										} else {
											$studentCompanionAlert.insertAfter('#companion-expired-alert-'+(index - 1)).attr('id','companion-expired-'+index).removeClass('hide');
										}
										$studentCompanionAlert.attr('data-info', JSON.stringify(companionExpiredAlert));
										var expiredMessage = $studentCompanionAlert.find('h3.companion-expired').text().trim();
										expiredMessage = expiredMessage.replace('{firstName}', companionExpiredAlert.firstName);
										$studentCompanionAlert.find('h3.companion-expired').text(expiredMessage);
										$studentCompanionAlert.find('.companion-expired').removeClass('hide');
									});
								}
								
								if(showCompanionUsedAlerts){
									$.each(companionUsedAlerts, function(index, companionUsedAlert) {
										var $studentCompanionAlert = $('#companion-alert-static').clone();
										if(index == 0){
											if(showCompanionConfirmationAlerts){
												$studentCompanionAlert.insertAfter('.companion-confirmation-alert').last().attr('id','companion-used-'+index).removeClass('hide');
											} else {
												$studentCompanionAlert.insertAfter('#companion-alert-static').attr('id','companion-used-'+index).removeClass('hide');
											}
										} else {
											$studentCompanionAlert.insertAfter('#companion-used-alert-'+(index - 1)).attr('id','companion-used-'+index).removeClass('hide');
										}
										$studentCompanionAlert.attr('data-info', JSON.stringify(companionUsedAlert));
										var usedMessage = $studentCompanionAlert.find('h3.companion-used').text().trim();
										usedMessage = usedMessage.replace('{firstName}', companionUsedAlert.firstName);
										$studentCompanionAlert.find('h3.companion-used').text(usedMessage);
										$studentCompanionAlert.find('.companion-used').removeClass('hide');
									});
								}
								
								if(showCompanionInvalidAlerts){
									$.each(companionInvalidAlerts, function(index, companionInvalidAlert) {
										var $studentCompanionAlert = $('#companion-alert-static').clone();
										if(index == 0){
											if(showCompanionConfirmationAlerts){
												$studentCompanionAlert.insertAfter('.companion-confirmation-alert').last().attr('id','companion-invalid-alert-'+index).removeClass('hide');
											} else {
												$studentCompanionAlert.insertAfter('#companion-alert-static').attr('id','companion-invalid-alert-'+index).removeClass('hide');
											}
										} else {
											$studentCompanionAlert.insertAfter('#companion-invalid-alert-'+(index - 1)).attr('id','companion-invalid-alert-'+index).removeClass('hide');
										}
										$studentCompanionAlert.attr('data-info', JSON.stringify(companionInvalidAlert));
										$studentCompanionAlert.find('.companion-invalid').removeClass('hide');
									});
								}
								
								if(showCompanionSlotsFullAlerts){
									$.each(companionSlotsFullAlerts, function(index, companionSlotsFullAlert) {
										var $studentCompanionAlert = $('#companion-alert-static').clone();
										if(index == 0){
											if(showCompanionConfirmationAlerts){
												$studentCompanionAlert.insertAfter('.companion-confirmation-alert').last().attr('id','companion-slotfull-alert-'+index).removeClass('hide');
											} else {
												$studentCompanionAlert.insertAfter('#companion-alert-static').attr('id','companion-slotfull-alert-'+index).removeClass('hide');
											}
										} else {
											$studentCompanionAlert.insertAfter('#companion-slotfull-alert-'+(index - 1)).attr('id','companion-slotfull-alert-'+index).removeClass('hide');
										}
										$studentCompanionAlert.attr('data-info', JSON.stringify(companionSlotsFullAlert));
										var slotfullMessage = $studentCompanionAlert.find('h3.companion-slotfull').text().trim();
										slotfullMessage = slotfullMessage.replace('{firstName}', companionSlotsFullAlert.firstName);
										$studentCompanionAlert.find('h3.companion-slotfull').text(slotfullMessage);
										$studentCompanionAlert.find('.companion-slotfull').removeClass('hide');
									});
								}
								
								if(showCompanionDuplicateAlerts){
									$.each(companionDuplicateAlerts, function(index, companionDuplicateAlert) {
										var $studentCompanionAlert = $('#companion-alert-static').clone();
										if(index == 0){
											if(showCompanionConfirmationAlerts){
												$studentCompanionAlert.insertAfter('.companion-confirmation-alert').last().attr('id','companion-duplicate-alert-'+index).removeClass('hide');
											} else {
												$studentCompanionAlert.insertAfter('#companion-alert-static').attr('id','companion-duplicate-alert-'+index).removeClass('hide');
											}
										} else {
											$studentCompanionAlert.insertAfter('#companion-duplicate-alert-'+(index - 1)).attr('id','companion-duplicate-alert-'+index).removeClass('hide');
										}
										$studentCompanionAlert.attr('data-info', JSON.stringify(companionDuplicateAlert));
										var duplicateMessage = $studentCompanionAlert.find('h3.companion-duplicate').text().trim();
										duplicateMessage = duplicateMessage.replace('{firstName}', companionDuplicateAlert.firstName);
										$studentCompanionAlert.find('h3.companion-duplicate').text(duplicateMessage);
										$studentCompanionAlert.find('.companion-duplicate').removeClass('hide');
									});
								}
								
								if( !showCompanionDuplicateAlerts && !showCompanionSlotsFullAlerts && !showCompanionUsedAlerts && !showCompanionInvalidAlerts && !showCompanionExpiredAlerts && !showCompanionConfirmationAlerts ) {
									$('.modal-alert-block#companion-alert-static').remove();
								}
								if(!showSwiftAlert || (showSwiftAlert && $('#generalInfo-alert .messageBody').text() == '')) {
									$('.modal-alert-block#generalInfo-alert').remove();
								}
								
								/*	STUDENT COMPANION ALERTS - END	*/
								/*if ($(".modal-alert-container .modal-alert-block") != undefined && $(".modal-alert-container .modal-alert-block").length == 1) {
									$(".previousNext").css("display", "none");
								} 
								if (showQmilesExpiryModal || showTiertExpiryModal || showQcreditExpiryModal || (isTierAllowed && parseInt(requiredQPoints) !== 0)|| showServiceRequestModal || isCampaignAllowed || studentConversionAllowed ||gccQmilesAllowed || gccTierAllowed || gccQmilesTierAllowed || showCompanionConfirmationAlerts || showCompanionExpiredAlerts || showCompanionUsedAlerts || showCompanionInvalidAlerts || showCompanionSlotsFullAlerts || showCompanionDuplicateAlerts) {
									if( !studentConversionAllowed ) {
										$(".modal-alert-container .modal-alert-block").first().addClass('show').removeClass('hide');
									}
									$('#alert-modal').modal();
									showSlick();
									return false;
									
								}*/
								if(parseInt(requiredQPoints) !== 0 && parseInt(qpoints) > 0 && ($('#qpointAlertPageURL').val().indexOf(locationMapper) !== -1 || $('#qpointAlertSCPageURL').val().indexOf(locationMapper) !== -1 )) {
									if( qpointsLastmodifiedDate != undefined ) {
										var newQSaleLastDate = new Date();
										var differenceLast = (newQSaleLastDate.getTime() - qpointsLastmodifiedDate.getTime()) / (1000 * 60 * 60 * 24);
										var durationQpoints = $('#qpointduration').val();
										durationQpoints = durationQpoints != undefined ? durationQpoints : '0';
										if (qpointsSaleRequest && showQpointsExpiryModal && (differenceLast < parseInt(durationQpoints)) ) {
											/*if( ( $('.modal-alert-container .modal-alert-block.campaign').hasClass('hide') || $('.modal-alert-container .modal-alert-block.campaign').length == 0 ) && $(".modal-alert-container .modal-alert-block").first().hasClass('hide') && !studentConversionAllowed ) {*/
												$(".modal-alert-container .modal-alert-block.qpoint").addClass('show').removeClass('hide');
											/*}
											if( ($('#alert-modal').data('bs.modal') == undefined || !$('#alert-modal').data('bs.modal').isShown) ) {
												$('#alert-modal').modal();
												showSlick();
											}*/
										} else {
												$(".modal-alert-container .qpoint").remove();
										}
									} else if (qpointsSaleRequest && (difference < qpointInitialDuration)) {
										/*if( ($('.modal-alert-container .modal-alert-block.campaign').hasClass('hide')  || $('.modal-alert-container .modal-alert-block.campaign').length == 0)  && $(".modal-alert-container .modal-alert-block").first().hasClass('hide')  && !studentConversionAllowed ) {*/
											$(".modal-alert-container .modal-alert-block.qpoint").addClass('show').removeClass('hide');
										/*}
										if( ($('#alert-modal').data('bs.modal') == undefined || !$('#alert-modal').data('bs.modal').isShown) ) {
											$('#alert-modal').modal();
											showSlick();
										}*/
									} else {
											$(".modal-alert-container .qpoint").remove();
									}
								}
								if( parseInt(qpoints) === 0 && getUserBasicInfoField('tier').toLowerCase() === 'burgundy' ) {
									$(".modal-alert-container .qpoint").remove();
								}
								/*if ((showQmilesExpiryModal || showTiertExpiryModal || showQcreditExpiryModal || (isTierAllowed && parseInt(requiredQPoints) !== 0)  || showServiceRequestModal || isCampaignAllowed || gccQmilesAllowed || gccTierAllowed || gccQmilesTierAllowed) && $(".modal-alert-container .modal-alert-block").length >= 1 ) {
									if( !studentConversionAllowed ) {
										$(".modal-alert-container .modal-alert-block").first().addClass('show').removeClass('hide');
									}
									$('#alert-modal').modal();
									showSlick();
								}
								if ($(".modal-alert-container .modal-alert-block") != undefined && $(".modal-alert-container .modal-alert-block").length == 1) {
									$(".previousNext").css("display", "none");
								} else if ($(".modal-alert-container .modal-alert-block") != undefined && $(".modal-alert-container .modal-alert-block").length > 1) {
									$(".previousNext").css("display", "block");
								}

								if (($(".modal-alert-container .modal-alert-block") != undefined && $(".modal-alert-container .modal-alert-block:visible").length == 1) || showQpointsTierExpiry) {
									$('#alert-modal').modal();
									showSlick();
								}*/
								var studentAlertPageLocation = $('#studentAlertPageLocation').val()+".html";
								var studentAlertSCPageLocation = $('#studentAlertSCPageLocation').val()+".html";
								if( studentConversionAllowed && (studentAlertPageLocation.indexOf(locationMapper) != -1 || studentAlertSCPageLocation.indexOf(locationMapper) != -1) && $(".modal-alert-container .modal-alert-block:visible").length == 0) {
									$('#showstudentUpgradeButton').attr('disabled','disabled');
									$('.modal-alert-block.studentupgrade').closest('.modal-alert-overlay').addClass('student-alert');
									$('.modal-alert-block.studentupgrade').removeClass('hide').addClass('show');
								} else {
									$('.modal-alert-block.studentupgrade').remove();
								}

								/*if ((tierMatchAlertAllowed || showQmilesExpiryModal || showTiertExpiryModal || showQcreditExpiryModal || (isTierAllowed && parseInt(requiredQPoints) !== 0)  || showServiceRequestModal || isCampaignAllowed || gccQmilesAllowed || gccTierAllowed || gccQmilesTierAllowed) && $(".modal-alert-container .modal-alert-block").length >= 1 || studentConversionAllowed ) {*/
								if ( $(".modal-alert-container .modal-alert-block").length >= 1 ) {
									/*$(".modal-alert-container .modal-alert-block").addClass('hide').removeClass('show');
									$(".modal-alert-container .modal-alert-block").first().addClass('show').removeClass('hide');*/
									if( $(".modal-alert-container .modal-alert-block").length == 1 ) {
										$('#alert-modal .previousNext').hide();
									}
									$('#alert-modal').modal();
									if( $(".modal-alert-container .modal-alert-block").first().hasClass('studentupgrade') ) {
										$('.modal-alert-block.studentupgrade').closest('.modal-alert-overlay').addClass('student-alert');
									} else {
										$('.modal-alert-block.studentupgrade').closest('.modal-alert-overlay').removeClass('student-alert');
									}
									showSlick();
									
								}
							})
						});


					}
				}
			};
			setTimeout(function() {
                if($('#current-page-template').val() !== '/apps/qrweb/templates/homepage') {
					loadAlertsPopup();
                }
			}, 800);



			$(document).on('click', '.donotdisturb', function() {
				try {
					var updatealertType = "";
					var updateexpiryDate = "";
					var qualifier3 = "";
					var currentbutton = $(this);
					if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('qmile')) {
						updatealertType = "QMILES";
						updateexpiryDate = qmilesExpiryDate;
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('qcredit')) {
						updatealertType = "QCREDITS";
						updateexpiryDate = qcreditsExpiryDate;
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('tier')) {
						updatealertType = "TIER";
						updateexpiryDate = tiersExpiryDate;
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('qpoint')) {
						updatealertType = "QPOINTS";
						updateexpiryDate = qpointExpiryDate;
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('serreq')) {
						updatealertType = "SVCREQUEST";
						//updateexpiryDate = serReqExpiryDate;
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('campaign')) {
						updatealertType = "QMILES_EXP_OFFER";
						var dateSplit = $('#campaignEndDate').val().split('/');
						updateexpiryDate = dateSplit[2]+"-"+dateSplit[1]+"-"+dateSplit[0];
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('qpoints-tier-match')) {
						updatealertType = codeTierMatch;
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('studentupgrade')) {
						updatealertType = "STUDENT_CONVERSN";
					} else if( $('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('tierMatch')) {
						updatealertType = "TIER_EXTENSION_2021";
					} else if( ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('qmilesReinstate') || $('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('reinstate-match')) && $('#modal-alert-container').find('.qmilesReinstate.messageBody').is(':visible') ) {
						updatealertType = "GCC_QMILES";
					}else if( ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('tierReinstate') || $('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('reinstate-match')) && $('#modal-alert-container').find('.tierReinstate.messageBody').is(':visible') ) {
						updatealertType = "GCC_TIER";
					}else if( ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('qmilesTierReinstate') || $('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('reinstate-match')) && $('#modal-alert-container').find('.qmilesTierReinstate.messageBody').is(':visible') ) {
						updatealertType = "GCCQMILES_TIER";
					}else if( $('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('companion-alert') ) {
						updatealertType = $('#modal-alert-container').find('.companion-alert:visible').data('info').alertType;//"CMPN_REF_CNFRM";
						qualifier3= $('#modal-alert-container').find('.companion-alert:visible').data('info').referrerProfileId;
					} else if ($('#modal-alert-container').find('.slick-slide.slick-current.slick-active').hasClass('generalInfo-alert')) {
						updatealertType = "SWIFT";
					}

					var iterationCount = 0, ignoredParameter = true;
					if ($(this).attr("data-text") == "qpoint" || $('#modal-alert-container').find('.qpoint').is(':visible')) {
						iterationCount = 1;
					}
					for ( var i = 0; i <= iterationCount; i++ ) {
						if( iterationCount === 1 && i == 0 ) {
							ignoredParameter = false;
						} else if( iterationCount === 1 && i == 1 ) {
							ignoredParameter = true;
						}

						var updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","expiryDate": "' + updateexpiryDate + '","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						//no expiry date comparison for service request
						if(updatealertType == "SVCREQUEST"){
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","expiryDate": "","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						} else if(updatealertType == codeTierMatch || updatealertType == "TIER_EXTENSION_2021" ){
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						} else if( updatealertType == "STUDENT_CONVERSN" ) {
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","expiryDate": "'+studentExpiryDate+'","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						} else if( updatealertType == "GCC_QMILES" ) {
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						}
						else if( updatealertType == "GCC_TIER" ) {
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						}
						else if( updatealertType == "GCCQMILES_TIER" ) {
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						}else if( updatealertType == "CMPN_REF_CNFRM" || updatealertType == "CMPN_REF_EXPRD" || updatealertType == "CMPN_REF_USED" || updatealertType == "CMPN_REF_INV" || updatealertType == "CMPN_REF_SLTFUL" || updatealertType == "CMPN_REF_DUPL" ) {
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","ignored": '+ignoredParameter+',"qualifier3":"'+qualifier3+'"},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						} else if( updatealertType == "SWIFT" ) {
							updateRequest = '{"alertInformationVO": {"alertType": "' + updatealertType + '","ignored": '+ignoredParameter+'},"customerProfileId": "' + getUserBasicInfoField("customerProfileId") + '"}';
						}
						window.qrServiceRef.zone.run(function() {
							window.qrServiceRef.postReq($('#updateAlertInformation').val(), updateRequest, req_headers, '', {}).then(function(updateqmilesResponse) {
								if (updateqmilesResponse.status != undefined && updateqmilesResponse.status) {
									var expires = "";
									var date = new Date();
									date.setTime(date.getTime() + (-2*24*60*60*1000));
									expires = "; expires=" + date.toUTCString();
									//$(currentbutton).parent().remove();
									$('.modal-alert-container').slick('slickRemove', $('#modal-alert-container').find('.slick-slide.slick-current.slick-active').attr('data-slick-index'));
									//$(".modal-alert-container .modal-alert-block:visible").remove()
									$(".modal-alert-container .modal-alert-block").first().addClass('show').removeClass('hide');
									if ($(".modal-alert-container .modal-alert-block") != undefined && $(".modal-alert-container .modal-alert-block").length == 1) {
										$(".previousNext").css("display", "none")
										$(".modal-alert-container .modal-alert-block #modal-label-title").first().focus();
									} else if ($(".modal-alert-container .modal-alert-block") != undefined && $(".modal-alert-container .modal-alert-block").length == 0) {
										$("#alert-modal").css("display", "none")
										$("body").removeClass("modal-open");
										$(".modal-backdrop").removeClass("in");
										$(".modal-backdrop").remove();
									}
								}
							})
						});
					}
				} catch (err) {
					console.log('error ' + err);
				}
				buttonClickAction(window.location.href, 'Do not show again', 'T3-alert');
			});

		}
	} catch (err) {console.log("error "+err);}

	function studentUpgradeServiceCall() {

		var studentUpgradeServiceUrl = $('#convertQrpcMemberToStudent').val();
        if( studentUpgradeServiceUrl == '' &&  studentUpgradeServiceUrl == undefined ) {
			return false;
        }
		var upgradeRequest = {
			"customerProfileId": getUserBasicInfoField("customerProfileId")
		}
		$('#alert-modal').modal('hide');
		showSpinnerMobileApp($('#global-spinner-container'),'spinner-active');


		window.qrServiceRef.zone.run(function() {
			window.qrServiceRef.postReq(studentUpgradeServiceUrl, upgradeRequest, req_headers, '', {}).then(function(response) {
				if( ""+response.status == "true" ) {
					$('#studentUpgradeButton').addClass('hide');
					$('.studentConvertSuccess').removeClass('hide');
                    if( mobilePlatform == window.ANDROID_PLATFORM ){
						JSInterface.SessionFailure();
					} else if( mobilePlatform == window.IOS_PLATFORM ){
						setupWebViewJavascriptBridge(function(bridge) {
							bridge.callHandler('SessionFailure', '', function() {
								console.log('Session failure to go to home screen of app');
							});
						});
                    } else {
						logout();
                    }
				}
			});

		});
	}

	$(document).on('change', '.modal-alert-block.studentupgrade #f1211000', function() {
		var isChecked = $(this).is(':checked');
		if( isChecked ) {
			$('#showstudentUpgradeButton').removeAttr('disabled');
		} else {
			$('#showstudentUpgradeButton').attr('disabled', 'disabled');
		}
	});
	$(document).on('click', '#showstudentUpgradeButton', function() {
		if( $('#showstudentUpgradeButton').attr('disabled') === 'disabled' ) {
			return false;
		} else {
			$('#showstudentUpgradeButton').hide();
			$('.student-upgrade-buttons').fadeIn('slow');
		}
		buttonClickAction(window.location.href, 'Convert to Student Club- alert', 'T3-alert');
	});
	$(document).on('click', '#cancelStudentUpgrade', function() {
		$('#alert-modal').modal('hide');
		buttonClickAction(window.location.href, 'cancel-StudentUpgrade- alert', 'T3-alert');
	});

	$(document).on('click', '#studentUpgradeButton', function() {
		var upgradeLink = $(this).attr('data-link');
		if( $('#showstudentUpgradeButton').attr('disabled') === 'disabled' ) {
			return false;
		} else {
			studentUpgradeServiceCall();
		}
		buttonClickAction(window.location.href, 'Convert to Student Club-studentUpgrade- alert', 'T3-alert');
	});
	$(document).on('click', '.companion-accept-btn', function() {
		showSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
        var $acceptBtn = $(this);
		var cmpRefSer = $('#companionReferralServiceUri').val();
		var cmpRefReq = {
			"customerProfileId": getUserBasicInfoField('customerProfileId'),
			"companionAction": "ACCEPT",
			"referrerProfileId": $acceptBtn.closest('.companion-alert').data('info').referrerProfileId
		};
		window.qrServiceRef.zone.run(function() {
			window.qrServiceRef.postReq(cmpRefSer, cmpRefReq, req_headers, '', {}).then(function(cmpRefRes){
				var errorObject = cmpRefRes.errorObject;
				if(errorObject === undefined){
					if(cmpRefRes.referralSuccessful){
						var sucMsg = $acceptBtn.closest('.companion-alert').find('.companion-confirmation-success').text();
						sucMsg = sucMsg.replace('{firstName}', $('.companion-accept-btn').closest('.companion-alert').data('info').firstName);
						$acceptBtn.closest('.companion-alert').find('.companion-confirmation-success').text(sucMsg).removeClass('hide');
                        $acceptBtn.parent().parent().find('.companion-confirmation-prompt').addClass('hide');
						$acceptBtn.parent().find('.companion-reject-btn').addClass('hide');
                        $acceptBtn.addClass('hide');
                        $acceptBtn.parent().find('.companion-okay-btn').removeClass('hide');
						hideSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
					} else {
						$acceptBtn.closest('.companion-alert').find('.companion-confirmation-error').text(Granite.I18n.get(failureReason)).removeClass('hide');
						hideSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
					}
				} else {
					$acceptBtn.closest('.companion-alert').find('.companion-confirmation-error').html(errorObject[0].errorDescription).removeClass('hide');
					hideSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
				}
			});
		});
	});
	$(document).on('click', '.companion-reject-btn', function() {
		showSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
		var $rejectBtn = $(this);
		var cmpRefSer = $('#companionReferralServiceUri').val();
		var cmpRefReq = {
			"customerProfileId": getUserBasicInfoField('customerProfileId'),
			"companionAction": "REJECT",
			"referrerProfileId": $rejectBtn.closest('.companion-alert').data('info').referrerProfileId
		};
		window.qrServiceRef.zone.run(function() {
			window.qrServiceRef.postReq(cmpRefSer, cmpRefReq, req_headers, '', {}).then(function(cmpRefRes){
				var errorObject = cmpRefRes.errorObject;
				if(errorObject === undefined){
					if(cmpRefRes.referralSuccessful){
						var rejectMsg = $rejectBtn.closest('.companion-alert').find('.companion-confirmation-failure').text();
						rejectMsg = rejectMsg.replace('{firstName}', $rejectBtn.closest('.companion-alert').data('info').firstName);
						$rejectBtn.closest('.companion-alert').find('.companion-confirmation-failure').text(rejectMsg).removeClass('hide');
						$rejectBtn.parent().parent().find('.companion-confirmation-prompt').addClass('hide');
                        $rejectBtn.parent().find('.companion-accept-btn').addClass('hide');
                        $rejectBtn.addClass('hide');
                        $rejectBtn.parent().find('.companion-okay-btn').removeClass('hide');
						hideSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
					} else {
						$rejectBtn.closest('.companion-confirmation-error').text(Granite.I18n.get(failureReason)).removeClass('hide');
						hideSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
					}
				} else {
					$rejectBtn.closest('.companion-confirmation-error').html(errorObject[0].errorDescription).removeClass('hide');
					hideSpinnerMobileApp($('.companion-t3-spinner-container'),'spinner-full-page');
				}
			});
		});
	});
	
	$(document).on('click', '.companion-okay-btn', function() {
		 if($(this).parents('.modal-alert-container').find('.slick-next').hasClass('slick-disabled') || $('.modal-alert-container').find('.slick-next').length == 0) {
			$('#alert-modal').modal('hide');
        } else {
			$('.modal-alert-container').slick('slickRemove', $(this).closest('.slick-slide').attr('data-slick-index'));
        }
	});
	function showSlick() {
		$('.modal-alert-block.hide').remove();
		$('.modal-alert-container').not('.slick-initialized').slick({
			infinite: false,
			centerMode: false,
			slidesToShow: 1,
			slidesToScroll: 1,
			dots: true,
		});
		$(".modal-alert-container").on("afterChange", function (){
			if( $(".modal-alert-container .modal-alert-block.slick-current.slick-active").hasClass('studentupgrade') ) {
				$('.modal-alert-block.studentupgrade').closest('.modal-alert-overlay').addClass('student-alert');
			} else {
				$('.modal-alert-block.studentupgrade').closest('.modal-alert-overlay').removeClass('student-alert');
			}
		});
		var filter = $('.modal-alert-block').not('.hide');
		$(".modal-alert-container").slick('slickFilter',filter);
		setTimeout(function() {
			$('.modal-alert-container').slick('unslick').slick('reinit').slick({
				infinite: false,
				centerMode: false,
                slidesToShow: 1,
				slidesToScroll: 1,
				dots: true,
            });
		}, 500);
	}
	$(document).on('click','#qmilesTierReinstate',function() {
		buttonClickAction(window.location.href, 'Update now-qmilesTierReinstate- alert', 'T3-alert');
	});
	$(document).on('click','#tierReinstate',function() {
		buttonClickAction(window.location.href, 'Update now-tierReinstate- alert', 'T3-alert');
	});
	$(document).on('click','#qmilesReinstate',function() {
		buttonClickAction(window.location.href, 'Update now -qmilesReinstate- alert', 'T3-alert');
	});
	$(document).on('click','#tiermatchlink',function() {
		buttonClickAction($('#tiermatchlink').attr('href'), 'Learn more-tiermatch- alert', 'T3-alert');
	});
	$(document).on('click','#ctaurl',function() {
		buttonClickAction($('#ctaurl').attr('href'), 'Read now- reinstatealert', 'T3-alert');
	});
	$(document).on('click','.slick-next',function() {
		buttonClickAction(window.location.href, 'next-arrow- alert', 'T3-alert');
	});
	$(document).on('click','.slick-prev',function() {
		buttonClickAction(window.location.href, 'previous-arrow- alert', 'T3-alert');
	});
});

function postQbizData() {
	try {
    //console.log('Called postQbizData');
    var qbizLoginRequest = getFFPCookieValue('loginRequest');
    //console.log('qbizLoginRequest:' + qbizLoginRequest);
	
	var defaultURL = $('#defaultURL').val();

    if(null !== qbizLoginRequest && '' !== qbizLoginRequest && typeof qbizLoginRequest !== 'undefined') {
        //console.log('loginRequest cookie exists');
        var qbizLoginRequestJSON = JSON.parse(qbizLoginRequest);
        //qbizLoginRequestJSON = JSON.parse(qbizLoginRequestJSON);
        var qbizLoginRequestParams = '';
        var paramsHTML = '';
        var source = '';
		var nspHostName = $('#nspHostName').val();
		//console.log('nspHostName=' + nspHostName);
		var qrHomeHostName = $('#qrHomeHostName').val();
		//console.log('qrHomeHostName=' + qrHomeHostName);
        $.each(qbizLoginRequestJSON[0], function(key, value) {            
            //console.log(key + '=' + value);
			if('callBackUrl' === key) {
				var hostName = getHostName(value);
				if (hostName === nspHostName) {
					//console.log('Inside NSP');
					source = 'NSP';
				} else if(hostName === qrHomeHostName) {
					//console.log('Inside QRHOME');
					source = 'QRHOME';
				}
			}			
            paramsHTML += '<input type="hidden" value="' + value + '" name="' + key + '" />';
        });
        //console.log('source:' + source);
        //console.log('paramsHTML:' + paramsHTML);
		$('#j-qbiz-login-form').attr('action', '');
		$('#j-qbiz-login-form').empty();
        if ( 'NSP' === source ) {
            $('#j-qbiz-login-form').attr('action', $('#nspURL').val());
			$('#j-qbiz-login-form').append(paramsHTML);
        } else if ( 'QRHOME' === source ) {
            $('#j-qbiz-login-form').attr('action', $('#qrHomeURL').val());
			$('#j-qbiz-login-form').append(paramsHTML);
        } else {
			$('#j-qbiz-login-form').attr('action', defaultURL);
			$('#j-qbiz-login-form').append(paramsHTML);
		}
		
        $('#j-qbiz-login-form').submit();

    } else {
        //console.log('loginRequest cookie does not exists');
		$('#j-qbiz-login-form').attr('action', defaultURL);
		$('#j-qbiz-login-form').empty();
		$('#j-qbiz-login-form').submit();
    }
	  } catch(err) {}
}
$(document).ready(function(){
	var flightBookings = getFFPCookieValue('flightBookings');
	if (getFFPCookieValue('QRTOKEN') != null && $("#upcomingTripsJS").val() == undefined && !isMobileApp() && (flightBookings == null || flightBookings == undefined)) {
		getupcomingTripsFlyout();
	}

    var mobileEditProfile = $("#mobileeditProfileLink").val();
	var mobileDashBoard = $("#mobiledashboardLink").val();
	var desktopEditProfile = $("#desktopeditProfileLink").val();
	var desktpDashBoard = $("#desktopdashboardLink").val();
	var jointheprivilegeclub_desktop = $("#jointheprivilegeclub_desktop").val();
	var jointheprivilegeclub_mobile = $("#jointheprivilegeclub_mobile").val();

    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
        $("#dashboardLinkAnchor").attr("href", mobileDashBoard);
        $("#editProfileLinkAnchor").attr("href", mobileEditProfile+"?selLang=");
		$("#jointheprivilegeclub").attr("href", jointheprivilegeclub_mobile);
    }else{
        $("#dashboardLinkAnchor").attr("href", desktpDashBoard);
        $("#editProfileLinkAnchor").attr("href", desktopEditProfile);
		$("#jointheprivilegeclub").attr("href", jointheprivilegeclub_desktop);
    }
    
    if(navigator.userAgent.indexOf("Mobile") != -1) {
        $("#dashboardLinkAnchor").attr("href", mobileDashBoard);
        $("#editProfileLinkAnchor").attr("href", mobileEditProfile+"?selLang=");
		$("#jointheprivilegeclub").attr("href", jointheprivilegeclub_mobile);
    }else{
        $("#dashboardLinkAnchor").attr("href", desktpDashBoard);
        $("#editProfileLinkAnchor").attr("href", desktopEditProfile);
		$("#jointheprivilegeclub").attr("href", jointheprivilegeclub_desktop);
    }

    if($('#page-locale').val() === 'fr'){
        $('.personalized-drop .button-block .btn').css({'padding-left':'3px'});
        $('.personalized-drop .button-block').css({'max-width':'initial'});
        $('.personalized-drop .button-block').css({'margin':'0 auto 10px'});
    } else if($('#page-locale').val() === 'pt'){
        $('.personalized-drop .button-block .btn').css({'padding-left':'10px'});
        $('.personalized-drop .button-block').css({'max-width':'initial'});
        $('.personalized-drop .button-block').css({'margin':'0 auto 10px'});
    }
});
function getupcomingTripsFlyout() {
     var loginType = $('#loginType').val();
    if(loginType !== 'release1B') { return; }
	if ($("#upcomingTripsJS").val() != undefined || $(".personalized-drop").hasClass("processing-trips")){ return; }
	try {
	$(".personalized-drop").addClass("processing-trips");
        var mobileSite = "NO";
        if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
            mobileSite = "YES";
        }
	var upcomingTripsFlyoutRequest = {
	   pageIndex: 1,
	   pageSize: 1,
	   destinationRepoPath: $("#flyoutDestRepoPath").val(),
	   allDestinationsPath: $("#alldestination_flyout").val(),
	   updateLatestTripCookie : "true",
	   flyoutRequest: "true",
        mobileSite : mobileSite,
		defaultImage: $('#defaultImageDestinationPath').val() != undefined ? $('#defaultImageDestinationPath').val() : ""
   };

   var $spinner_offer = $('#flyout-upcomingtrips-spinner');
   /** check for mobile app loading and activating spinner **/
	showSpinnerMobileApp($spinner_offer,'spinner-active');
    $.ajax({
	   type: 'GET',
	   url: '/qr/qrweb/upcoming-trips',
	   data: upcomingTripsFlyoutRequest,
	   cache: false,
	   success: function(data) {
		   if(window.showFlyoutTrip != undefined){
				window.showFlyoutTrip();
		   }
		   $(".personalized-drop").removeClass("processing-trips");
	   },
	   error: function(data) {
		   $(".personalized-drop").removeClass("processing-trips");
	   }
    });
	} catch(err) {}
}
Granite.I18n.setLocale($('#page-locale').val());
var sess_pollInterval = 10000;
var sess_expirationMinutes = 20;
var sess_warningMinutes = 19;
var sess_intervalID;
var sess_lastActivity;
var cryptoAlgorithmSelected = $('#cryptoAlgorithm').val();

function sessionExtendMethod(){
	var isPublishInstance = $('#isPublishInstance').val();
		
	if(isPublishInstance == 'true') {
		/* Verify User - Start */
		var verifyUserServiceURL = $('#verifyUserServiceURL').val();
		//console.log('verifyUserServiceURL is:', verifyUserServiceURL);

		if(verifyUserServiceURL !== '' && verifyUserServiceURL !== undefined) {
			var sessionToken = getFFPCookieValue("QRTOKEN");
			var verifyUserRequest = {
				"token": sessionToken
			};
			if( typeof sessionToken != 'undefined' && sessionToken != null && sessionToken != '' ) {
				window.qrServiceRef.postReq(verifyUserServiceURL, verifyUserRequest, req_headers, '', {}).then(function(response) {
					var verifyUserStatus = response.status;
					if(verifyUserStatus) {
						sess_lastActivity = new Date();
						localStorage.setItem("sessionLastAcitivity", ""+sess_lastActivity);
					} else if(getFFPCookieValue('QRTOKEN') != null){
						logout();
						addComponentPageEvent('login','session expired','','');
					}
				});	
			
			}
			
			
		}
	}
};
window.initSession = function(time) { 
  if( !isMobileApp() ){ 
	sess_lastActivity = time || new Date();
	
	var sessionLastAcitivity = localStorage.getItem("sessionLastAcitivity");
	if( sessionLastAcitivity == null || sessionLastAcitivity === undefined ){
		localStorage.setItem("sessionLastAcitivity", ""+sess_lastActivity);
	} else {
		localStorage.setItem("sessionLastAcitivity", ""+sess_lastActivity);
		sess_lastActivity = new Date(sessionLastAcitivity);
	}
    var isPublishInstance = $('#isPublishInstance').val();
		
	if(isPublishInstance == 'true') {
		sessSetInterval();
    }
  }
}

function sessSetInterval() {
	
	clearInterval(sess_intervalID);
	if( !isMobileApp() ){ 
		sess_intervalID = setInterval('sessInterval()', sess_pollInterval);
	}
}


 
function sessInterval() {
	if( getFFPCookieValue('QRTOKEN') != undefined && getFFPCookieValue('QRTOKEN') != null && !isMobileApp() ) {
		var sessionLastAcitivity = localStorage.getItem("sessionLastAcitivity");
		if( sessionLastAcitivity == null || sessionLastAcitivity === undefined ){
			localStorage.setItem("sessionLastAcitivity", ""+sess_lastActivity);
			sessSetInterval();
		} else {
			sess_lastActivity = new Date(sessionLastAcitivity);
		}
		var now = new Date();
		var diff = now - sess_lastActivity;
		
		var diffMins = (diff / 1000 / 60);
		if (diffMins >= sess_warningMinutes) {
		   localStorage.setItem("sessionExpired", "true");
		   logout();
		   addComponentPageEvent('login','session expired','','');
		} else {
			//$('#modal-session-expiry').modal('hide');
		}
	} else {
		var sessionLastAcitivity = localStorage.getItem("sessionLastAcitivity");
		if( sessionLastAcitivity !== null && sessionLastAcitivity !== undefined ){
			localStorage.removeItem("sessionLastAcitivity");
			
		}
		 clearInterval(sess_intervalID);
	}
}

var countriesFlagConfigPath = "/content/dam/images/custom/flags/";
var removedCurrencies = ["AZN", "GEL", "IRR", "VND"];
var removedCountries = ["AZ", "GE", "IR", "VN"];
window.ANDROID_PLATFORM = "ANDROID";
window.IOS_PLATFORM = "IOS";

var mobilePlatform;
//var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}

function getFFPCookieValue(c_name) {
	if( c_name === 'basicInfo' || c_name === 'otherInfo' ) {
    	document.cookie =c_name+'=; Path=/;domain=.qatarairways.com; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
	var encryptedCookie = getCookieValueAsIs(c_name);
	var cookieVal = null;
	if(encryptedCookie != null) {
		if(c_name == "QRTOKEN") {
			cookieVal = encryptedCookie;
		} else if(c_name == 'loginRequest' || c_name == 'SAC_ERROR') {
			cookieVal = decrypt(encryptedCookie);
		} else {
			var cryptoSelected = cryptoAlgorithmSelected;
			if(cryptoSelected == "AES_GCM"){
                cookieVal = getAesGcmEncryptedCookieValue(c_name);
			  if(cookieVal == null){
				cookieVal = AES_GCM_decrypt(encryptedCookie);
              }
            }
			else{
            cookieVal = decryptUserData(encryptedCookie);
			}
		}
	}
	return cookieVal;
}
function toCamelCase(str) {
	if( str != undefined && str != null && str != '' && str.length >= 1 ){
		return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
	}  else if( str != undefined && str != null && str != '' && str.length == 1 ){
		return str.charAt(0).toUpperCase();
	} else {
		return '';
	}
}
function getCookieValue(c_name) {
        var c_value = document.cookie;
        var c_start = c_value.indexOf(" " + c_name + "=");
        if (c_start == -1) {
            c_start = c_value.indexOf(c_name + "=");
        }
        if (c_start == -1) {
            c_value = null;
        } else {
            c_start = c_value.indexOf("=", c_start) + 1;
            var c_end = c_value.indexOf(";", c_start);
            if (c_end == -1) {
                c_end = c_value.length;
            }
            c_value = unescape(c_value.substring(c_start, c_end));
        }

        return c_value;
    }
function getCookieValueAsIs(c_name) {
        var c_value = document.cookie;
        var c_start = c_value.indexOf(" " + c_name + "=");
        if (c_start == -1) {
            c_start = c_value.indexOf(c_name + "=");
        }
        if (c_start == -1) {
            c_value = null;
        } else {
            c_start = c_value.indexOf("=", c_start) + 1;
            var c_end = c_value.indexOf(";", c_start);
            if (c_end == -1) {
                c_end = c_value.length;
            }
            c_value = unescape(c_value.substring(c_start, c_end));
        }

        return c_value;
    }

    function setCookie(cname, pvalue, exdays) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toGMTString();
        document.cookie = cname + "=" + pvalue + ";" + expires + ";";
    }

    function createSimpleCookie(c_name, value) {
        var date, expires;
        document.cookie = c_name+"="+value+"; path=/";
    }

    function createCookie(c_name, value) {
        var date, expires;
		document.cookie =c_name+'=; Path=/;domain=.qatarairways.com; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
   		var valueEncrypted = encryptUserData(value);
        document.cookie = c_name+"="+valueEncrypted+"; path=/";
		}

function deleteCookie(c_name) {
	var value = "";
	var exdays = -1;
	var exdate = new Date();
	exdate.setDate(exdate.getDate() + exdays);
 
	var c_value = escape(value) + ((exdays == null) ? "" : "; expires=" + exdate.toUTCString());

	document.cookie = c_name + "=" + c_value + "; path=/";
}

function getUserBasicInfoField(fieldName) {
	var basicInfoCookie = getFFPCookieValue('basicInfo');
	if(null != basicInfoCookie && '{}' != basicInfoCookie) {
		var basicInfo = JSON.parse(basicInfoCookie);
		if(typeof(basicInfo) != "object"){
			basicInfo = JSON.parse(basicInfo);
		}
		return basicInfo[fieldName];
	}
}

function getActualUserBasicInfoField(fieldName) {
	var basicInfoCookie = getActualCookieValue('basicInfo');
	if(null != basicInfoCookie && '{}' != basicInfoCookie) {
		var basicInfo = JSON.parse(basicInfoCookie);
		if(typeof(basicInfo) != "object"){
			basicInfo = JSON.parse(basicInfo);
		}
		return basicInfo[fieldName];
	}
}

function getUserOtherInfoField(fieldName) {
	var otherInfoCookie = getFFPCookieValue('otherInfo');
	if(null != otherInfoCookie) {
		var otherInfo = JSON.parse(otherInfoCookie);
		if(typeof(otherInfo) != "object"){
			otherInfo = JSON.parse(otherInfo);
		}
		return otherInfo[fieldName];
	}
}

function getUserOtpContactInfoField(fieldName) {
	var otpContactInfoCookie = getFFPCookieValue('otpContactInfo');
	if(null != otpContactInfoCookie && '{}' != otpContactInfoCookie) {
		var otpContactInfo = JSON.parse(otpContactInfoCookie);
		return otpContactInfo[fieldName];
	}
	return '';
}

function updateUserBasicInfoField(fieldName, value) {
	var basicInfoCookie = getFFPCookieValue('basicInfo');
	if(null != basicInfoCookie && '{}' != basicInfoCookie) {
		var basicInfo = JSON.parse(basicInfoCookie);
		if(typeof(basicInfo) == "string") {
			basicInfo = JSON.parse(basicInfo);
		}
		if( value != undefined && fieldName === 'qPointsSalesInfoVO' && value == false) {
			basicInfo.qPointsSalesInfoVO.activityAllowed = false;
			delete basicInfo[fieldName]["activity"];
			delete basicInfo[fieldName]["allowedQPoints"];
			delete basicInfo[fieldName]["requiredQPoints"];
		} else if(value != undefined && value != "" && value.length > 0){
			basicInfo[fieldName] = value;
		} else {
			delete basicInfo[fieldName];
		}
		var basicInfoUpdated = JSON.stringify(basicInfo);
		createCookie('basicInfo', basicInfoUpdated);
		if( mobilePlatform == window.IOS_PLATFORM ){
                setupWebViewJavascriptBridge(function(bridge) {
                    /* Initialize your app here */
                    bridge.callHandler('fetchAndCacheInfoCookie', '', function() {
                        //console.log('Registered Handler for set token');
                    });
                });
            }
	}
}

function updateUserOtherInfoField(fieldName, value) {
	var otherInfoCookie = getFFPCookieValue('otherInfo');
	if(null != otherInfoCookie && '{}' != otherInfoCookie) {
		var otherInfo = JSON.parse(otherInfoCookie);
		if(typeof(basicInfo) == "string") {
			basicInfo = JSON.parse(basicInfo);
		}
		if(value != "" && value.length > 0){
			otherInfo[fieldName] = value;
			var otherInfoUpdated = JSON.stringify(otherInfo);
			createCookie('otherInfo', otherInfoUpdated);
			if( mobilePlatform == window.IOS_PLATFORM ){
                setupWebViewJavascriptBridge(function(bridge) {
                    /* Initialize your app here */
                    bridge.callHandler('fetchAndCacheInfoCookie', '', function() {
                        //console.log('Registered Handler for set token');
                    });
                });
            }
		}
	}
}

function asciiToUint8Array(str)
{
    var chars = [];
    for (var i = 0; i < str.length; ++i)
        chars.push(str.charCodeAt(i));
    return new Uint8Array(chars);
}

function bytesToHexString(bytes)
{
    if (!bytes)
        return null;

    bytes = new Uint8Array(bytes);
    var hexBytes = [];

    for (var i = 0; i < bytes.length; ++i) {
        var byteString = bytes[i].toString(16);
        if (byteString.length < 2)
            byteString = "0" + byteString;
        hexBytes.push(byteString);
    }

    return hexBytes.join("");
}

function hexToBase64(str) {
  return btoa(String.fromCharCode.apply(null,
    str.replace(/\r|\n/g, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" "))
  );
}

function getDecryptionKey(){
	var qrtoken = getCookieValueAsIs("QRTOKEN");
	if(qrtoken != null){
        return hexToBase64(bytesToHexString(asciiToUint8Array(getCookieValueAsIs("QRTOKEN").substring(0,16))));
}
	return "";
}

function encryptUserData(valueString){ 
    var base64Key = getDecryptionKey();
    if(base64Key == undefined || base64Key == ""){return null;}
    var key = CryptoJS.enc.Base64.parse(base64Key);    
    var crypted = CryptoJS.AES.encrypt(valueString, key, {
        mode: CryptoJS.mode.ECB,
        padding: CryptoJS.pad.Pkcs7
    } );
    var encryptedText = CryptoJS.enc.Base64.stringify(crypted.ciphertext);
    return encryptedText;
}


function decryptUserData(encryptedString){ 
    var base64Key = getDecryptionKey();
    if(base64Key == undefined || base64Key == ""){return null;}
    var key = CryptoJS.enc.Base64.parse(base64Key); 
	var decryptedText = null;
	try {	
		var decryptedData = CryptoJS.AES.decrypt( encryptedString, key, {
			mode: CryptoJS.mode.ECB,
			padding: CryptoJS.pad.Pkcs7
		} );
		decryptedText = decryptedData.toString( CryptoJS.enc.Utf8 );
	}catch(e){
		//console.log("decryption failed");
		//console.log(encryptedString);
	}
    return decryptedText;
}
function decrypt(encryptedString){ 
    var base64Key = "R1hAcWF3NFUkWUhNbW40Mg==";
	if(base64Key == undefined){return null;}
    var key = CryptoJS.enc.Base64.parse(base64Key); 
	var decryptedText = null;
	try {	
		var decryptedData = CryptoJS.AES.decrypt( encryptedString, key, {
			mode: CryptoJS.mode.ECB,
			padding: CryptoJS.pad.Pkcs7
		} );
		decryptedText = decryptedData.toString( CryptoJS.enc.Utf8 );
	}catch(e){
		//console.log("decryption failed");
		//console.log(encryptedString);
	}
    return decryptedText;
}

/*var req_headers ={
	'Content-Type': 'application/json',
	'Authorization' : 'Bearer ' + getCookieValueAsIs("QRTOKEN")
};*/
/* Request Headers change */
var authParameterName = $('#authparamName').val();
var basicBasicInfoVal = $('#basicBasicInfo').val();
var basicUsername = $('#basicUsername').val();
var basicpassword = $('#basicPassword').val();
var req_headers ={
    'Content-Type': 'application/json'
};
if((basicBasicInfoVal != '')) {
    if(basicUsername != '' && basicpassword != '') { 
        var basicAuth = btoa(basicUsername + ":" + basicpassword);
		$('#basicBasicInfo').val(basicAuth);
		if($('#basicBasicInfo').val() != undefined && $('#basicBasicInfo').val() != '') {
			 req_headers['Authorization'] = 'Basic ' + $('#basicBasicInfo').val();
		}
		$('#basicUsername').val('');
		$('#basicPassword').val('');
    } else {
        var basicAuth = btoa(basicUsername+''+basicpassword);
		$('#basicBasicInfo').val(basicAuth);
        //req_headers['Authorization'] = 'Basic ' + $('#basicBasicInfo').val();
		$('#basicUsername').val('');
		$('#basicPassword').val('');
    }
}

req_headers[''+authParameterName] = 'Bearer ' + getFFPCookieValue("QRTOKEN");
//console.log(" req_headers >> "+req_headers);

function getErrorMessage(errorCode, localeErrorCode){
var errorMsg;
	$.ajax({
        type: "GET",
        async: false,
		cache: false,
        url: '/content/Qatar/i18n/common.services.errorCodes1.json',
        success: function(data, textStatus, request) {
        	//alert(jQuery.parseJSON(data));
        //console.log(data[errorCode]['sling:message']);
         //alert(data[errorCode]['sling:message']);
         if(data[errorCode] != undefined && data[errorCode]['sling:message'] != undefined){
        	 errorMsg =  data[errorCode]['sling:message'];
         }/*else{
        	 errorMsg = "Due to some technical Issues we are unable to login, please try after some time";
         }*/
         
        },
		error:function(request, xhr,textStatus,errorThrown){	
			//console.log("No Message configured");
			errorMsg = "No Error message configured";
		}
    });
	if( errorMsg == undefined ) {
		$.ajax({
			type: "GET",
			async: false,
			cache: false,
			url: '/content/Qatar/i18n/common.services.errorCodes2.json',
			success: function(data, textStatus, request) {
				//alert(jQuery.parseJSON(data));
			//console.log(data[errorCode]['sling:message']);
			 //alert(data[errorCode]['sling:message']);
			 if(data[errorCode] != undefined && data[errorCode]['sling:message'] != undefined){
				 errorMsg =  data[errorCode]['sling:message'];
			 } else{
				 errorMsg = "Due to some technical Issues we are unable to login, please try after some time";
			 }
			 
			},
			error:function(request, xhr,textStatus,errorThrown){	
				//console.log("No Message configured");
				errorMsg = "No Error message configured";
			}
		});
	}
	return errorMsg;
}

function isValidPassword(password){
	var isValid = false;
	//var isNameExists = checkForNames(password);
	var isNameExists = false;
	if(isNameExists) {
		isValid = false;
	} else {
		isValid = validatePassword(password);
	}	
	//console.log("Is password valid?:" + isValid);
    return isValid;
}

function validatePassword(passwordParam){
	var passwordRegExp ="^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,25}$";
	var pattern = new RegExp(passwordRegExp);
	return pattern.test(passwordParam);
}

function checkForNames(passwordParam){
	var tempPassword = passwordParam.toLowerCase();
	var firstName = getUserBasicInfoField('firstName');
	if(firstName !== undefined && firstName !== '') {
		var tempFirstName = firstName.toLowerCase();
		if(tempPassword.indexOf(tempFirstName) !== -1){
			return true;
		}
	}
	var lastName = getUserBasicInfoField('lastName');
	if(lastName !== undefined && lastName !== '') {
		var tempLastName = lastName.toLowerCase();
		if(tempPassword.indexOf(tempLastName) !== -1){
			return true;
		}
	}
	var middleName = getUserBasicInfoField('middleName');
	if(middleName !== undefined && middleName !== '') {
		var tempMiddleName = middleName.toLowerCase();
		if(tempPassword.indexOf(tempMiddleName) !== -1){
			return true;
		}
	}
	return false;
}

function customSortFunction(dataList, prop, asc){
	var toDataList = dataList.sort(function(a, b) {
        if (asc) {
            return (a[prop] > b[prop]) ? 1 : ((a[prop] < b[prop]) ? -1 : 0);
        } else {
            return (b[prop] > a[prop]) ? 1 : ((b[prop] < a[prop]) ? -1 : 0);
        }
    });
	return toDataList;
}
function getPricingResponse(origin, callback) {
    var pricingResponse = '';
    try {
        $.ajax({
            type: 'GET',
            dataType: 'json',
            url: '/etc/qrweb/pricing/pricing.pricingData.' + origin + '.json',
            async: false,
            success: function(response) {
                pricingResponse = response;
            }
        }).done(function() {
            callback(pricingResponse);
        });

    } catch (err) {}
}

function getDestinationRepoData(destination,destinationRepoPath, callback) {
    var destinationRepoData = '';
    try {
        $.ajax({
            type: 'GET',
            dataType: 'json',
            url: destinationRepoPath + '.destinationRepo.'+destination+'.json',
            async: false,
            success: function(response) {
                destinationRepoData = response;
            }
        }).done(function() {
            callback(destinationRepoData);
        });

    } catch (err) {}
}

function getDestinationPricingData(destinationFaresArray, destination) {
	return destinationFaresArray.filter(function(data) { return data["destination"] == destination }) || null;
}
function printPDF(data) {
    var sampleArr = base64ToArrayBuffer(data);
    var blob = new Blob([sampleArr], {
        type: 'application/pdf'
    });
    var fileURL = URL.createObjectURL(blob);;
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf("MSIE ");
    var trident = ua.indexOf('Trident/');
    var edge = ua.indexOf('Edge/');
    var firefox = ua.indexOf("Firefox");

    if (msie > 0 || trident > 0 || edge > 0) {
        $('#printPdf1').val(fileURL);
        var printpdfvar = document.getElementById("printPdf1");

        // printpdfvar.print();
        //newWin= window.open(blob,"","");
        setTimeout(function() {
            newWin = window.navigator.msSaveOrOpenBlob(blob, "ActivityStatement.pdf");
        }, 8000)
        // newWin.document.write(blob);
        if (!!navigator.userAgent.match(/Trident/gi)) {
            newWin.document.execCommand('print', false, null);
        } else {
            newWin.print();
        }
        newWin.close();

    } else if (firefox > 0) {
        var child = window.open(fileURL);
        window.focus();
        child.print();
        child.close();


    } else {
        var child = window.open(fileURL, "");
        setTimeout(function() {
            child.print();
        }, 2000)
    }
}
function validateFileFormats(fileFormats, fileName){
    if( fileName !== undefined &&  fileFormats != undefined ){
        var fileFormat = (fileName.toUpperCase()).split('.');
        if( (fileFormats.toUpperCase()).indexOf(fileFormat[fileFormat.length - 1]) != - 1 ){
    		return true;
        }
    }
    return false;
}

function validateFileSize(file, fileSize){
	if( file != undefined && file != null ){
		var fileSizeInMB = (file.size / (1024 * 1024 ));
		if( fileSizeInMB == 0 ){
            return false;
        }
        if( fileSizeInMB <= parseInt(fileSize) ){
			return true;
		}
    }
	return false;
}

function getShortMobileNumber(mobileNumber, digitsToShow) {
    var regEx	= "\\d(?=\\d{"+digitsToShow+"})";
	var re = new RegExp(regEx,"g");
	return mobileNumber.replace(re, "X");
}

function getShortEmailID(email, charsToShow) {
	var emailID = email !== undefined? email.substr(0, email.indexOf('@')) : '';
	var finalEmailID = '';
	if(emailID !== '') {
		if(emailID.length >= 3) {
            emailID = new Array(emailID.length - charsToShow + 1).join('x') + emailID.slice(-charsToShow);
        } else {
             emailID = new Array(emailID.length + 1).join('x');
        }
		var domain = email.substr(email.indexOf('@') + 1);
		var domainChars = domain.substr(domain.indexOf('.') + 1).length;
		domain = domain.substr(0, domain.indexOf('.')) + '.' + new Array(domainChars + 1).join('x');
		finalEmailID =  emailID + '@' + domain;
	}
	return finalEmailID;
}

function isValidEmailID(emailID) {
	//var emailIDRegExp = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	var emailIDRegExp = /^(?:[a-z0-9A-Z$&'+/_-]+(?:\.[a-z0-9A-Z$&'+/_-]+)*@(?:[a-z0-9A-Z](?:[a-z0-9A-Z-]*[a-z0-9A-Z])?\.)+[a-z0-9A-Z](?:[a-z0-9A-Z-]*[a-z0-9A-Z])?)$/;
	if (emailIDRegExp.test(emailID)) {
		return true;
	} else {
		return false;
	}
}
function OTPCheck(OTPRequest, success, cancel){
	var currentPagePath = window.location.pathname + window.location.hash;
	var reloadTime = 3000;
	var otpContactDetails;
	var randomOTPPopupID= "OPT-popup-" + Math.random().toString(36).substr(2, 10);
	var $spinner_otp = $('#transaction-OTP-spinner.spinner-overlay');
	showSpinnerMobileApp($('#global-spinner-container'), 'spinner-full-page');
	window.qrServiceRef.zone.run(function() {
		window.qrServiceRef.postReq($("#verifyUser").val(), {"token": getFFPCookieValue("QRTOKEN")}, req_headers, '', '').then(function(data) {
			if(data.errorObject != undefined) {
				if(data.errorObject[0].errorName == 'SESSION_EXPIRED'){
					setTimeout(function(){
						redirectToLogin($('#loginPage').val() + '?resource=' + currentPagePath);
					}, reloadTime);
				}
			} else if(!data.otpVerified) {
				window.qrServiceRef.postReq($("#sendOTP").val(), OTPRequest, req_headers, '', '').then(function(sendOTPdata) {
					hideSpinnerMobileApp($('#global-spinner-container'), 'spinner-full-page');
					$('.j-transaction-OTP-check').modal('show');
					if(sendOTPdata.errorObject != undefined && sendOTPdata.errorObject.length) {
						$('.j-transaction-OTP-check').find(".error.transactionOTPerror").css('display','block').find('.input-base-msg-box').html(sendOTPdata.errorObject[0].errorDescription);
						if(sendOTPdata.errorObject[0].errorName == 'SESSION_EXPIRED'){
							setTimeout(function(){
								redirectToLogin($('#loginPage').val() + '?resource=' + currentPagePath);
							}, reloadTime);
						}
					} else {
						//console.log("OTP sent");
						otpContactDetails = sendOTPdata.contactDetails;
						$('.j-transaction-OTP-check .otp-block p:last-child').text(Granite.I18n.get('transactions.opthelptext',[sendOTPdata.timeOutMinutes]));
						if(sendOTPdata.transactionInfo != undefined && sendOTPdata.transactionInfo.transactionId != undefined) {
							//$tabId.find(".extrev-transactionId").val(sendOTPdata.transactionInfo.transactionId);
						}
					}
				});
				$('.j-transaction-OTP-check').addClass(randomOTPPopupID);
				$('.j-transaction-OTP-check input#otpValue').val('').trigger('keyup');
				$('.j-OTP-verify').prop('disabled', true);
				$('.j-transaction-OTP-check .error').css('display','none');
				$('.j-transaction-OTP-check').modal('show');
				$(document).on('click','.'+randomOTPPopupID+' .j-OTP-cancel',function(){
					cancel();
					$('.j-transaction-OTP-check').modal('hide');
					//$('.j-transaction-OTP-check').find('.transotpText').css('display', 'none');
					$('.j-transaction-OTP-check').find('.transotpText.sendText').css('display', 'block');
					$('.j-transaction-OTP-check').find(".error.transactionOTPerror").css('display','none')
				});
				$(document).on('click','.'+randomOTPPopupID+' .j-resend-otp',function(){
					$('.j-transaction-OTP-check input#otpValue').val('').trigger('keyup');
					$('.j-OTP-verify').prop('disabled', true);
					$('.j-transaction-OTP-check .error').css('display','none');
					showSpinnerMobileApp($spinner_otp, 'spinner-full-page');
					window.qrServiceRef.postReq($("#sendOTP").val(), OTPRequest, req_headers, '', '').then(function(sendOTPdata) {
						hideSpinnerMobileApp($spinner_otp ,'spinner-full-page');
						if(sendOTPdata.errorObject != undefined && sendOTPdata.errorObject.length) {
							$('.j-transaction-OTP-check').find(".error.transactionOTPerror").css('display','block').find('.input-base-msg-box').html(sendOTPdata.errorObject[0].errorDescription);
							if(sendOTPdata.errorObject[0].errorName == 'SESSION_EXPIRED'){
								setTimeout(function(){
									redirectToLogin($('#loginPage').val() + '?resource=' + currentPagePath);
								}, reloadTime);
							}
						} else {
							//console.log("OTP sent");
							otpContactDetails = sendOTPdata.contactDetails;
							$('.j-transaction-OTP-check').find('.transotpText').css('display', 'none');
							$('.j-transaction-OTP-check').find('.transotpText.resendText').css('display', 'block');
							if(sendOTPdata.transactionInfo != undefined && sendOTPdata.transactionInfo.transactionId != undefined) {
								//$tabId.find(".extrev-transactionId").val(sendOTPdata.transactionInfo.transactionId);
							}
						}
					});
				});
				$(document).on('click','.'+randomOTPPopupID+' .j-OTP-verify',function(){
					showSpinnerMobileApp($spinner_otp ,'spinner-full-page');
					window.qrServiceRef.zone.run(function() {
						var verifyOTPRequest = {
							"customerProfileId": getUserBasicInfoField('customerProfileId'),
							"activity": OTPRequest.activity,
							"otpValue": $('.j-transaction-OTP-check').find('#otpValue').val(),
							"ffpNumber": getUserBasicInfoField('ffpNumber'),
							"contactDetails": otpContactDetails
						};
						$.each(verifyOTPRequest.contactDetails, function(key,value) {					
							value.otpValue = verifyOTPRequest.otpValue;					
						});
						window.qrServiceRef.postReq($("#verifyOTPServiceURL").val(), verifyOTPRequest, req_headers, '', '').then(function(data) {
							if(data.errorObject != undefined && data.errorObject.length){
								$('.j-transaction-OTP-check').find(".error.transactionOTPerror").css('display','block').find('.input-base-msg-box').html(data.errorObject[0].errorDescription);
								hideSpinnerMobileApp($spinner_otp ,'spinner-full-page');
								if(data.errorObject[0].errorName == 'SESSION_EXPIRED'){
									setTimeout(function(){
										redirectToLogin($('#loginPage').val() + '?resource=' + currentPagePath);
									}, reloadTime);
								}
							} else if(data.cotactDetails != undefined){
								var otpVerified = false;
								if (data.cotactDetails.length == 1) {
									otpVerified = data.cotactDetails[0].otpVerified;
								} else {
									otpVerified = data.cotactDetails[0].otpVerified || data.cotactDetails[1].otpVerified;
								}
								if(otpVerified) {
									hideSpinnerMobileApp($spinner_otp,'spinner-full-page');
									$('.j-transaction-OTP-check').modal('hide');
									success();
								} else {
									hideSpinnerMobileApp($spinner_otp,'spinner-full-page');
									$('.j-transaction-OTP-check').find(".error.transactionOTPerror").css('display','block').find('.input-base-msg-box').html(Granite.I18n.get('login.otp.invalidotpmessage'));
								}
							} else {
								hideSpinnerMobileApp($spinner_otp,'spinner-full-page');
							}
						});
					});
				});
			} else {
				success();
			}
		});
	});
}
$(document).on('keyup', '.j-transaction-OTP-check input#otpValue', function () {
	if ($(this).val().trim().length) {
	  $('.j-OTP-verify').prop('disabled', false);
	} else {
	  $('.j-OTP-verify').prop('disabled', true);
	}
});$(document).on('keypress', '.j-transaction-OTP-check input#otpValue', function (e) {
	//allow only numbers
	if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
		return false;
	}
});

function getHostName(url) {
	var hostName = '';
    var match = url.match(/:\/\/(www[0-9]?\.)?(.[^/:]+)/i);
    if (match != null && match.length > 2 && typeof match[2] === 'string' && match[2].length > 0) {
		hostName = match[2];
    }
    return hostName;
}

/** method to redirect to profile page based on validation **/
function triggerEmailValidation(){
	if( isMobileApp() || mobilePlatform == window.ANDROID_PLATFORM || mobilePlatform == window.IOS_PLATFORM ) {
		deleteCookie("InfoMissing");
		return false;
	}
    var basicInfoJSON = JSON.parse(getFFPCookieValue('basicInfo'));
    var portalOverviewPage = $('#flyout-portalProfileOverview').val();
    var privilegeOverviewPage = $('#flyout-privilegeProfileOverview').val();
    var overViewLink, isValidUserInfo = true;
    if( getUserBasicInfoField('programCode') == 'QRPC' ){
		overViewLink = privilegeOverviewPage;
    } else  if( getUserBasicInfoField('programCode') == 'PORTAL'){
        overViewLink = portalOverviewPage;
    }
    if( basicInfoJSON != undefined && overViewLink != undefined && getUserBasicInfoField('programCode') == 'QRPC'){
        if( basicInfoJSON.emailId == undefined || basicInfoJSON.emailId == null || basicInfoJSON.emailId == '' ) {
            isValidUserInfo = false;
			createCookie("InfoMissing","EMAIL");
		}
        if( basicInfoJSON.country == undefined || basicInfoJSON.country == null || basicInfoJSON.country == '' ) {
            isValidUserInfo = false;
            var cookieValue = getFFPCookieValue('InfoMissing');
            if( cookieValue != null && cookieValue != undefined ){
				createCookie("InfoMissing",cookieValue+"COUNTRY");
            } else {
				createCookie("InfoMissing","COUNTRY");
			}
		}
        if( basicInfoJSON.mobile == undefined || basicInfoJSON.mobile == null || basicInfoJSON.mobile == '' ) {
            isValidUserInfo = false;
            var cookieValue = getFFPCookieValue('InfoMissing');
            if( cookieValue != null && cookieValue != undefined ){
				createCookie("InfoMissing",cookieValue+"MOBILE");
            } else {
				createCookie("InfoMissing","MOBILE");
			}
		}
        if( !isValidUserInfo ){
			if( window.location.pathname !== overViewLink+'.html' ){
				window.location = overViewLink+'.html';
				return true;
			}
        } else if( getFFPCookieValue('InfoMissing') != null && getFFPCookieValue('InfoMissing') != undefined && isValidUserInfo) {
			deleteCookie("InfoMissing");
		}
    }
}

function redirectToLogin(loginPage){
	$.ajax({
        url: "/qr/Logout",
                type: 'POST',   
                data: {"logOut":"logOut"},
        success: function(data) {
			//console.log("logout success!");
        	window.location = loginPage;
        },
        error:function(xhr,textStatus,errorThrown){
			//console.log("logout failed!" + textStatus + errorThrown);
			//window.location = loginPage;
        }
    }); 

}

/** format strings **/
function formatString(string){
    if( string != null && string != undefined ){
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
	}
	return '';
};

function signOut(isCallbackurl,callBack){
	$.ajax({
        url: "/qr/Logout",
                type: 'GET',   
                data: {"logOut":"logOut"},
				cache: false,
        success: function(data) {
			//console.log("signout success!");
			if(isCallbackurl){
				callBack();
			}	
        },
        error:function(xhr,textStatus,errorThrown){
			//console.log("logout failed!" + textStatus + errorThrown);			
        }
    });
}

function qmilesSiteValueInfo() {
	var qmilesSiteValue;
	var qmilesSiteJson = $('#QmilesSitesJsonInformation').val();
	if( qmilesSiteJson == undefined || qmilesSiteJson == '' || qmilesSiteJson == null ) {
		qmilesSiteValue = 'new';
	} else {
		qmilesSiteJson = typeof qmilesSiteJson != 'object' ? JSON.parse(qmilesSiteJson) : qmilesSiteJson;
		var qmilesSitesValues = qmilesSiteJson.qmilesSites;
		qmilesSitesValues = qmilesSitesValues != undefined && qmilesSitesValues != '' ? qmilesSitesValues : "";
		var globalSitesValues = qmilesSiteJson.globalSites;
		globalSitesValues = globalSitesValues != undefined && globalSitesValues != '' ? globalSitesValues : "";
		var localLiveEnglishSitesValues = qmilesSiteJson.localLiveEnglishSites;
		localLiveEnglishSitesValues = localLiveEnglishSitesValues != undefined && localLiveEnglishSitesValues != '' ? localLiveEnglishSitesValues : "";
		var siteProperty = $('#page-locale').val()+"_"+$('#countryCodeVal').val();
		if( qmilesSitesValues.indexOf(siteProperty) != -1 ) {
			qmilesSiteValue = "old";
		} else {
			qmilesSiteValue = "new";
		}
		
		if( globalSitesValues.indexOf(siteProperty) != -1 && localLiveEnglishSitesValues.indexOf(siteProperty) != -1 ) {
			qmilesSiteValue = "other-en";
		}
		if( globalSitesValues.indexOf(siteProperty) != -1 && localLiveEnglishSitesValues.indexOf(siteProperty) == -1 ) {
			qmilesSiteValue = "other";
		}
	}
	if( qmilesSiteValue == undefined || qmilesSiteValue == '' || qmilesSiteValue == null ) {
		qmilesSiteValue = 'new';
	}
	return qmilesSiteValue;
}
function getActualCookieValue(cookieName) {
	if( cookieName == 'QMILESSITE' ) {
		var qmilesSiteValue = qmilesSiteValueInfo();
		return qmilesSiteValue;
	}
	var cookieValue = document.cookie;
	var cookieStartingIndex = cookieValue.indexOf(" " + cookieName + "=");
	if (cookieStartingIndex == -1) {
		cookieStartingIndex = cookieValue.indexOf(cookieName + "=");
	}
	if (cookieStartingIndex == -1) {
		cookieValue = null;
	} else {
		cookieStartingIndex = cookieValue.indexOf("=", cookieStartingIndex) + 1;
		var cookieEndingIndex = cookieValue.indexOf(";", cookieStartingIndex);
		if (cookieEndingIndex == -1) {
			cookieEndingIndex = cookieValue.length;
		}
		cookieValue = unescape(cookieValue.substring(cookieStartingIndex, cookieEndingIndex));
	}
	return cookieValue;
}

function getGlobalPagePath(pagePathParam) {
    var globalPagePath = '';    
    if('' !== pagePathParam) {
        var temp = pagePathParam.split('/');        
        $.each(temp, function(i, pageName) {            
            if(i !== 0) {
                if(i === 2) {
                    globalPagePath += '/global';
                } else if(i === 3) {
                    globalPagePath += '/en';
                } else {
                    globalPagePath += '/' + pageName;
                }
            }
        });
        //console.log('globalPagePath[' + pagePathParam + '] === [' + globalPagePath + ']');
    }
    return globalPagePath;
}


function getCountryLanguage(pagePathParam, countryParam, languageParam) {
    var globalPagePath = '';    
    if('' !== pagePathParam) {
        var temp = pagePathParam.split('/');        
        $.each(temp, function(i, pageName) {            
            if(i !== 0) {
                if(i === 2) {
                    if('' != countryParam) {
                    	globalPagePath += '/' + countryParam;
                    } else {
                        globalPagePath += '/' + pageName;
                    }
                } else if(i === 3) {
                    if('' != languageParam) {
                    	globalPagePath += '/' + languageParam;
                    } else {
                        globalPagePath += '/' + pageName;
                    }                    
                } else {
                    globalPagePath += '/' + pageName;
                }
            }
        });
        //console.log('globalPagePath[' + pagePathParam + '] === [' + globalPagePath + ']');
    }
    return globalPagePath;
}


function getNodePropertyValue(pagePath, componentPath, parentNodeName, propertyName, isShortURL) {
    var propertyValue = '';
    if('' !== pagePath && '' !== componentPath) {
		var isComponentAvailable = false;
		$.ajax({
            url: '/qr/findResource?path=' + pagePath + '&componentPath=' + componentPath + '&parentNodeName=' + parentNodeName,
            type: 'get',
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            async: false,
            success: function(findComponentResponse) {
            //console.log("Success:findComponentResponse:", findComponentResponse);
                isComponentAvailable = findComponentResponse['isComponentAvailable'];                
				if(isComponentAvailable) {
					$.ajax({
						url: findComponentResponse['resourcePath'] + '.json',
						type: 'get',
						contentType: 'application/json; charset=utf-8',
						dataType: 'json',
						async: false,
						success: function(response) {
						//console.log("Success:", response);
							propertyValue = response[propertyName];
							//console.log('[' + pagePath + '] -- [' + componentPath + '] ( ' + propertyName + ':' + propertyValue + ')');
							
							if(isShortURL){
								$.ajax({
									url: '/qr/getShortURL?pagePath=' + propertyValue,
									type: 'get',
									contentType: 'application/json; charset=utf-8',
									dataType: 'json',
									async: false,
									success: function(shortURLResponse) {
										//console.log("Success:", shortURLResponse);
										var shortURL = shortURLResponse['shortURL'];
										if(shortURL !== undefined && shortURL !== '') {
											propertyValue = shortURL;
										}
										//console.log('Final [' + pagePath + '] -- [' + componentPath + '] ( ' + propertyName + ':' + propertyValue + ')');
									},
									error: function(XMLHttpRequest, textStatus, errorThrown) {
										console.error("Error while getting short URL");
									}
								});
							}
						},
						error: function(XMLHttpRequest, textStatus, errorThrown) {
							console.error("Error while getting property");
						}
					});
				}
            },
            error: function(XMLHttpRequest, textStatus, errorThrown) {
                console.error("Error while checking for component existence");
            }
        });       
    }
	return propertyValue;
}

function getShortURL(pagePath) {
	var shortURL = '';
	$.ajax({
		url: '/qr/getShortURL?pagePath=' + pagePath,
		type: 'get',
		contentType: 'application/json; charset=utf-8',
		dataType: 'json',
		async: false,
		success: function(shortURLResponse) {
			//console.log("Success:", shortURLResponse);
			shortURL = shortURLResponse['shortURL'];
			//console.log('Short URL [' + pagePath + '] is ' + shortURL);
		},
		error: function(XMLHttpRequest, textStatus, errorThrown) {
			//console.error("Error while getting short URL");
		}
	});
	return shortURL;
}

var locale = $('#page-locale').val();
if(locale == 'ar' && locale != undefined){
var jquery_translations;
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
		jquery_translations = JSON.parse(xhttp.responseText);
    }
};
	xhttp.open("GET", "/content/Qatar/common/json/jquery_translations.json", true);
xhttp.send();
    $('.hasDatepicker').click( function() {
        var locale = $('#page-locale').val();
        if( locale != 'en' && $.datepicker.regional[locale] == undefined ) {
            $.datepicker.regional[locale] = {
                closeText: jquery_translations[locale].closeText,
                currentText: jquery_translations[locale].currentText,
                monthNames: jquery_translations[locale].monthNames,
                monthNamesShort: jquery_translations[locale].monthNamesShort,
                dayNames: jquery_translations[locale].dayNames,
                dayNamesShort: jquery_translations[locale].dayNamesShort,
                dayNamesMin: jquery_translations[locale].dayNamesMin
            };
            $.datepicker.setDefaults($.datepicker.regional[locale]);
        }
    
    });
}

$(document).ready(function(){

	if( $('#isCUGEnabled').val() && getUserBasicInfoField('programCode') === 'PORTAL' ){
		$('#breadcrumb .breadcrumbs').find('li').eq(1).hide();
	}


	if( $('#enableDevTools').val() == 'no' ) {
		$(document).on("contextmenu", function (e) {        
			e.preventDefault();
		});
		
		$(document).keydown(function (event) {
			if (event.keyCode == 123) { // Prevent F12
				return false;
			} else if (event.ctrlKey && event.shiftKey && event.keyCode == 73) { // Prevent Ctrl+Shift+I        
				return false;
			}
		});
	}


	var sessionExpired = localStorage.getItem("sessionExpired");
	if( sessionExpired == "true" ){
		localStorage.removeItem("sessionExpired");
		var isPublishInstance = $('#isPublishInstance').val();
		if( isPublishInstance == 'true') {
			$('#modal-session-expiry').modal("show");
			$('#modal-session-expiry').attr('tabindex', 0).focus();
			$('#session-expiry-popup-title').attr('tabindex', 0).focus();
		}
	}
	if( getFFPCookieValue('QRTOKEN') != undefined && getFFPCookieValue('QRTOKEN') != null ) {
		window.initSession();
	} else {
		var sessionLastAcitivity = localStorage.getItem("sessionLastAcitivity");
		if( sessionLastAcitivity !== null && sessionLastAcitivity !== undefined ){
			localStorage.removeItem("sessionLastAcitivity");
		}
	}
	$(document).on('click','#sessionExpiryCancel', function(){
		logout();
		addComponentPageEvent('login','session expired','','');
	});
	
	$(document).on('click','#sessionExpiryContinue', function(){
		sessionExtendMethod();
		window.initSession();
		//$('#modal-session-expiry').modal('hide');
	});
	
	if( isMobileApp() ){
		updateLoyaltyCurrencyInfo();
	}
});

function saveAsImage(name, imageAsBytes, extension) {
    var blob = new Blob([imageAsBytes], {
        type: 'image/jpeg'
    });
    var userAgent = window.navigator.userAgent;
    var msie = userAgent.indexOf("MSIE ");
    var trident = userAgent.indexOf('Trident/');
    var edge = userAgent.indexOf('Edge/');
	// If Internet Explorer
    if (msie > 0 || trident > 0 || edge > 0) {
        window.navigator.msSaveOrOpenBlob(blob, name + '.' + extension);
    }
}

function getPropertyValue(propertyName, list) {
    return list[propertyName];
}
var localeMonthNames = [];
function formatLocaleDateToEN(date){
	var langCode = $(document).find('#page-locale').val();
	if(langCode != '' && langCode != 'en' && date != undefined){
		if(localeMonthNames.length == 0) {			
			Granite.I18n.setLocale(langCode);
			localeMonthNames = [
				Granite.I18n.get('booking.month.january'),
				Granite.I18n.get('booking.month.february'),
				Granite.I18n.get('booking.month.march'),
				Granite.I18n.get('booking.month.april'),
				Granite.I18n.get('booking.month.may'),
				Granite.I18n.get('booking.month.june'),
				Granite.I18n.get('booking.month.july'),
				Granite.I18n.get('booking.month.august'),
				Granite.I18n.get('booking.month.september'),
				Granite.I18n.get('booking.month.october'),
				Granite.I18n.get('booking.month.november'),
				Granite.I18n.get('booking.month.december')
			];
		}
				
		var monthNames = ["January", "February", "March", "April", "May", "June",
			  "July", "August", "September", "October", "November", "December"
				];
		var getMonthName;	
		var monthText;
		if(langCode =='ko' || langCode =='zh' || langCode =='ja' ){
			monthText = date.split(' ')[1]; 
		} else{
			monthText = date.replace(/[0-9]/g,'').trim();
		}
			
		var d = date.split(monthText);
		var dt = d[0].trim();
		var yr = d[1].trim();
			
		$.each(localeMonthNames,function(index,value){
			if(monthText == value){
				getMonthName = monthNames[index];
			}
		});
		return [dt, getMonthName, yr].join(' ');
	} else {
		return date;
	}
}

function redirectToPreviousPage() {
    var backButtonUrl = '';
    var loginRequestCookieData = getFFPCookieValue('loginRequest');
    if(null !== loginRequestCookieData && '' !== loginRequestCookieData && typeof loginRequestCookieData !== 'undefined') {
        var loginRequestCookieDataJSON = JSON.parse(loginRequestCookieData);        
        $.each(loginRequestCookieDataJSON[0], function(key, value) {
            if('callBackUrl' === key) {
                backButtonUrl = value;
                return false;
            }
        });
    } else {
        backButtonUrl = document.referrer;
    }
    //console.log('backButtonUrl:' + backButtonUrl);
    window.location.href = backButtonUrl;
}

function verifySCMandatoryFields() {
	var isProfileCompleteSerURL = $('#isProfileCompleteSerURL').val();
	var isProfileCompleteSerReq = {
		'customerProfileId' : getUserBasicInfoField('customerProfileId')
	};
	$.ajax({
		url: isProfileCompleteSerURL,
		type: 'POST',
		contentType: 'application/json; charset=utf-8',
		dataType: 'json',
		data: JSON.stringify(isProfileCompleteSerReq),
		headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
		cache: false,
		success: function(response) {
			var errorObject = response.errorObject;
			if(errorObject === undefined && response.studentCompleteness === 'INCOMPLETE') {
				var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
				if('new' === qmilesSiteCookieValue) {
					window.location = $('#new-qrpc-sc-profile-URL').val() + '.html';
				} else if('old' === qmilesSiteCookieValue) {
					window.location = $('#old-qrpc-sc-profile-URL').val() + '.html';
				} else if('other' === qmilesSiteCookieValue) {
					window.location = $('#global-qrpc-sc-profile-URL').val() + '.html';
				} else if('other-en' === qmilesSiteCookieValue) {
					window.location = $('#english-qrpc-sc-profile-URL').val() + '.html';
				}
			}
		}
	});
}

function updateLoyaltyCurrencyInfo() {
	if( getFFPCookieValue('QRTOKEN') == null || getFFPCookieValue('QRTOKEN') == undefined ) { return false;}
	var getLoyaltyCurrencyInfo = $('#getLoyaltyCurrencyInfo').val();
	if(getUserBasicInfoField("customerProfileId") !== '' && getUserBasicInfoField("customerProfileId") !== undefined) {
		var getLoyaltyCurrencyInfoRequest = {
			"customerProfileId": getUserBasicInfoField("customerProfileId")
		};
	}
	if( typeof getLoyaltyCurrencyInfo == 'undefined' && getLoyaltyCurrencyInfo == null && getLoyaltyCurrencyInfo == '' ) {
		console.log("GetLoyaltyCurrencyInfo URL is not configured");
	}
	$.ajax({
		url: getLoyaltyCurrencyInfo,
		type: 'POST',
		contentType: 'application/json; charset=utf-8',
		dataType: 'json',
		data: JSON.stringify(getLoyaltyCurrencyInfoRequest),
		headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
		cache: false,
		success: function(response) {
			var errorObject = response.errorObject;
			if(errorObject === undefined){
				var getLoyaltyCurrencyInfoStatus = response;
				if( getLoyaltyCurrencyInfoStatus.balanceInfo != undefined ) {
					var currencyInfo = getLoyaltyCurrencyInfoStatus.balanceInfo[0];
					var loyaltyAmount = currencyInfo != undefined ? currencyInfo.loyaltyAmount : '';
					var loyaltyExpiryAmount = currencyInfo!= undefined ? currencyInfo.loyaltyExpiry : '';
					if(loyaltyAmount != '' && loyaltyAmount.loyaltyCurrency == 'QMILES'){
						var updatedQmilesValue = loyaltyAmount.amount;
						updateUserBasicInfoField('qmilesAmount',""+updatedQmilesValue);
						if (updatedQmilesValue != undefined) {
								$('#qmiles').html(parseInt(updatedQmilesValue).toLocaleString());
								$('.personalized-drop-row .progress .progress-row strong').eq(1).html(parseInt(updatedQmilesValue).toLocaleString());
							}
							var updatedExpiryQmilesAmount = loyaltyExpiryAmount.amount;
						updateUserBasicInfoField('qmilesExpiryAmount',''+updatedExpiryQmilesAmount);
						updateUserBasicInfoField('qmilesExpiryDate',''+loyaltyExpiryAmount.expiryDate);
						
						console.log("loyaltyExpiryAmount inside cookie now ",getUserBasicInfoField('qmilesExpiryAmount'));
					} else {
						var updatedQmilesValue = getUserBasicInfoField('qmilesAmount');
						if (updatedQmilesValue != undefined) {
							$('#qmiles').html(parseInt(updatedQmilesValue).toLocaleString());
							$('.personalized-drop-row .progress .progress-row strong').eq(1).html(parseInt(updatedQmilesValue).toLocaleString());
						}
					}
				} else{
					var updatedQmilesValue = getUserBasicInfoField('qmilesAmount');
					if (updatedQmilesValue != undefined) {
						$('#qmiles').html(parseInt(updatedQmilesValue).toLocaleString());
						$('.personalized-drop-row .progress .progress-row strong').eq(1).html(parseInt(updatedQmilesValue).toLocaleString());
					}
				}
				if( isMobileApp() ){
					var mobileJson = {};
					mobileJson['basicInfo'] = getCookieValue('basicInfo');
					mobileJson['basicInfoDecrypted'] = getFFPCookieValue('basicInfo');
					if( mobilePlatform == window.ANDROID_PLATFORM ){
						JSInterface.portalUpgradeSuccess(JSON.stringify(mobileJson));
					}

					if( mobilePlatform == window.IOS_PLATFORM ){
						setupWebViewJavascriptBridge(function(bridge) {
							/* Initialize your app here */
							bridge.callHandler('fetchAndCacheInfoCookie', '', function() {
								//console.log('Registered Handler for set token');
							});
						});
					}
				}
			}
		}
	});
}
function validateLinkMFABRedirect(linkValue) {
	var pat = /^(http|https):\/\/[^ "]+$/;
	if (pat.test(linkValue)) {
		$.ajax({
			url:'/qr/qrweb/loginvalidator',
			data: { 'dataUrl' : linkValue },
			success:function(data, textStatus, xhr) {
				console.log(xhr.status);
				var statusCode = xhr.status % 200;
				if( statusCode === 0 ) {
					window.location.href = linkValue;
				}
			},
			error: function(response) {
			}
		});	 
	} 
} 
function numberWithCommasRedemption(x) {
	return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
function svbReauthenticationCall() {
	if( getFFPCookieValue('QRTOKEN') == null || getFFPCookieValue('QRTOKEN') == undefined ) { return false;}
	var getLoyaltyCurrencyInfo = $('#getLoyaltyCurrencyInfo').val();
	console.log('getLoyaltyCurrencyInfo is:', getLoyaltyCurrencyInfo);
	
	var createPartnerLoginSerURL = $('#createPartnerLoginMainSerURL').val();
	if( createPartnerLoginSerURL != undefined ) {
		createPartnerLoginSerURL = "https://eisffp.qatarairways.com/ffp-services/partner/createPartnerLogin";
    }
	var redirectURL = window.location.href;
	var redirectParam = window.location.search;
	var successRedirectUrl;
	var failureRedirectUrl;
	var tokenSub = getFFPCookieValue('QRTOKEN').substring(11,22);
	tokenSub = encryptUserData(tokenSub);
	tokenSub = encodeURIComponent(tokenSub);
	if (redirectParam === '' || redirectParam === undefined) {
		successRedirectUrl = redirectURL + '?avexStatus=success&QRTKN='+tokenSub;
		failureRedirectUrl = redirectURL + '?avexStatus=failure&QRTKN='+tokenSub;
	} else {
		successRedirectUrl = redirectURL + '&avexStatus=success&QRTKN='+tokenSub;
		failureRedirectUrl = redirectURL + '&avexStatus=failure&QRTKN='+tokenSub;
	}

	var partnerLoginRequest = {
		"customerProfileId": getUserBasicInfoField("customerProfileId"),
		"partnerCode": "BA",
		"successRedirectUrl": successRedirectUrl,
		"mfa":false,
		"failureRedirectUrl": failureRedirectUrl
	};

	$.ajax({
		url: createPartnerLoginSerURL,
		type: 'POST',
		contentType: 'application/json; charset=utf-8',
		dataType: 'json',
		data: JSON.stringify(partnerLoginRequest),
		headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
		cache: false,
		success: function(partnerRes) {
			var errorObject = partnerRes.errorObject;
			if (errorObject === undefined) {
				console.log("partnerRes" + partnerRes);
				var linkValue = partnerRes.redirectUrl;
				//document.location.href = linkValue;
				validateLinkMFABRedirect(linkValue);		                
			} else {
				console.log("error");
				$('#avios-alert-modal .button-wrapper .button').addClass('hide');
				$('#avios-alert-modal .button-wrapper .button#avex-try-again-btn').removeClass('hide');
				$('#avios-alert-modal h2').text(Granite.I18n.get('swift.avex.err-msg.title'));
				$('#avios-alert-modal p').html(errorObject[0].errorDescription);
				$('#avios-alert-modal').modal();
			}
		}
	});
	
}
var isFetchSVBServiceCalled = false;
function fetchsvbServiceCall() {
	var count = 0;
	var dotString = ".";
	var intervalLoader = setInterval(function(){
		$('.Qpoints-Qmiles #others-flyout-details #qmiles').text(dotString);
		dotString = dotString + ".";
		count++;
		if( count == 6 ) {
			count = 0;
			dotString = ".";
		}
	},300 );
	isFetchSVBServiceCalled = true;
	if( getFFPCookieValue('QRTOKEN') == null || getFFPCookieValue('QRTOKEN') == undefined ) { return false;}
	var fetchSVBUrl = $('#fetchSVBSerUrl').val();//"https://eisffpuat.qatarairways.com.qa/ffp-services/partner/fetchSVB";
	console.log('getLoyaltyCurrencyInfo is:', getLoyaltyCurrencyInfo);
	if( fetchSVBUrl == undefined || fetchSVBUrl == '' || fetchSVBUrl == '#' ) { return false;}
	var redirectURL = window.location.href;
	var redirectParam = window.location.search;
	var successRedirectUrl;
	var failureRedirectUrl;
	var tokenSub = getFFPCookieValue('QRTOKEN').substring(11,22);
	tokenSub = encryptUserData(tokenSub);
	tokenSub = encodeURIComponent(tokenSub);
	if (redirectParam === '' || redirectParam === undefined) {
		successRedirectUrl = redirectURL + '?avexStatus=success&QRTKN='+tokenSub;
		failureRedirectUrl = redirectURL + '?avexStatus=failure&QRTKN='+tokenSub;
	} else {
		successRedirectUrl = redirectURL + '&avexStatus=success&QRTKN='+tokenSub;
		failureRedirectUrl = redirectURL + '&avexStatus=failure&QRTKN='+tokenSub;
	}

	var fetchSVBRequest = {
		"customerProfileId": getUserBasicInfoField("customerProfileId")
	};

	$.ajax({
		url: fetchSVBUrl,
		type: 'POST',
		contentType: 'application/json; charset=utf-8',
		dataType: 'json',
		data: JSON.stringify(fetchSVBRequest),
		headers: { 'Authorization': 'Bearer ' + getFFPCookieValue("QRTOKEN") },
		cache: false,
		success: function(response) {
			var errorObject = response.errorObject;
			if (errorObject === undefined) {
				var singleVirtualBalance = response.singleVirtualBalance;	
                var baseAccountBalance = response.baseAccountBalance;
                updateUserBasicInfoField('qmilesAmount',""+baseAccountBalance);
				$('#qmiles').html(parseInt(baseAccountBalance).toLocaleString());
			    $('.personalized-drop-row .progress .progress-row strong').eq(1).html(parseInt(baseAccountBalance).toLocaleString());					
				var linkedAccountsBalances = response.linkedAccountsBalances;
				$('#avios-dashboard-card').find('.avios-balance').text(numberWithCommasRedemption(singleVirtualBalance));
				$('.Qpoints-Qmiles #others-flyout-details #qmiles').text(numberWithCommasRedemption(singleVirtualBalance));
				clearInterval(intervalLoader);
				if( linkedAccountsBalances.length !== 0 ) {
					//Reauth required check
					var baAccountNeedsLogin = linkedAccountsBalances[0].needsLogin;
					var accountId = linkedAccountsBalances[0].accountId;
					if( baAccountNeedsLogin && accountId.indexOf('OWVE') == -1) {
						var reauthMainText = Granite.I18n.get('avios.account.reauthReqMsg');
						var reauthAnchorText  = Granite.I18n.get('avios.account.reauthReqClickHere');
						var reauthText = reauthMainText+'<a href="javascript:void(0);" class="avios-dashboard-reauth-btn">'+reauthAnchorText+'</a>';
						$('#avios-dashboard-card').find('.avios-content').removeClass('hide').empty().html('<p>'+reauthText+'</p>');
						$('.Qpoints-Qmiles #others-flyout-details').append('<p class="reauth-message">'+reauthText+'</p>');
						if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
                            $('.Qpoints-Qmiles #others-flyout-details').find('.avios-dashboard-reauth-btn').attr('style','color: #5c0931 !important;font-size: 15px !important;');
                        }
					}
				} else if( linkedAccountsBalances.length === 0 ) {
					$('#avios-dashboard-card').find('.avios-content').addClass('hide');
				}
			}
		}
	});
	
	
}


$(document).ready(function() {
    if( $('#avios-dashboard-card').length > 0 && !isFetchSVBServiceCalled ) {
		fetchsvbServiceCall();
    }
	$(document).on('click', '.loggedinprofile', function(){
		console.log("dasdsad");
		if( !isFetchSVBServiceCalled ) {
			fetchsvbServiceCall();
		}
	});
	$(document).on('click','.avios-dashboard-reauth-btn', function() {
		svbReauthenticationCall();
	});

    var swiftOnboardingRequired = getUserBasicInfoField("swiftOnboardingRequired");
    var swiftViewCount = getUserBasicInfoField("viewCount");
	var visitedavios = getUserBasicInfoField("dashboardvisitedavios");
	if( $('#avios-modal-curency').length == 0 && swiftOnboardingRequired && swiftViewCount < 2 && $('#onboardpopupfragPath').val() != undefined && $('#onboardpopupfragPath').val() !== '' && $('#onboardpopupfragPath').val() != null ) {
		$.ajax({
			type:'GET',
			url:$('#onboardpopupfragPath').val()+'.onboardpopup.html',
			dataType: 'html',
			success: function(response) {

				$('body').append(response);
				setTimeout(function() {
					var ffpNumberOnboard = getUserBasicInfoField('ffpNumber');
					var swiftconfigurationOnboard = $('#swiftconfigurationOnboard').val();
					if( swiftconfigurationOnboard !== '' && swiftconfigurationOnboard != undefined && swiftconfigurationOnboard != null && swiftconfigurationOnboard.indexOf(ffpNumberOnboard) === -1 ) {
						return false;
					} else {
						updateUserBasicInfoField('dashboardvisitedavios', 'false');
						$('#avios-modal-curency').modal();	
					}
				},400);

			}

		});
	}
});
var downloadTimer;
function showOtpTimer(timerElem, buttonElem) {
	$(buttonElem).addClass('hide');
	$(timerElem).parent('.otp-timer-wrapper').removeClass('hide');
	var otpTimerDelay = $('#otpTimerDelay').val();
	if(otpTimerDelay !== undefined && otpTimerDelay !== ''){
		otpTimerDelay = parseInt(otpTimerDelay);
	} else {
		otpTimerDelay = 60;
	}
	var initialTime = otpTimerDelay;
    if( typeof downloadTimer ==  'object' ) {
		clearInterval(downloadTimer);
    }
    $(timerElem).text(initialTime);
	downloadTimer = setInterval(function(){
		otpTimerDelay--;
		$(timerElem).text(otpTimerDelay);
		if(otpTimerDelay <= 0) {
			clearInterval(downloadTimer);
            downloadTimer = undefined;
			$(buttonElem).removeClass('hide');
			$(timerElem).parent('.otp-timer-wrapper').addClass('hide');
			$(timerElem).text(initialTime);
		}
	},1000);
}
$(document).ready(function(e){

    $(window).on('load resize',function(){
			if(document.getElementById("openApp") != null){
				if($(window).width() < 768 && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && !isCookiePresent("appStoreCookie") ){
						if(navigator.getInstalledRelatedApps) {
							navigator.getInstalledRelatedApps()
				.then(function(relatedApps) { 
                    	var isAppAvail = false;
					if (relatedApps.length > 0) {

						relatedApps.forEach(function(app) {
							if (app.id == "com.m.qr")
								isAppAvail = true;
						});
						showAppAlert(isAppAvail);

					}else {
                        showAppAlert(false);

					}
				});
					}else {
                        showAppAlert(false);

					}
				}

			}

	});
	
	/*FIx for language selector Drop down position */
    $(document).on('click tap touchstart','.j-lang-opener',function(evt) {
        if($(window).width() <= 480){
        	//old language selector
			if($(".header-top-row").is(':visible')){
				if( $("#closeAppStore").length > 0 || $("#matabarCookie").length > 0){

						if( $("#closeAppStore").is(':visible') && $("#matabarCookie").is(':visible')){
							$(".language-drop").css("top","116px");
							return 0;
						}   
						if( $("#closeAppStore").is(':visible') ){
							$(".language-drop").css("top","117px");
							return 0;
						}
		
						if($("#matabarCookie").is(':visible')){
						$(".language-drop").css("top","49px");
							return 0;
						}
						
						if( $("#closeAppStore").is(':hidden') && $("#matabarCookie").is(':hidden')){
							$(".language-drop").css("top","48px");
							return 0;
						}
					}
			}
		}
	});	
 });
 
  function redirectOnClickView(){
        var url = 'https://play.google.com/store/apps/details?id=com.m.qr';
       if(!/Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)){
           url='https://itunes.apple.com/in/app/qatar-airways/id581264644?mt=8';
        }
		//HUAWEI device code
		if((navigator.userAgent.indexOf("L09") > -1  || navigator.userAgent.indexOf("L29") > -1 || navigator.userAgent.toLowerCase().indexOf("huawei") > -1) && navigator.userAgent.indexOf('AppleWebKit') > -1)
        {
             url='https://appgallery.huawei.com/#/app/C104037677';
        }
        window.location.assign(url)
	 }
 
 function isCookiePresent(c_name) {
          var cookies_collection = document.cookie;
          if(cookies_collection.indexOf(c_name)!= -1){
          return true;
            }
         return false;
	 }

 function appCloseCookie() {
	  document.cookie = "appStoreCookie= true; path=/;expires="+getCookieExpire(50);
     document.getElementById("openApp").style.display ="none"; 
	}


  function showAppAlert(isAppAvail) {
	 if(!isAppAvail){
				document.getElementById("openApp").style.display = "block";
			}else{
				document.getElementById("openApp").style.display ="none"; 
			}
 }
 

var loginToken;

/** method to send login-token to app **/
function setLoginTokenApp(){
	$.ajax({
		url: "/qr/qrweb/accesslogintoken",
		type: 'GET',
		async:true,
		cache: false,
		success: function(data, textStatus, errorThrown) {
			//console.log('data '+data);
			loginToken = data;
			if( mobilePlatform == window.ANDROID_PLATFORM ){ 
				JSInterface.setLoginToken(loginToken);
			}
			if( mobilePlatform == window.IOS_PLATFORM ){
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here */
					bridge.callHandler('setLoginToken', loginToken, function() {
						//console.log('Registered Handler for set token');
					});
				});
			}
		}
	});

};

function socialLoginFailedCallback() {
	$('body').css({'display':'block'})
};
/** method to login once Data is received from APP **/
function mobileAppLogin(data, loginType){
	var loginJSON = JSON.parse(data);
	var localeErrorCode = $("#signOnLanguage").val() != undefined ? $("#signOnLanguage").val() : 'en';
	
	$('[name="j_socilMediaUniqId"]').val(loginJSON.socialMediaUniqueId);
	$('[name="j_socialMediaEmail"]').val(loginJSON.socialmediaEmailId);
	$('[name="j_socialMediaAccessToken"]').val(loginJSON.accessToken);
    $('[name="j_socialMediaAccessTokenSecret"]').val(loginJSON.accessTokenSecret); 
	$('[name="j_submitType"]').val(loginType);
	$('#platform,#j_platform').val(mobilePlatform);
	$.ajax({
		url: "/qr/j_security_check_qr_portal",
		type: 'POST',
		data: $("#j-login-form").serialize(),
		cache: false,
		success: function(request, data, textStatus, errorThrown) {  
				if( isMobileApp() ) {
					setLoginTokenApp();
				}
						var loginRequestCookie = $.parseJSON(loginRequest);
						//$('#j-login-form').addClass('hide');
						$('#j-login-form').addClass('visibilityHidden');
						$('.qbiz-login-section').addClass('visibilityHidden');
						//$('.is-not-logged').css("display", "none");//To hide Login menu
						$('.is-logged').css("display", "block");
						$('.create-profile-popup').hide();
						$('#social-login-block').addClass('hide');
						$('#div_guestuserlogin').addClass("hide");
						var userType = getUserBasicInfoField('programCode');
						var portalDashboardURL = $('#portalDashboardPage').val();//For login page
						/*setTimeout(function() {
						   hideSpinnerMobileApp($('#global-spinner-container.spinner-overlay'),'spinner-full-page');
						}, 500);*/
						if('QRPC' == userType){
							if( null !== loginRequest && '' !== loginRequest && typeof loginRequest !== 'undefined' ){
								if(loginRequestCookie[0].activityCode == "SEARCH_BKG"){
									verifyOTP();
								}else if(loginRequestCookie[0].activityCode == "RDM_BKG" || loginRequestCookie[0].activityCode == "EXB_LOGIN" || loginRequestCookie[0].activityCode === "ENROLL_LOGIN"){
									verifyOTP();
								}else if(loginRequestCookie[0].activityCode == "RVE_BKG"){
									redirectUser();
								}else if(loginRequestCookie[0].activityCode == "TICKET_CONFIRM"){
									verifyOTP();
								}
							}else{
								verifyOTP();
							}
						}else if('PORTAL' == userType){
							redirectUser();
						}
			
		},
		error: function(request, xhr, textStatus, errorThrown) {
			$('body').css({'display':'block'});
			//$("#j-login-form").removeClass('spinner-active');
			 //console.log('error name ' + request.getResponseHeader('j_reason'));
			 var isResetPassword = getActualCookieValue("resetPassword");
			 if(null != request.getResponseHeader('j_reason')){
				var errorRsp =  request.getResponseHeader('j_reason');
				var data = JSON.parse(errorRsp);
				//console.log(data);
				var errorPath = "/content/Qatar/i18n/login.errorMessages.json";
				//console.log('errorPath ' + errorPath);
					window.qrServiceRef.zone.run(function () {
						 window.qrServiceRef.translateErrorObject(data, errorPath).then(function(data){ 
							 //console.log("Error " + data[0].errorDescription);
							 $('#loginErrorBlock #errorId').html(data[0].errorDescription);
							$('#loginErrorBlock .input-base-msg-box').show();
						 });
					 });
				
				//alert(errorValue);
				//$('#errorId').text(errorValue);
			 }else if(typeof isResetPassword != 'undefined' && isResetPassword){
				 $('.create-profile-popup').hide();
					var isResetPasswordRequired = getActualCookieValue('resetPassword');
					//console.log("isResetPasswordRequired::" + isResetPasswordRequired);
					//Comment the below line when "Forgot Password" service's new password is receieved by the user.
					//isResetPasswordRequired = true;								
					if(isResetPasswordRequired){
						//$('#j-login-form').addClass('hide');
						$('#j-login-form').addClass('visibilityHidden');
						$('.qbiz-login-section').addClass('visibilityHidden');
						$('#social-login-block').addClass('hide');
						//$('#social-login-block').hide();
						//$('.is-not-logged').css("display", "none");//To hide Login menu
						$('.is-logged').css("display", "block");
						$('#reset-password').removeClass('hide');
						$('#reset-password').show();//For new markup
					} 
			 }else{	
				 $('#loginErrorBlock .input-base-msg-box').hide();
				//console.log('No Error from Service ');
			 }
			 setTimeout(function() {
				 hideSpinnerMobileApp($('#global-spinner-container.spinner-overlay'),'spinner-full-page');
			  }, 500);
		}
	});
};


/** Method for enrollment using social media in Mobile App **/
function mobileAppEnrollment(enrollType, response){
	$('#j_platform').val(mobilePlatform);
	$('#platform,#j_platform').val(mobilePlatform);
	if( enrollType === 'FACEBOOK' ){
		//console.log("Response from Facebook " + JSON.stringify(response));
		var $joinForm = $("#join-form");
		$("#existingEnrollCheck", $joinForm).hide();
		$('#socialMediaType', $joinForm).val("FACEBOOK");
		$('#socialMediaId', $joinForm).val(response.socialMediaUniqueId);
		$('#socialMediaAccessToken', $joinForm).val(response.accessToken);
		$('#socialMediaEmail', $joinForm).val(response.email);
		$('input[name="customerProfileId"]', $joinForm).val("");
		$('#checkbox-slide', $joinForm).prop('checked', false);
		if (response.firstname != null) {
			$('#f102', $joinForm).val(response.firstname).parent(".input-base").addClass("filled");
			$('#f102', $joinForm).trigger('change');
		}
		if (response.lastname != null) {
			$('#f104', $joinForm).val(response.lastname).parent(".input-base").addClass("filled");
			$('#f104', $joinForm).trigger('change');
		}
		if (response.email != null) {
			$('#f105', $joinForm).val(response.email).parent(".input-base").addClass("filled");
		}
		if (response.gender == 'M') {
			$('#f10', $joinForm).prop('checked', true);
			$('#f240').parent().find('.custom-select-list li').each(function() {
				var value = $(this).find('span').attr('data-value');
				//console.log('value:' + value);	
				var text = $(this).text();
				//console.log('text:' + text);
				var control = $(this).attr('data-control');
				if('MR' === value){		
					$('#f240').parent().find('.custom-select-opener').text(text);
					$('#f240').parent().find('.input-base-placeholder').addClass('visible');
					$(this).find('span').addClass('selected');
					$('#f240').val(value);
					return false;
				}
			});
		}
		if (response.gender == 'F') {
			$('#f11', $joinForm).prop('checked', true);
			$('#f240').parent().find('.custom-select-list li').each(function() {
				var value = $(this).find('span').attr('data-value');
				//console.log('value:' + value);	
				var text = $(this).text();
				//console.log('text:' + text);
				var control = $(this).attr('data-control');
				if('MS' === value){		
					$('#f240').parent().find('.custom-select-opener').text(text);
					$('#f240').parent().find('.input-base-placeholder').addClass('visible');
					$(this).find('span').addClass('selected');
					$('#f240').val(value);
					return false;
				}
			});
		}
		
		if( response.birthday != undefined && response.birthday != null ){
			var myDate = new Date(Date.parse(response.birthday));
			//var formattedDateString = myDate.getDate() + '/' + (myDate.getMonth() + 1) + '/' + myDate.getFullYear();
			//var fromattedDate = getDateDisplayFormat(formattedDateString);
			//$("#f109").val(formattedDateString).parents('.input-base').addClass('filled');
			//var myDate = response.birthday;
			if( myDate !== undefined && myDate != '' && myDate != null ) {
				var chunks;
				if( myDate.indexOf('\/') != -1 ) {
					chunks = myDate.split('\/');
				} else {
					chunks = myDate.split('/');
				}
				if( chunks[1] != '' && chunks[0] != '' && chunks[2] != '' ) {
					if( isNaN(chunks[1]) && isNaN(chunks[0]) && isNaN(chunks[2]) ) {
						formattedDateString = chunks[1] + '/' + chunks[0] + '/' + chunks[2];
						var fromattedDate = getDateDisplayFormat(formattedDateString);
						$("#f109").val(fromattedDate).parents('.input-base').addClass('filled');
					}
				}
			} 
		}
		$("#f106", $joinForm).attr("required", false);
		$("#f107", $joinForm).attr("required", false);
		$('#f106').prop("readOnly",true);
		$('#f107').prop("readOnly",true);
		$('#f106', $joinForm).parent(".input-base").addClass("disabled");
		$('#f107', $joinForm).parent(".input-base").addClass("disabled");
		$("#f14").attr("disabled", true);
		$("#f15").attr("disabled", true);
		
		/*if($('#f108').val() === '') {
			$('#f108').parent().addClass('error');
		}
		
		if($('#f241').val() === '') {
			$('#f241').parent().addClass('error');
		}
		if($('#f110').val() === '') {
			$('#f110').parent().addClass('error');
		}
		if(!$('#f1211').prop('checked')){
			$('#f1211').parent().addClass('error');
		}*/
	}
	/** if enrollment type is GOOGLE **/
	if( enrollType === 'GOOGLE' ){
		var $joinForm = $("#join-form");
		$("#existingEnrollCheck", $joinForm).hide();
		$('#socialMediaType', $joinForm).val("GOOGLE");
		$('#socialMediaId', $joinForm).val(response.socialMediaUniqueId);
		$('#socialMediaEmail', $joinForm).val(response.socialmediaEmailId);
		$('#socialMediaAccessToken', $joinForm).val(response.accessToken);
		$('input[name="customerProfileId"]', $joinForm).val("");
		$('#checkbox-slide', $joinForm).prop('checked', false);
		if (response.email != null) {
			$('#f105', $joinForm).val(response.email).parent(".input-base").addClass("filled");
		}
		if (response.firstname != null) {
			$('#f102', $joinForm).val(response.firstname).parent(".input-base").addClass("filled");
			$('#f102', $joinForm).trigger('change');
		}
		if (response.lastname != null) {
			$('#f104', $joinForm).val(response.lastname).parent(".input-base").addClass("filled");
			$('#f104', $joinForm).trigger('change');
		}

		$("#f106", $joinForm).attr("required", false);
		$("#f107", $joinForm).attr("required", false);
		$('#f106', $joinForm).parent(".input-base").addClass("disabled");
		$('#f107', $joinForm).parent(".input-base").addClass("disabled");
		$('#f106').prop("readOnly",true);
		$('#f107').prop("readOnly",true);
		$("#f14").attr("disabled", true);
		$("#f15").attr("disabled", true);
	}
	/** if enrollment type is TWITTER */
	if( enrollType === 'TWITTER' ){
		var $joinForm = $("#join-form");
		var twitterId = response.socialMediaUniqueId;
		var twitterScreenName = response.firstname;
		if(typeof twitterId != 'undefined' && twitterId && typeof twitterScreenName != 'undefined' && twitterScreenName){
			$('#socialMediaId', $joinForm).val(twitterId);
			$('#socialMediaEmail', $joinForm).val(twitterScreenName);
			$('#socialMediaAccessToken', $joinForm).val(response.accessToken);
            $('#socialMediaAccessTokenSecret', $joinForm).val(response.accessTokenSecret);
			$('#j_socialMediaAccessTokenSecret').val(response.accessTokenSecret);	
			$('#platform,#j_platform').val(mobilePlatform);
			if (twitterScreenName != undefined) {
				$('#f102', $joinForm).val(twitterScreenName).parent(".input-base").addClass("filled");
				$('#f102', $joinForm).trigger('change');
				$("#f106", $joinForm).attr("required", false);
				$("#f107", $joinForm).attr("required", false);
				$('#f106', $joinForm).parent(".input-base").addClass("disabled");
				$('#f107', $joinForm).parent(".input-base").addClass("disabled");
				$('#f106').prop("readOnly",true);
				$('#f107').prop("readOnly",true);
				$("#f14").attr("disabled", true);
				$("#f15").attr("disabled", true);
			}
			$('#socialMediaType', $joinForm).val("TWITTER");
		}
	}
};
/** Android Login and enrollment callback methods **/
function fbRedirectLoginCallback(responseData){
	//console.log('response from android '+responseData);
	mobileAppLogin(responseData,"FACEBOOK");
};

function fbRedirectEnrollCallback(responseData){
	//console.log('response from android '+responseData);
	mobileAppEnrollment('FACEBOOK',JSON.parse(responseData));
};

function googleRedirectLoginCallback(responseData){
	//console.log('response from android '+responseData);
	mobileAppLogin(responseData,"GOOGLE");
};

function googleRedirectEnrollCallback(responseData){
	//console.log('response from android '+responseData);
	mobileAppEnrollment('GOOGLE',JSON.parse(responseData));
};

function twitterRedirectLoginCallback(responseData){
	//console.log('response from android '+responseData);
	mobileAppLogin(responseData,"TWITTER");
};

function twitterRedirectEnrollCallback(responseData){
	//console.log('response from android '+responseData);
	mobileAppEnrollment('TWITTER',JSON.parse(responseData));
};

function facebookDBLinkCallBack(responseData){
	//console.log('response from android '+responseData);
	var profileData = JSON.parse(responseData);
	var emailId = profileData.socialmediaEmailId !== undefined ? profileData.socialmediaEmailId : '';
	manageSocialMedia("LINK", "FACEBOOK", profileData.socialMediaUniqueId, emailId, profileData.accessToken);
};

function googleDBLinkCallBack(responseData){
	//console.log('response from android '+responseData);
	var profileData = JSON.parse(responseData);
	var emailId = profileData.socialmediaEmailId !== undefined ? profileData.socialmediaEmailId : '';
	manageSocialMedia("LINK", "GOOGLE", profileData.socialMediaUniqueId, emailId, profileData.accessToken);
};

function twitterDBLinkCallBack(responseData){
	//console.log('response from android '+responseData);
	var profileData = JSON.parse(responseData);
	var emailId = profileData.socialmediaEmailId !== undefined ? profileData.socialmediaEmailId : '';
	manageSocialMedia("LINK", "TWITTER", profileData.socialMediaUniqueId, emailId, profileData.accessToken);
};
function redirectPageCallBack(){
	var url = document.referrer != '' ? document.referrer : null;
	if( mobilePlatform == window.ANDROID_PLATFORM ){ 
		JSInterface.redirectPage(url);
	}
}

function addToAppleWallet(){
	//$('.j-C32-overlay').find('.j-C32-print').parent().addClass('hide');
	
    $('#family-membership-cards-parent-div').css({'margin-top': '60px'});
    $('#family-membership-cards-parent-div #family-membership-cards .col-md-4').css({'margin-bottom': '60px'});
	$('.j-C32-overlay').find('.j-C32-apple-wallet').parent().removeClass('hide');
	$('.j-C32-overlay').find('.j-C32-apple-wallet').parent().css({'display':'block'});
	$('#family-membership-cards-parent-div .C32-membership-card .j-C32-apple-wallet-el').css({'display':'block'});
	$('#family-membership-cards-parent-div .C32-membership-card-toolbar.family-member-toolbar').css({'bottom': '-52px'});
	//$('#family-membership-cards-parent-div .C32-membership-card-toolbar.family-member-toolbar ul').css({'margin-bottom': '-20px'});
	$('#family-membership-cards-parent-div .C32-membership-card-toolbar.family-member-toolbar .j-C32-apple-wallet-el').attr('style','left: -50% !important; top: 44px !important;');
	if( $('#family-membership-cards').children().length == 0 ) {
		$('.C32-membership-card.main-member-card').parent().attr('style','margin-bottom: 46px;');
		$('.C32-membership-card.main-member-card').find('.C32-membership-card-toolbar li.j-C32-apple-wallet-el').attr('style','left: 152% !important;');
	}
	$('.j-C32-overlay').find('.j-C32-apple-wallet').parent().on('click', function(){
		var appWalletElement = $(this);
		if( $(appWalletElement).attr('data-applepass') != undefined && $(appWalletElement).attr('data-applepass') != null && $(appWalletElement).attr('data-applepass') != '' ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('addToAppleWallet', $(appWalletElement).attr('data-applepass'),function() {
					//console.log('Called add to apple Wallet : '+JSON.stringify(responseData));
				});
			});
		}
	});
};

/** Social Media Control Methods **/
function FBRedirectionMobileApp(code){
	if( code === 'LOGIN' ) {
		showSpinnerMobileApp($('#global-spinner-container.spinner-overlay'),'spinner-full-page');
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.fbRedirectLogin();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('fbRedirectLogin', function() {
					//console.log('Recevied data for fb LOGIN : '+JSON.stringify(responseData));
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('fbRedirectLoginCallback', function(responseData) {
					//console.log('Recevied data for fb login : '+JSON.stringify(responseData));
					mobileAppLogin(responseData,"FACEBOOK");
				});
			});
		}
	} else if( code === 'ENROLL' ) {
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.fbRedirectEnroll();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('fbRedirectEnroll', function() {
					//console.log('Registered Handler for FB Enroll redirection');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('fbRedirectEnrollCallback', function(responseData) {
					//console.log('Recevied data for fb enroll : '+JSON.stringify(responseData));
					mobileAppEnrollment('FACEBOOK',JSON.parse(responseData));
				});
			});
		}
	}
};

function googleRedirectionMobileApp(code){
	if( code === 'LOGIN' ) {
		showSpinnerMobileApp($('#global-spinner-container.spinner-overlay'),'spinner-full-page');
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.googleRedirectLogin();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('googleRedirectLogin', function() {
					//console.log('Registered Handler for Google redirection');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('googleRedirectLoginCallback', function(responseData) {
					//console.log('Recevied data for google login : '+JSON.stringify(responseData));
					mobileAppLogin(responseData,"GOOGLE");
				
				});
			});
		}
	} else if( code === 'ENROLL' ) {
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.googleRedirectEnroll();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('googleRedirectEnroll', function() {
					//console.log('Registered Handler for fb redirection');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('googleRedirectEnrollCallback', function(responseData) {
					//console.log('Recevied data for google enroll : '+JSON.stringify(responseData));
					mobileAppEnrollment('GOOGLE',JSON.parse(responseData));
				});
			});
		}

	}
};

function twitterRedirectionMobileApp(code){
	if( code === 'LOGIN' ) {
		showSpinnerMobileApp($('#global-spinner-container.spinner-overlay'),'spinner-full-page');
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.twitterRedirectLogin();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('twitterRedirectLogin', function() {
					//console.log('Registered Handler for twitter redirection');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('twitterRedirectLoginCallback', function(responseData) {
					//console.log('Recevied data for twitter login : '+JSON.stringify(responseData));
					mobileAppLogin(responseData,"TWITTER");
				});
			});
		}
	} else if( code === 'ENROLL' ) {
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.twitterRedirectEnroll();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('twitterRedirectEnroll', function() {
					//console.log('Registered Handler for fb redirection');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('twitterRedirectEnrollCallback', function(responseData) {
					//console.log('Recevied data for twitter enroll : '+JSON.stringify(responseData));
					mobileAppEnrollment('TWITTER',JSON.parse(responseData));
				});
			});
		}

	}
};

/** method to show spinner for mobile app Integration **/
function showSpinnerMobileApp($spinner, spinnerClass){
	if(  $('#isPublish').val() == 'true' ) {
		if( isMobileApp() && $spinner != null && $spinner != undefined ){
			if( $spinner.attr('id') === 'global-spinner-container' ){
				if( mobilePlatform == window.ANDROID_PLATFORM && typeof JSInterface != "undefined"){
					JSInterface.showSpinner();
				}
				if( mobilePlatform == window.IOS_PLATFORM ){
					setupWebViewJavascriptBridge(function(bridge) {
						/* Initialize your app here */
						bridge.callHandler('showSpinner', function() {
							//console.log('calling show spinner of IOS');
						});
					});
				}
			} else {
				$spinner.addClass('spinner-active');
			}
		} else if( $spinner != undefined ) {
			if( $spinner.attr('id') === 'global-spinner-container' || $spinner.attr('id') === 'otp-screen-spinner-container' || $spinner.attr('id') === 'otp-preferences-spinner-container' ){
				if( ($spinner.attr('id') === 'otp-screen-spinner-container') && $(window).width() >= 800 ){
					$spinner.find('.spinner').css({'left': '25%','top':'-21%'});
				} else if( $spinner.attr('id') === 'otp-screen-spinner-container'){
					$spinner.find('.spinner').css({'left': '0%','top':'2%'});
				}
				$spinner.addClass('spinner-full-page');
				$spinner.find('.spinner').html($(".global-loader").html());
			} else if( $spinner.attr('id') == 'forgot-password-spinner-container') {
				$spinner.addClass('spinner-active');
			} else {
				$spinner.addClass(spinnerClass);
			}
		}
		if( $spinner == null && ( $('.spinner-active').length || $('.spinner-full-page').length || $('#global-spinner-container').length ) ){
			$('.spinner-active').removeClass('spinner-active');
			$('.spinner-full-page').removeClass('spinner-full-page');
			$('#global-spinner-container').removeClass('spinner-full-page');
		}
	}
};

/** method to hide spinner for mobile app Integration **/
function hideSpinnerMobileApp($spinner, spinnerClass){
	if(  $('#isPublish').val() == 'true' ) {
		if( isMobileApp() && $spinner != null && $spinner != undefined ){
			if( $spinner.attr('id') === 'global-spinner-container' ){
				if( mobilePlatform == window.ANDROID_PLATFORM && typeof JSInterface != "undefined"){
					JSInterface.closeSpinner();
				}
				if( mobilePlatform == window.IOS_PLATFORM ){
					setupWebViewJavascriptBridge(function(bridge) {
						/* Initialize your app here */
						bridge.callHandler('closeSpinner', function() {
							//console.log('calling show spinner of IOS');
						});
					});
				}
			} else {
				$spinner.removeClass('spinner-active');
			}

		} else if( $spinner != undefined ) {
			if( $spinner.attr('id') === 'global-spinner-container'  || $spinner.attr('id') === 'otp-screen-spinner-container' || $spinner.attr('id') === 'otp-preferences-spinner-container' ){
				$spinner.find('.spinner').html("");
				$spinner.removeClass('spinner-full-page');
			} else if( $spinner.attr('id') == 'forgot-password-spinner-container') {
				$spinner.removeClass('spinner-active');
			} else {
				$spinner.removeClass(spinnerClass);
			}
		}
		if( $spinner == null && ( $('.spinner-active').length || $('.spinner-full-page').length || $('#global-spinner-container').length ) ){
			$('.spinner-active').removeClass('spinner-active');
			$('.spinner-full-page').removeClass('spinner-full-page');
			$('#global-spinner-container').removeClass('spinner-full-page');
		}
	}
};

/** method for login page back button click **/
function loginHeaderBackClick(){
    if( mobilePlatform == window.ANDROID_PLATFORM ){ 
        JSInterface.loginHeaderBackClick();
    }
    if( mobilePlatform == window.IOS_PLATFORM ){
        setupWebViewJavascriptBridge(function(bridge) {
            /* Initialize your app here */
            bridge.callHandler('loginHeaderBackClick', function() {
                //console.log('Registered Handler for loginHeaderBackClick');
            });
        });
    }
};

function memberShipCardsDownload(){
	if( mobilePlatform == window.ANDROID_PLATFORM ){ 
		JSInterface.memberShipCardsDownload();
	}
	if( mobilePlatform == window.IOS_PLATFORM ){
		setupWebViewJavascriptBridge(function(bridge) {
			/* Initialize your app here */
			bridge.callHandler('memberShipCardsDownload', function() {
				//console.log('Registered Handler for qCalculatorSearchFight');
			});
		});
	}
};


/** Code for Mobile App Native integration - Earn Qcalculator **/
function qCalculatorSearchFight(){
	var origin = $('#qcalculator-from').val(),
		destination = $('#qcalculator-to').val();
	origin = origin.substring(origin.indexOf('(') + 1,origin.length - 1);
	destination = destination.substring(destination.indexOf('(') + 1,destination.length - 1);
	var currentDate = new Date();
	var fromDate = currentDate.getFullYear() + "-" + (currentDate.getMonth() + 1) + "-" + currentDate.getDate();
	var overDate =  new Date(new Date().getTime()+(5*24*60*60*1000));;
	var toDate = overDate.getFullYear() + "-" + (overDate.getMonth() + 1) + "-" + overDate.getDate();
	var data = {
		"fromStation" : origin,
		"toStation" : destination,
		"tripType" : $('#earnRoundCheck #radio-pressed').is(':checked') ? "RETURN" : "ONEWAY",
		"cabinClass" : $('#qCalculatorClass').val(),
		"membership" : $('#membership').val(),
		"departureDate" : fromDate,
		"returnDate" : toDate,
		"adultCount" : "1",
		"childCount" : "0",
		"infantCount" : "0"
	};
	if( mobilePlatform == window.ANDROID_PLATFORM ){ 
		JSInterface.qCalculatorSearchFight(JSON.stringify(data));
	}
	if( mobilePlatform == window.IOS_PLATFORM ){
		setupWebViewJavascriptBridge(function(bridge) {
			/* Initialize your app here */
			bridge.callHandler('qCalculatorSearchFight', data, function() {
				//console.log('Registered Handler for qCalculatorSearchFight');
			});
		});
	}
}


/** Code for Mobile App Native integration - Excess Baggage Qcalculator **/
function qCalculatorExcessBaggage(){
	if( mobilePlatform == window.ANDROID_PLATFORM ){ 
		JSInterface.qCalculatorExcessBaggage();
	}
	if( mobilePlatform == window.IOS_PLATFORM ){
		setupWebViewJavascriptBridge(function(bridge) {
			/* Initialize your app here */
			bridge.callHandler('qCalculatorExcessBaggage', function() {
				//console.log('Registered Handler for qCalculatorExcessBaggage');
			});
		});
	}
}


/** Code for Mobile App Native integration - Upgrade Qcalculator **/
function qCalculatorUpgrade(){
	if( mobilePlatform == window.ANDROID_PLATFORM ){ 
		JSInterface.qCalculatorUpgrade();
	}
	if( mobilePlatform == window.IOS_PLATFORM ){
		setupWebViewJavascriptBridge(function(bridge) {
			/* Initialize your app here */
			bridge.callHandler('qCalculatorUpgrade', function() {
				//console.log('Registered Handler for qCalculatorUpgrade');
			});
		});
	}
}

function setTokenToApp() {
    var mobileSessionToken = getFFPCookieValue('QRTOKEN');
	if( mobilePlatform == window.ANDROID_PLATFORM ){ 
        //console.log('android setToken called');		
        JSInterface.setToken(mobileSessionToken);
	}
    if( mobilePlatform == window.IOS_PLATFORM ){
        setupWebViewJavascriptBridge(function(bridge) {
            /* Initialize your app here */
            bridge.callHandler('setToken', mobileSessionToken, function() {
                //console.log('Registered Handler for set token');
            });
        });
	}
};

function findthePageTitle(){
    var title = document.getElementsByTagName("title")[0];
    //console.log('page title '+$(title).text());
    if( mobilePlatform == window.ANDROID_PLATFORM ){ 
        JSInterface.setPageTitle($(title).text());
    }
    if( mobilePlatform == window.IOS_PLATFORM ){
        setupWebViewJavascriptBridge(function(bridge) {
            /* Initialize your app here */
            bridge.callHandler('setPageTitle', $(title).text(), function() {
                //console.log('Registered Handler for set page title');
            });
        });
    }
};

function enrollmentMobileApp(){
	$('#join-form #socialJoinMobileApp').attr('style','display: block;');
	$('#join-form #socialJoin').remove();
	/*if( mobileAppPlatform() == 'ANDROID' ){
		//console.log('android : '+window.ANDROID_PLATFORM);
		$('#socialJoinMobileApp').css({'display':'none'});
		$('#socialJoin').css({'display':'block'});
	}*/
	/** Registering events for Mobile App Social Icons Clicks **/
	$('#facebookMobileApp').on('click', function(){
		FBRedirectionMobileApp('ENROLL');
	});
	$('#twitterMobileApp').on('click', function(){
		twitterRedirectionMobileApp('ENROLL');
	});
	$('#googlePlusMobileApp').on('click', function(){
		googleRedirectionMobileApp('ENROLL');
	});
};

function loginMobileApp(){
	$('#social-login-mobileapp').css({'display':'block'});
	$('#social-login-desktop').css({'display':'none'});
	/*if( mobileAppPlatform() == 'ANDROID' ){
		//console.log('android : '+window.ANDROID_PLATFORM);
		$('#social-login-mobileapp').css({'display':'none'});
		$('#social-login-desktop').css({'display':'block'});
	}*/
	/** Registering events for Mobile App Social Icons Clicks **/
	$('#facebookLoginMobileApp').on('click', function(){
		$('body').css({'display':'none'});
		FBRedirectionMobileApp('LOGIN');
	});
	$('#twitterLoginMobileApp').on('click', function(){
		$('body').css({'display':'none'});
		twitterRedirectionMobileApp('LOGIN');
	});
	$('#googlePlusLoginMobileApp').on('click', function(){
		$('body').css({'display':'none'});
		googleRedirectionMobileApp('LOGIN');
	});

	$('#social-login-block .remember-me').css({'display':'none'});
};

/**Method for social media linking/delinking - mobile app **/
function socialMediaLinkDelinkMobile(category){
	if( category === 'FACEBOOK' ){
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.facebookDBLinking();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('facebookDBLinking', function() {
					//console.log('Registered Handler for fb link in dashboard');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('facebookDBLinkCallBack', function(responseData) {
					//console.log('Recevied data for fb social linking : '+JSON.stringify(responseData));
					var profileData = JSON.parse(responseData);
					var emailId = profileData.socialmediaEmailId !== undefined ? profileData.socialmediaEmailId : '';
					manageSocialMedia("LINK", "FACEBOOK", profileData.socialMediaUniqueId, emailId, profileData.accessToken);
				});
			});
		}
	}
	if( category === 'GOOGLE' ){
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.googleDBLinking();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('googleDBLinking', function() {
					//console.log('Registered Handler for google link in dashboard');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('googleDBLinkCallBack', function(responseData) {
					//console.log('Recevied data for google social linking : '+JSON.stringify(responseData));
					var profileData = JSON.parse(responseData);
					var emailId = profileData.socialmediaEmailId !== undefined ? profileData.socialmediaEmailId : '';
					manageSocialMedia("LINK", "GOOGLE", profileData.socialMediaUniqueId, emailId, profileData.accessToken);
				});
			});
		}
	}
	if( category === 'TWITTER' ){
		if( mobilePlatform == window.ANDROID_PLATFORM ){
			JSInterface.twitterDBLinking();
		}
		if( mobilePlatform == window.IOS_PLATFORM ){
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.callHandler('twitterDBLinking', function() {
					//console.log('Registered Handler for twitter link');
				});
			});
			/** Register handler to get json object **/
			setupWebViewJavascriptBridge(function(bridge) {
				/* Initialize your app here */
				bridge.registerHandler('twitterDBLinkCallBack', function(responseData) {
					//console.log('Recevied data for twitter social linking : '+JSON.stringify(responseData));
					var profileData = JSON.parse(responseData);
					var emailId = profileData.socialmediaEmailId !== undefined ? profileData.socialmediaEmailId : '';
					$('#twitterAccessTokenSecret').val(profileData.accessTokenSecret);
					manageSocialMedia("LINK", "TWITTER", profileData.socialMediaUniqueId, emailId, profileData.accessToken);
				});
			});
		}
	}
}
/** social media linking for mobile app **/
function mobileSocialMediaLink(){
	if( $('#dashboard-layover #mobileDBIcons').length ) {
		$('#dashboard-layover #mobileDBIcons').attr('style','display :block !important');
		$('#dashboard-layover #desktopDBIcons').attr('style','display:none !important');
		
		/** Handling the click operations **/
		$(document).on('click' , '#mobileDBIcons #FACEBOOKMOBILE' , function(){
			socialMediaLinkDelinkMobile('FACEBOOK');
			return false;
		});
		
		$(document).on('click' , '#mobileDBIcons #TWITTERMOBILE' , function(){
			socialMediaLinkDelinkMobile('TWITTER');
			return false;
		});
		
		$(document).on('click' , '#mobileDBIcons #GOOGLEMOBILE' , function(){
			socialMediaLinkDelinkMobile('GOOGLE');
			return false;
		});
	}
};

function enableUpcomingTripsEvents() {
	$('.enhanceMyFlight_Link').addClass('hide');
	$('.enhanceMyFlight_LinkMobile').removeClass('hide');
	$(document).on('change','#upcomingMobileAppChanges', function(){
		$('.enhanceMyFlight_Link').addClass('hide');
		$('.enhanceMyFlight_LinkMobile').removeClass('hide');
	});
	$(document).on('click', '.upcoming_checkin_btn', function() {
		if( $(this).attr('data-clicked') == undefined ) {
			$(this).attr('data-clicked','true');
			var element = $(this);
			var lastName = $(this).attr('data-lastname'),
				referenceNo = $(this).attr('data-reference');
			var data = { 
						"lastName" : lastName,
						"referenceNumber" : referenceNo
			};
			if( mobilePlatform == window.ANDROID_PLATFORM ){
				JSInterface.upcomingTripsCheckin(JSON.stringify(data));
			}
			if( mobilePlatform == window.IOS_PLATFORM ){
				//console.log('logged from IOS');
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here */
					bridge.callHandler('upcomingTripsCheckin', data, function() {
						//console.log('Registered Handler for twitter link');
							setTimeout(function() {
									$(element).removeAttr('data-clicked');
								}, 500);
					});
				});
			}
		}
	});
	$(document).on('click','.enhanceMyFlight_LinkMobile', function() {
		var element = $(this);
		if( $(this).attr('data-clicked') == undefined ) {
			$(this).attr('data-clicked','true');
			var element = $(this);
			var lastName = $(this).attr('data-lastname'),
				referenceNo = $(this).attr('data-reference');
			var data = { 
						"lastName" : lastName,
						"pnr" : referenceNo
			};
			if( mobilePlatform == window.ANDROID_PLATFORM ){
				JSInterface.appMBRedirection(JSON.stringify(data));
			}
			if( mobilePlatform == window.IOS_PLATFORM ){
				//console.log('logged from IOS');
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here */
					bridge.callHandler('appMBRedirection', data, function() {
						//console.log('Registered Handler for twitter link');
						setTimeout(function() {
							$(element).removeAttr('data-clicked');
						}, 500);
					});
				});
			}
			setTimeout(function(){
				$(element).removeAttr('data-clicked');
			}, 1000);
		}
	});
}


var isMobileAppSessionFailure = false;

var validateSessionApp = function() {
	
	if( $('#isCUGEnabled').val() !== 'true' ) {
		return false;
	}
	/* Verify User - Start */
	var verifyUserServiceURL = $('#verifyUserURL').val();
	//console.log('verifyUserServiceURL is:', verifyUserServiceURL);
	isMobileAppSessionFailure = true;
	if(verifyUserServiceURL !== '' && verifyUserServiceURL !== undefined) {
		var sessionToken = getFFPCookieValue("QRTOKEN");
		var verifyUserRequest = {
			"token": sessionToken
		};
		window.qrServiceRef.postReq(verifyUserServiceURL, verifyUserRequest, req_headers, '', {}).then(function(response) {
			//console.log('verifyUserServiceResponse:', response);
			var verifyUserStatus = response.status;
			//console.log('verifyUserStatus:', verifyUserStatus);
			if(verifyUserStatus) {
				if( mobilePlatform == window.ANDROID_PLATFORM ){
					JSInterface.SessionSuccess();
				}
				if( mobilePlatform == window.IOS_PLATFORM ){
					setupWebViewJavascriptBridge(function(bridge) {
						/* Initialize your app here */
						bridge.callHandler('SessionSuccess', '', function() {
							//console.log('Registered Handler for twitter link');
						});
					});
				}
			} else {
				$.ajax({
					url: "/qr/Logout",
					type: 'GET',   
					data: {"logOut":"logOut"},
					cache: false,
					success: function(data) {   
						if( mobilePlatform == window.ANDROID_PLATFORM ){
							JSInterface.SessionFailure();
						}
						if( mobilePlatform == window.IOS_PLATFORM ){
							setupWebViewJavascriptBridge(function(bridge) {
								/* Initialize your app here */
								bridge.callHandler('SessionFailure', '', function() {
									//console.log('Registered Handler for twitter link');
								});
							});
						}
					},
					error:function(xhr,textStatus,errorThrown){
						if( mobilePlatform == window.ANDROID_PLATFORM ){
							JSInterface.SessionFailure();
						}
						if( mobilePlatform == window.IOS_PLATFORM ){
							setupWebViewJavascriptBridge(function(bridge) {
								/* Initialize your app here */
								bridge.callHandler('SessionFailure', '', function() {
									//console.log('Registered Handler for twitter link');
								});
							});
						}
					}
				}); 
				
			}
		});

	}
	/* Verify User - End */
};


var validateSessionMobileHTML = function() {
	if( $('#isCUGEnabled').val() !== 'true' ) {
		return false;
	}
	/* Verify User - Start */
	var verifyUserServiceURL = $('#verifyUserURL').val();
	//console.log('verifyUserServiceURL is:', verifyUserServiceURL);

	if(verifyUserServiceURL !== '' && verifyUserServiceURL !== undefined) {
		var sessionToken = getFFPCookieValue("QRTOKEN");
		var verifyUserRequest = {
			"token": sessionToken
		};
		window.qrServiceRef.postReq(verifyUserServiceURL, verifyUserRequest, req_headers, '', {}).then(function(response) {
			//console.log('verifyUserServiceResponse:', response);
			var verifyUserStatus = response.status;
			//console.log('verifyUserStatus:', verifyUserStatus);
			if(verifyUserStatus) {
				//Nothing to do...
			} else {
				$.ajax({
					url: "/qr/Logout",
					type: 'GET',   
					data: {"logOut":"logOut"},
					cache: false,
					success: function(data) {   
						$('#sessionTimedoutMobileHTML').removeClass('hide');
						$('#loginMainComponent').remove();
					},
					error:function(xhr,textStatus,errorThrown){
						$('#sessionTimedoutMobileHTML').removeClass('hide');
						$('#loginMainComponent').remove();
					}
				}); 
				
			}
		});

	}
	/* Verify User - End */
};


var isMobileIntegrationLoaded = false;

function mobileAppIntegrationMethods(){
	
	if(!isMobileIntegrationLoaded) {
		isMobileIntegrationLoaded = true;
	} else {
		return false;
	}
	
	if( $('#header-back').length ){
		$('#header-back').removeAttr('onclick');
	}
	if( $('.qbiz-login-section').length ) {
		$('.qbiz-login-section').css({'display':'none'});
	}
	setTokenToApp();
	findthePageTitle();
	if( $('#j-login-form').length == 0 && $('#socialJoin').length == 0) {
		validateSessionApp();
	}
	loginMobileApp();
	enrollmentMobileApp();
	hideSpinnerMobileApp(null, '');
	mobileSocialMediaLink();
	enableUpcomingTripsEvents();

	if(screen.width <= 480) { var mvpW = document.getElementById('myViewport'); mvpW.setAttribute('content','width=480; user-scalable=yes;');}
	
	setupWebViewJavascriptBridge(function(bridge) {
		/* Initialize your app here */
		bridge.registerHandler('socialLoginFailedCallback', function() {
			$('body').css({'display':'block'})
		});
	});
	
	/*if( mobilePlatform == window.IOS_PLATFORM ){
		addToAppleWallet();
	}*/
	if( $('#offersTeaserMobileOption').length ) {
		if( $('#offersTeaserMobileOption').val() === 'true' ){
			$('.offers-double-teaser').remove();
		}
	}
	if( $('.extenalLinkApp').length ) {
		$('.extenalLinkApp').on('click', function() {
			var url = $(this).attr('href');
			if( mobilePlatform == window.ANDROID_PLATFORM ){
				JSInterface.externalLinkClick(url);
			}
			if( mobilePlatform == window.IOS_PLATFORM ){
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here */
					bridge.callHandler('externalLinkClick', url, function() {
						//console.log('Registered Handler for external links');
					});
				});
			}
			return false;
		});
	}
	
	/** set login to fit the screen **/
	if($('.login-drop').length && mobilePlatform == window.IOS_PLATFORM) {
		//$('.login-drop .login-drop-columns .login-drop-column.j-login-action.flip-container').css({'padding-left': '28px','padding-right': '76px'});
		//$('.login-drop .login-drop-columns .login-drop-column.create-profile-popup').css({'margin-left': '-12px','padding-right': '36px'});
		//$('#forgot-password').css({'width': '78%'});
		/*$(document).delegate('body', 'touchmove',function(e) {
			e.preventDefault();
			return false;
		});*/
		//$('.login-drop').css({'width': '94%','margin-left': '-5%','padding-left':'10px'});
		//$('.login-drop #reset-password').css({'width': '80%;'});
		$('#main .contentmodule-signon.section').css({'width':'90%'});
		$('#forgot-password-link').attr('style','font-size : 10px !important');
		
		$('#main').on('touchmove',function(e){
			e.preventDefault();
		});
		
	}
	if( $('#div_guestuserlogin').length ) {
		$('#div_guestuserlogin').find('a.btn').removeAttr('onclick');
		$('#div_guestuserlogin').find('a.btn').on('click', function(){
			if( mobilePlatform == window.ANDROID_PLATFORM ){
				JSInterface.guestLoginApp();
			}
			if( mobilePlatform == window.IOS_PLATFORM ){
				//console.log('logged from IOS - guest login');
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here */
					bridge.callHandler('guestLoginApp', {}, function() {
					});
				});
			}
		});
}

	var activeUrl = window.location.hash;
	if( $('#j-poi-tab-content-bgt').length && activeUrl.indexOf('ps') == -1 ) {
	setTimeout(function() {
			$('#j-poi-tab-content-bgt').find('.tabset-accordion-item').each(function(){
				$(this).find('.j-T34-continue').prop('disabled',true);
				$(this).removeClass('active');
				$(this).find('.accordion-module-content-holder').removeClass('in');
				$(this).find('.T34.tabset-accordion-content').removeClass('in');
			});
		},300);
		
	} else {
		var searchItem = window.location.hash;
		var indexOfHash = searchItem.indexOf('#');
		var indexOfQ = searchItem.indexOf('?');
		if( indexOfQ != -1 ) {
			var subString = searchItem.substring(indexOfHash,indexOfQ);
			$('[href="'+subString+'"]').click();
			setTimeout(function() {
				$(subString).addClass('active');
			}, 600);
		}
	}
	if( $('#j-poi-tab-content1').length && activeUrl.indexOf('ps') == -1 ) {
		setTimeout(function(){
			$('#j-poi-tab-content1').find('.tabset-accordion-item').each(function(){
				$(this).find('.j-T34-continue').prop('disabled',true);
				$(this).removeClass('active');
				$(this).find('.accordion-module-content-holder').removeClass('in');
				$(this).find('.T34.tabset-accordion-content').removeClass('in');
			});
		},300);
	} else {
		var searchItem = window.location.hash;
		var indexOfHash = searchItem.indexOf('#');
		var indexOfQ = searchItem.indexOf('?');
		if( indexOfQ != -1 ) {
			var subString = searchItem.substring(indexOfHash,indexOfQ);
			$('[href="'+subString+'"]').click();
			setTimeout(function() {
				$(subString).addClass('active');
			}, 600);
		}
	}
	setTimeout(function() {
		if($('.dashboard-layover').length && $('#double-teaser').length ){
			$('#double-teaser #gen-twocolumn-content .two-columns-content-block-header').attr('style','position: relative !important');
		}
	}, 300);
    var sessionLastAcitivity = localStorage.getItem("sessionLastAcitivity");
    if( sessionLastAcitivity !== null && sessionLastAcitivity !== undefined ){
        localStorage.removeItem("sessionLastAcitivity");
	}
    clearInterval(sess_intervalID);
	if( $('.T7_4-redeem #tabView-qatar-flight').length != - 1 ){
		$('.T7_4-redeem #tabView-qatar-flight #advanceBookingwidgt #multiCityRadio').parent().hide();
	}
	
	/*$('a').on('click', function(event) {
		var link = $(this).attr('href');
		var target = $(this).attr('target');
		if( (link.indexOf('carrentals.qatarairways.com') != -1 || link.indexOf('hotels.qatarairways.com') !== -1) && target == '_blank' ) {
			event.preventDefault();
			if( mobilePlatform == window.ANDROID_PLATFORM ){
				JSInterface.externalLinkClick(link);
			}
			if( mobilePlatform == window.IOS_PLATFORM ){
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here *-/
					bridge.callHandler('externalLinkClick', link, function() {
						//console.log('Registered Handler for external links');
					});
				});
			}
			return false;
		}
	});*/
	$(document).on('click', '#upcomingtrips-spinner-container .trips-section-list .media-tabs .media-tabs-tab-content .media-tabs-text-holder a', function(event){
		var link = $(this).attr('href');
		if(link.indexOf('carrentals.qatarairways.com') > 0 || link.indexOf('hotels.qatarairways.com') > 0 ) {
			event.preventDefault();
			if( mobilePlatform == window.ANDROID_PLATFORM ){
				JSInterface.externalLinkClick(link);
			}
			if( mobilePlatform == window.IOS_PLATFORM ){
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here */
					bridge.callHandler('externalLinkClick', link, function() {
						//console.log('Registered Handler for external links');
					});
				});
			}
			return false;
		}
	});
	
	/** cancel session if login-token is not available **/
	if(getFFPCookieValue('QRTOKEN') != null){
		
		$.ajax({
			url: "/qr/qrweb/accesslogintoken",
			type: 'GET',
			cache: false,
			success: function(data, textStatus, errorThrown) {
				if( data == undefined || data == null || data.length == 0 ) {
					$.ajax({
						url: "/qr/Logout",
						type: 'GET',   
						data: {"logOut":"logOut"},
						cache: false,
						success: function(data) {     
							if( mobilePlatform == window.ANDROID_PLATFORM ){
								JSInterface.SessionFailure();
							}
							if( mobilePlatform == window.IOS_PLATFORM ){
								setupWebViewJavascriptBridge(function(bridge) {
									/* Initialize your app here */
									bridge.callHandler('SessionFailure', '', function() {
										//console.log('Session failure to go to home screen of app');
									});
								});
							}
						},
						error:function(xhr,textStatus,errorThrown){
							if( mobilePlatform == window.ANDROID_PLATFORM ){
								JSInterface.SessionFailure();
							}
							if( mobilePlatform == window.IOS_PLATFORM ){
								setupWebViewJavascriptBridge(function(bridge) {
									/* Initialize your app here */
									bridge.callHandler('SessionFailure', '', function() {
										//console.log('Session failure to go to home screen of app');
									});
								});
							}
						}
					}); 
					
				}
			}
		});
	}
	
};


/** Method to check for IOS Native App object availability **/
function setupWebViewJavascriptBridge(callback) {
	if (window.WebViewJavascriptBridge) { return callback(WebViewJavascriptBridge); }
	if (window.WVJBCallbacks) { return window.WVJBCallbacks.push(callback); }
	window.WVJBCallbacks = [callback];
	var WVJBIframe = document.createElement('iframe');
	WVJBIframe.style.display = 'none';
	WVJBIframe.src = 'https://__bridge_loaded__';
	document.documentElement.appendChild(WVJBIframe);
	setTimeout(function() { document.documentElement.removeChild(WVJBIframe) }, 0)
}


/** method to find the mobile selector **/
function isURLContainsMobileSelector(url) {
    if(window.JSInterface || window.WebViewJavascriptBridge ) {
        return true;
    }
	return false;
}

/** register handlers for IOS mobile app integration **/
function registerHandlers(){
	var url = document.referrer != '' ? document.referrer : null;
		
	if( mobilePlatform == window.IOS_PLATFORM ){
		
		/** Register handler to get json object **/
		setupWebViewJavascriptBridge(function(bridge) {
			/* Initialize your app here */
			bridge.registerHandler('backButtonClick', function(responseData) {
				
				setupWebViewJavascriptBridge(function(bridge) {
					/* Initialize your app here */
					bridge.callHandler('redirectPage', url, function() {
						//console.log('Redirecting to page : '+url);
					});
				});
				
			});
		});
	}
	mobileAppIntegrationMethods();
};

//IOS_PLATFORM
setupWebViewJavascriptBridge(function(bridge) {
	/* Initialize your app here */
	bridge.registerHandler('setPlatform', function(data) {
		//console.log('Set Platform called from iOS');
		mobilePlatform = window.IOS_PLATFORM;
		if( $('#mobileAppTriggerer').val() == 'false' ){
			$('#mobileAppTriggerer').val('true');
			$('#mobileAppTriggerer').trigger('change');
		}
		registerHandlers();
	});
});

/** method to find the mobile selector **/
function mobileAppPlatform() {
	//console.log('mobile selection method called');
    //ANDROID_PLATFORM
    if(window.JSInterface) {
        mobilePlatform = window.ANDROID_PLATFORM;
		if( $('#mobileAppTriggerer').val() == 'false' ){
			$('#mobileAppTriggerer').val('true');
			$('#mobileAppTriggerer').trigger('change');
		}
        registerHandlers();
	}
	//IOS_PLATFORM
	setupWebViewJavascriptBridge(function(bridge) {
		/* Initialize your app here */
		bridge.registerHandler('setPlatform', function(data) {
			//console.log('Set Platform called from iOS');
			mobilePlatform = window.IOS_PLATFORM;
			if( $('#mobileAppTriggerer').val() == 'false' ){
				$('#mobileAppTriggerer').val('true');
				$('#mobileAppTriggerer').trigger('change');
			}
			registerHandlers();
		});
	});
}

function isMobileApp() {
    if(mobilePlatform == window.ANDROID_PLATFORM || mobilePlatform == window.IOS_PLATFORM) {
        return true;
    }
	return false;
}
$(document).ready(function(){
	/** calling method to define the platform variable on load **/
	mobileAppPlatform();
});
	
$(document).ready(function(){
	$(document).on('change', '#mobileAppTriggerer', function(){
		mobileAppIntegrationMethods();
        if( $('#header-back').length ){
			$('#header-back').removeAttr('onclick');
        }
		if( $('.qbiz-login-section').length ) {
			$('.qbiz-login-section').css({'display':'none'});
		}
	});

	//console.log('triggered');
	/** remove default functionality of header login back button for Mobile App**/
	if( $('#header-back').length ){
		$('#header-back').removeAttr('onclick');
		$(document).on('click','#header-back a' , function(){
			if( isMobileApp() ){
				loginHeaderBackClick();
				return false;
			}
		});
	}
	 /** remove default functionality of download of membership cards for Mobile App**/
	if( $('.C32-membership-card-toolbar-dl.j-C32-dl').length ){
		$('.C32-membership-card-toolbar-dl.j-C32-dl').removeAttr('download');
		$('.C32-membership-card-toolbar-dl.j-C32-dl').on('click', function(){
			if( isMobileApp() ){
				memberShipCardsDownload();
				return false;
			}
		});
	}
	if( $('#earnSearchFlightButton').length ){
		$(document).on('click','#earnSearchFlightButton' , function(){
			if( isMobileApp() ){
				qCalculatorSearchFight();
				return false;
			}
		});

		$(document).on('click','#excessBaggage' , function(){
			if( isMobileApp() ){
				qCalculatorExcessBaggage();
				return false;
			}
		});

		/*$(document).on('click','.upgradeButton' , function(){
			if( isMobileApp() ){
				qCalculatorUpgrade();
				return false;
			}
		});*/
	}
    $(document).on('click','.trip-history.popup button.close', function(){
		$('.trip-history-modal.j-trip-history').removeClass('in');
    });
	
	var pageName = location.pathname.substring(location.pathname.lastIndexOf('/')+1,location.pathname.length);
	if( location.pathname.indexOf('.mobile.html') != -1 && $('#j-login-form').length == 0 && $('#isCUGEnabled').val() == "true" && $('#socialJoin').length == 0) {
		setTimeout(function() {
			if( !isMobileAppSessionFailure ) {
				validateSessionMobileHTML();
			}
		}, 500);
	}
	
	$(document).on('click', '#sessionTimedoutMobileHTML .btn' , function(){
		if( isMobileApp() ){
			validateSessionApp();
		} else {
			var loginLink = $('#mobileSessionTimeoutLink').val()+'.mobile.html';
			window.location.href = loginLink;
		}
	});
});
$(document).ready(function() {
    var currentPageTemplate = $('#current-page-template').val();
    var isPublish = $('#isPublish').val();
    if(isPublish === 'true' && currentPageTemplate === '/apps/qrweb/templates/withoutheaderfootertemplate') {        
        signOut(false, null);
    }
    if(isPublish == 'true' && $('#headerReleaseType').val() !== 'release1B') {
		var sessionToken = getFFPCookieValue("QRTOKEN");
		if( typeof sessionToken != 'undefined' && sessionToken != null && sessionToken != '' ) {
			$('#login-container').addClass('hidden');
			$('#loginHeader').css("display", "none");
			$('#loginScreen').removeClass('hidden');
		}  else {        	
			$('#login-container .login-signup-block').removeClass('hidden');
			$('#loginHeader').css("display", "block");
			$('#loginScreen').addClass('hidden');
		}
    }
	var loginRequest = getFFPCookieValue("loginRequest");
    if(isPublish === 'true' && currentPageTemplate !== '/apps/qrweb/templates/withoutheaderfootertemplate' && null !== loginRequest && '' !== loginRequest && typeof loginRequest !== 'undefined') {     
        document.cookie = 'loginRequest=;path=/;domain=.qatarairways.com';
    }
});
$(document).ready(function() {
    var sessionToken = getFFPCookieValue('QRTOKEN');
	if(null == sessionToken || '' == sessionToken) {
		var currentPage = $('#landed-page-path').val();
		$.ajax({
			url: '/qr/createQmilesCookies.json',
			type: 'get',
			contentType: 'application/json; charset=utf-8',
			dataType: 'json',
			async: false,
			success: function(response) {
				//console.log("Created the cookies");             
				var responseString = (typeof response == 'object') ? JSON.stringify(response) : response;
				$('#QmilesSitesJsonInformation').val(responseString);				
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				console.error("Error while creating cookies");
			}
		});
	}
	
    var qmilesSiteCookieValue = getActualCookieValue('QMILESSITE');
    //console.log('qmilesSiteCookieValue:From showPCMenu:' + qmilesSiteCookieValue);
	
	var isResponsiveView = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	if(isResponsiveView && 'old' == qmilesSiteCookieValue) {
		qmilesSiteCookieValue = 'new';
	}

    var memberProgramCode = getUserBasicInfoField('programCode');
    //console.log('memberProgramCode:' + memberProgramCode);
    
    if('QRPC' == memberProgramCode) {
        if('new' === qmilesSiteCookieValue) {
            $('#new-qrpc-megamenu-links').removeClass('hidden');
        } else if('old' === qmilesSiteCookieValue) {
            $('#old-qrpc-megamenu-links').removeClass('hidden');
        } else if('other' === qmilesSiteCookieValue) {
            $('#global-qrpc-megamenu-links').removeClass('hidden');
        } else if('other-en' === qmilesSiteCookieValue) {
            $('#english-qrpc-megamenu-links').removeClass('hidden');
        } else if('mobile-old' === qmilesSiteCookieValue) {
            $('#mobile-qrpc-megamenu-links').removeClass('hidden');
        }			
    } else if('PORTAL' == memberProgramCode) {
        if('new' === qmilesSiteCookieValue) {
            $('#new-portal-megamenu-links').removeClass('hidden');
        } else if('old' === qmilesSiteCookieValue) {
            $('#old-portal-megamenu-links').removeClass('hidden');
        } else if('other' === qmilesSiteCookieValue) {
            $('#global-portal-megamenu-links').removeClass('hidden');
        } else if('other-en' === qmilesSiteCookieValue) {
            $('#english-portal-megamenu-links').removeClass('hidden');
        } else if('mobile-old' === qmilesSiteCookieValue) {
            $('#mobile-portal-megamenu-links').removeClass('hidden');
        }
    }
});
function nearestAirport(){
var runmodes = $("#runmodes").val();
    if(runmodes!=undefined && runmodes != null && !runmodes.split(',').indexOf('author') > -1){
        var country_code;
        var jsonlat;
        var jsonlong;
        var distancearray = [];
        var airportdata = {};
        var airport;
        var city;
        var url;
        var response;

        if($('#isProd').val() == "true"){
            url = "https://www.qatarairways.com/iw-cc/qatar/servicelocate.jsp";
        }else{
            url = "https://stg.qatarairways.com/iw-cc/qatar/servicelocate.jsp";
        }

      $.ajax({
            type: 'GET',
            contentType: "application/json; charset=utf-8",
            async: false,
            timeout:5000,
            url: url,
            success: function(data) {
                response=JSON.parse(data);
				country_code = response.Countrycode;
				jsonlong = response.Long.replace("-", "");
				jsonlat = response.Lat.replace("-", "");
            },
            error: function(jqXHR, textStatus, errorThrown) {
                    console.log("error in closest airport", jqXHR.status, errorThrown, jqXHR.responseText, textStatus)
                }
        });

        if(country_code == null || country_code == ""){

                var shorthand = $('#origin-airport').val();
                $.each(departureautoCompleteList, function(k, v) {
                if(departureautoCompleteList[k].shorthand = shorthand){
                    country_code = departureautoCompleteList[k].countrycode;
                    var lat = departureautoCompleteList[k].latitude;
                    var lon = departureautoCompleteList[k].longitude;

                if (lat != "" && lon != "") {
                    lat = lat.split("\xB0");
                    lon = lon.split("\xB0");

                }
                    jsonlat = lat[0].replace("-", "");
                    jsonlong = lon[0].replace("-", "");

                }
            });

            }



        var lat;
        var lon;
        var departureautoCompleteList = window.cityListJSON;

        $.each(departureautoCompleteList, function(k, v) {

            var countrycode = departureautoCompleteList[k].countryCode;

            if (countrycode == country_code) {
                 lat = departureautoCompleteList[k].latitude;
                 lon = departureautoCompleteList[k].longitude;


                if (lat != "" && lon != "") {
                    lat = lat.split("\xB0");
                    lon = lon.split("\xB0");
                    if(departureautoCompleteList[k].airport != null || departureautoCompleteList[k].airport != ""){
                        airport = departureautoCompleteList[k].shorthand;
                        city = departureautoCompleteList[k].city;
                    }
                    if(lat[0] != "" && lat[0] != null && lon[0] != "" && lon[0] != null && departureautoCompleteList[k].priority == "qr"){
                        distancearray.push({"shorthand" : airport,"city": city , "countryCode":countrycode, "distance" :getDistanceFromLatLonInKm(lat[0], lon[0], jsonlat, jsonlong)});
                    }


                }

            }



        });

        if(distancearray.length != 0){
            distancearray.sort(function(a, b){
            return a.distance-b.distance;
            });
            if(distancearray.length >1){
                distancearray.length=1;
            }
        }

        var shortHand;
        var citycode;
        var bxcountryCode="";

        $.each(distancearray, function(k,v)
        {
            $('#destination-from').val(distancearray[k].shorthand);
            shortHand = distancearray[k].shorthand;
            citycode = distancearray[k].city;
            bxcountryCode = distancearray[k].countryCode;

        });

        //boxever call for trending destinations under BW TO field
        try{
            if(typeof shortHand !='undefined' && shortHand != $('#boxeverDefaultOrigin').val()){
                 if(typeof regionToSend !='undefined' && bxcountryCode!=""){regionToSend=bxcountryCode;}
                var locfriendlyID = (typeof friendlyIdHPFD!='undefined' && friendlyIdHPFD!="")?friendlyIdHPFD:"homepage_destination_recommender*";
                sendAysncFlowcall(shortHand, locfriendlyID);
            }
        }catch(err){}

        if(shortHand != "" && shortHand != undefined && citycode != "" && citycode != undefined){
            window.shortHand = shortHand;
            window.citycode= citycode.split('*')[0];
        }

    }

}

    function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
            var d;
            var R = 6371; // Radius of the earth in km
            var dLat = deg2rad(lat2 - lat1); // deg2rad below
            var dLon = deg2rad(lon2 - lon1);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            d = R * c; // Distance in km
            return d;
        }

        function deg2rad(deg) {
            return deg * (Math.PI / 180)
        }

        function ParseDMS(input) {
            var parts = input.split(/[^\d\w\.]+/);
            var lat = ConvertDMSToDD(parts[0], parts[1], parts[2], parts[3]);
            var lng = ConvertDMSToDD(parts[4], parts[5], parts[6], parts[7]);

            var Distance = getDistanceFromLatLonInKm(jsonlat, jsonlong, lat, lng);

        }

        function ConvertDMSToDD(degrees, minutes, seconds, direction) {
            var dd = degrees + (((minutes * 60) + (seconds)) / 3600);


            if (direction == "S" || direction == "W") {
                dd = dd * -1;
            } // Don't do anything for N or E

            return dd;
        }


        function ddToDms(lat, lng) {

            var lat = lat;
            var lng = lng;
            var latResult, lngResult, dmsResult;

            lat = parseFloat(lat);
            lng = parseFloat(lng);

            latResult = getDms(lat);

            latResult += (lat >= 0) ? 'N' : 'S';

            lngResult = getDms(lng);
            lngResult += (lng >= 0) ? 'E' : 'W';

            dmsResult = latResult + ' ' + lngResult;

            return dmsResult;
        }

        function getDms(val) {

            var valDeg, valMin, valSec, result;

            val = Math.abs(val);

            valDeg = Math.floor(val);
            result = valDeg + "?";

            valMin = Math.floor((val - valDeg) * 60);
            result += valMin + "'";

            valSec = Math.round((val - valDeg - valMin / 60) * 3600 * 1000) / 1000;
            result += valSec + '"';

            return result;
        }
$(document).ready(function() {
    $("a[href$='activityCode=QDF']").on('click', function() {
        var sessionToken = getFFPCookieValue('QRTOKEN');
    	var qdfURL = $('#qdf-redirection-page').val();
        if(null !== sessionToken && undefined !== sessionToken && '' !== sessionToken) {
            var paramsHTML = '<input type="hidden" value="' + sessionToken + '" name="QRTOKEN" />';
            paramsHTML += '<input type="hidden" value="' + $('#page-locale').val() + '" name="selLang" />';
            $('#j-cookie-call-back-url-form').attr('action', qdfURL);
            $('#j-cookie-call-back-url-form').empty();
            $('#j-cookie-call-back-url-form').append(paramsHTML);
            $('#j-cookie-call-back-url-form').submit();
            return false;
        }
    });
});
